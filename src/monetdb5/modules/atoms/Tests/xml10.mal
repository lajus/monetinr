# produce a more complex structure
# such as 
#<books>
#  <author> john
#  <title> spring</title>
#  <title> summer</title>
#  </author>
#  <author> mary
#  <title> autum</title>
#  </author>
#</books>

# the intermediate tabular result produced by SQL
a:= bat.new(:oid,:str);
bat.insert(a,0@0,"john");
bat.insert(a,1@0,"john");
bat.insert(a,2@0,"marie");
t:= bat.new(:oid,:str);
bat.insert(t,0@0,"spring");
bat.insert(t,1@0,"summer");
bat.insert(t,2@0,"autum");

# SQL rendering request
#xmlelement('books',
#	xmlelement('author',a,
#			xmlagg(xmlelement('title',t))
#   ) )
# every nesting implies a groupby

ax:= xml.xml(a);
tx:= xml.xml(t);
te:= xml.element("title",tx);
g:= bat.new(:oid,:oid);
bat.insert(g,0@0,0@0);
bat.insert(g,1@0,0@0);
bat.insert(g,2@0,1@0);

k:= algebra.join(g,te);
io.print(k);
l:= algebra.sort(k);
io.print(l);

ag:= xml.agg(te,g);
io.print(ag);

gr:= bat.reverse(g);
j2:= algebra.join(gr,ax);
k2:=algebra.kunique(j2);
io.print(k2);
cc:= xml.concat(k2,ag);
io.print(cc);
io.print("author construction");
ae:= xml.element("author",cc);
io.print(ae);

io.print("book construction");
be:= xml.agg(ae);
io.print(be);
doc:= xml.element("books",be);
io.print(doc);
