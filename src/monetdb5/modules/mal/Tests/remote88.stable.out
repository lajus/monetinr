stdout of test 'remote88` in directory 'monetdb5/modules/mal` itself:


# 20:12:34 >  
# 20:12:34 >   mserver5 "--config=/ufs/mk/monet5//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=sql_logs"   --set mapi_open=true --set xrpc_open=true --set mapi_port=35174 --set xrpc_port=49855 --set monet_prompt= --trace  --dbname=mTests_src_modules_mal  remote88.mal
# 20:12:34 >  

# MonetDB server v5.11.0, based on kernel v1.29.0
# Serving database 'mTests_src_modules_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2009 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:35174/
function octopus.bind(v:int):bat[:oid,:int];
    b := bat.new(:oid,:int);
    bat.append(b,v);
    return bind := b;
end bind;
function octopus.bind(conn:str,v:int):bat[:oid,:int];
    vh := remote.put(conn,v);
    b := remote.put(conn,nil:bat[:oid,:int]);
    b := remote.exec(conn,"octopus","bind",vh);
    bv:bat[:oid,:int]  := remote.get(conn,b);
    return bind := bv;
end bind;
function octopus.tentacle(v:int,uri:str):bat[:oid,:int];
    conn:str  := remote.connect(uri,"monetdb","monetdb","msql");
    b := octopus.bind(conn,v);
catch RMTexception:str ;
    io.print(RMTexception);
exit RMTexception:str ;
    remote.disconnect(conn);
    return tentacle := b;
end tentacle;
function octopus.exec(uri:str,query:str,version:int):bat[:oid,:int];
    conn:str  := remote.connect(uri,"monetdb","monetdb","msql");
    m := remote.put(conn,version);
    v := remote.put(conn,nil:bat[:oid,:int]);
    u := remote.put(conn,uri);
# this works with uri, because head and tentacle are the same */ 
    v := remote.exec(conn,"octopus",query,m,u);
    res:bat[:oid,:int]  := remote.get(conn,v);
    remote.disconnect(conn);
    return exec := res;
end exec;
function user.main():void;
# test octopus framework 
    sql.prelude();
# The script occassionally shows parallism errors. 
# !MALException:remote.get:MALException:remote.get:'io.peephole' undefined in: _3:any := io.peephole(rmt_octopus_exec__9_bat__oid__int_:bat[:oid,:int]) 
#profiler.activate("statement"); 
#profiler.setFilter("*","*"); 
#profiler.openStream("console"); 
#profiler.start(); 
    uri := sabaoth.getLocalConnectionURI();
barrier (k,v) := language.newRange(0:int);
    io.print(v);
barrier go := language.dataflow();
    v1:bat[:oid,:int]  := octopus.exec(uri,"tentacle",v);
    v2:bat[:oid,:int]  := octopus.exec(uri,"tentacle",v);
    v3:bat[:oid,:int]  := octopus.exec(uri,"tentacle",v);
    v4:bat[:oid,:int]  := octopus.exec(uri,"tentacle",v);
    res := mat.pack(v1,v2,v3,v4);
exit go;
    redo (k,v) := language.nextElement(1:int,25:int);
exit (k,v);
    z := clients.getUsers();
    io.print(z);
end main;
# MonetDB/SQL module v2.29.0 loaded
[ 0 ]
[ 1 ]
[ 2 ]
[ 3 ]
[ 4 ]
[ 5 ]
[ 6 ]
[ 7 ]
[ 8 ]
[ 9 ]
[ 10 ]
[ 11 ]
[ 12 ]
[ 13 ]
[ 14 ]
[ 15 ]
[ 16 ]
[ 17 ]
[ 18 ]
[ 19 ]
[ 20 ]
[ 21 ]
[ 22 ]
[ 23 ]
[ 24 ]
#-----------------#
# client	users	  # name
# int	str	  # type
#-----------------#
[ 0,	  "0"	  ]
[ 1,	  "0"	  ]
[ 2,	  "0"	  ]
[ 3,	  "0"	  ]
[ 4,	  "0"	  ]
[ 5,	  "0"	  ]
[ 6,	  "0"	  ]
[ 7,	  "0"	  ]
[ 8,	  "0"	  ]

# 20:12:35 >  
# 20:12:35 >  Done.
# 20:12:35 >  

