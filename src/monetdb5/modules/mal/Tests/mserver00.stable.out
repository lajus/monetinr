stdout of test 'mserver00` in directory 'monetdb5/modules/mal` itself:


# 23:07:54 >  
# 23:07:54 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=37461 --set monet_prompt= --trace --dbname=mTests_src_modules_kernel  mapi00.mal < /dev/null
# 23:07:54 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_src_modules_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:37931/
function user.main():void;
# Attempt to establish a client connection to yourself. 
    fs := inspect.getEnvironment("mapi_port");
    port := calc.int(fs);
#hs:= algebra.find(z,"host"); 
    hs := "localhost";
# hardcoded, as access control currently works, and client.getInfo # doesn't 
#u:= clients.getInfo();
#usr:= algebra.find(u,"user");
#pwd:= algebra.find(u,"password");
#lang:= algebra.find(u,"scenario");
    usr := "monetdb";
    pwd := "monetdb";
    lang := "mal";
# setup the session 
    mid := mapi.connect(hs,port,usr,pwd,lang);
    io.print(mid);
# retrieve data from the 'remote' site 
# testing t:=1+3; 
    mapi.query(mid,"t:= 1+3; io.print(t,\"hello\");");
    i := mapi.get_row_count(mid);
    io.printf("rowcount %d\n",i);
    mapi.fetch_row(mid);
    fcnt := mapi.get_field_count(mid);
    io.printf("fieldcount %d\n",fcnt);
    fi:int  := mapi.fetch_field(mid,0);
    io.printf("field 0 %d\n",fi);
    s:str  := mapi.fetch_field(mid,1);
    io.printf("field 1 %s\n",s);
    mapi.query(mid,"r:= bat.new(:oid,:int);");
    io.printf("shipped first query\n");
    mapi.query(mid,"bat.insert(r, 1@0,311);");
    mapi.query(mid,"bat.insert(r,2@0,433);");
    b:bat[:oid,:int]  := mapi.rpc(mid,"io.print(r);");
    io.print(b);
# use the BAT fetch operation 
#b:bat[:oid,:int]:= mapi.receive(mid,"remotename"); 
    msg:str  := mapi.rpc(mid,"io.print(\"hello world\");");
    io.print(msg);
    o:oid  := mapi.rpc(mid,"io.print(34@0);");
    io.print(o);
    o:oid  := mapi.rpc(mid,"io.print(nil:oid);");
    io.print(o);
#needs type checks 
#(k:int,s:str):= mapi.rpc(mid,"io.print(nil:int,\"done\");"); 
#io.print(k,s); 
# what is the relationship between local/remote namespace 
# mapi.send(key,"a",a); 
# c:= mapi.join(key,a,b); 
# mapi.rpc(key,"z:=algebra.join(a,b);"); 
# c:= mapi.receive(key,"c") 
#patterns 
#pat:= "a:= algebra.select(b,?,?);"); 
#qry:=  str.replace(pat,"?",i,j); 
#mapi.query(key,pat,i,j); 
#how to ship a routine 
#fcn:= manual.definition(manual,help); 
# how to remote MAL execution 
# remotedb:= mapi.connect(...) 
# algebra.join@remotedb(a,b) using remote objects 
# c:= mapi.rpc(remotedb,algebra,join,a,b) 
# the remainder should be tested  
catch MapiException:str ;
    io.printf("foutje:%s\n",MapiException);
exit MapiException:str ;
    mapi.disconnect(mid);
end main;
[ 1 ]
rowcount 1
fieldcount 2
field 0 4
field 1 hello
shipped first query
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 1@0,	  311	  ]
[ 2@0,	  433	  ]
[ "hello world" ]
[ 34@0 ]
[ nil ]

# 23:07:54 >  
# 23:07:54 >  Done.
# 23:07:54 >  

