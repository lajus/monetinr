#testing the z-order library

include zorder;
z:= zorder.encode(0,0); io.print(z);
z:= zorder.encode(1,0); io.print(z);
z:= zorder.encode(0,1); io.print(z);
z:= zorder.encode(1,1); io.print(z);

z:= zorder.encode(2,0); io.print(z);
z:= zorder.encode(3,0); io.print(z);
z:= zorder.encode(2,1); io.print(z);
z:= zorder.encode(3,1); io.print(z);

z1:= zorder.encode(0,2); io.print(z1);
z2:= zorder.encode(1,2); io.print(z2);
z3:= zorder.encode(0,3); io.print(z3);
z4:= zorder.encode(1,3); io.print(z4);

(x,y):= zorder.decode(z1); io.print(x,y);
(x,y):= zorder.decode(z2); io.print(x,y);
(x,y):= zorder.decode(z3); io.print(x,y);
(x,y):= zorder.decode(z4); io.print(x,y);

x := zorder.decode_x(z1);
y := zorder.decode_y(z1); io.print(x, y);
x := zorder.decode_x(z2);
y := zorder.decode_y(z2); io.print(x, y);
x := zorder.decode_x(z3);
y := zorder.decode_y(z3); io.print(x, y);
x := zorder.decode_x(z4);
y := zorder.decode_y(z4); io.print(x, y);

bx:= bat.new(:oid,:int);
bat.append(bx,0);
bat.append(bx,1);
bat.append(bx,0);
bat.append(bx,1);
bat.append(bx,2);
bat.append(bx,3);
bat.append(bx,2);
bat.append(bx,3);
bat.append(bx,0);
bat.append(bx,1);
bat.append(bx,0);
bat.append(bx,1);
bat.append(bx,2);
bat.append(bx,3);
bat.append(bx,2);
bat.append(bx,3);

by:= bat.new(:oid,:int);
bat.append(by,0);
bat.append(by,0);
bat.append(by,1);
bat.append(by,1);
bat.append(by,0);
bat.append(by,0);
bat.append(by,1);
bat.append(by,1);
bat.append(by,2);
bat.append(by,2);
bat.append(by,3);
bat.append(by,3);
bat.append(by,2);
bat.append(by,2);
bat.append(by,3);
bat.append(by,3);
io.print(bx,by);

bz:= zorder.encode(bx,by);
io.print(bz);
(cx,cy):= zorder.decode(bz);
io.print(cx,cy);
dx:= zorder.decode_x(bz);
dy:= zorder.decode_y(bz);
io.print(dx,dy);

# taking a slice
bs:= zorder.slice(1,1,3,3);
io.print(bs);
(dx,dy):= zorder.decode(bs);
io.print(dx,dy);
