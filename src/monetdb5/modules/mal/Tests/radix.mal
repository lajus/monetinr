include radix;
Bu := radix.uniform(99);
Bu0 := algebra.project(Bu,nil);
io.print(Bu0);
Bu1 := bat.reverse(Bu);
Bu2 := algebra.project(Bu1,nil);
Bu3 := algebra.sort(Bu2);
Bu4 := bat.reverse(Bu3);
io.print(Bu4);
Bn := radix.normal(99);
Bn0 := algebra.project(Bn,nil);
io.print(Bn0);
Bn1 := bat.reverse(Bn);
Bn2 := algebra.project(Bn1,nil);
Bn3 := algebra.sort(Bn2);
Bn4 := bat.reverse(Bn3);
io.print(Bn4);

b := bat.new(:oid,:int,16);
bat.insert(b,0@0,8);
bat.insert(b,1@0,13);
bat.insert(b,2@0,1);
bat.insert(b,3@0,2);
bat.insert(b,4@0,0);
bat.insert(b,5@0,6);
bat.insert(b,6@0,12);
bat.insert(b,7@0,3);
bat.insert(b,8@0,4);
bat.insert(b,9@0,14);
bat.insert(b,10@0,9);
bat.insert(b,11@0,7);
bat.insert(b,12@0,10);
bat.insert(b,13@0,15);
bat.insert(b,14@0,11);
bat.insert(b,15@0,5);
a := algebra.markH(b,0@0);

a0 := radix.radix_cluster(b,1);      b0 := algebra.markH(a0,0@0); c0 := batcalc.and(b0, 1);
a1 := radix.radix_cluster(b,2);      b1 := algebra.markH(a1,0@0); c1 := batcalc.and(b1, 3);
a2 := radix.radix_cluster(b,3);      b2 := algebra.markH(a2,0@0); c2 := batcalc.and(b2, 7);
a3 := radix.radix_cluster(b,2,1);    b3 := algebra.markH(a3,0@0); c3 := batcalc.and(b3, 7);
a4 := radix.radix_cluster(b,1,2);    b4 := algebra.markH(a4,0@0); c4 := batcalc.and(b4, 7);
a5 := radix.radix_cluster(b,1,1,1);  b5 := algebra.markH(a5,0@0); c5 := batcalc.and(b5, 7);
a6 := radix.radix_cluster(b,4);      b6 := algebra.markH(a6,0@0); c6 := batcalc.and(b6,15);
a7 := radix.radix_cluster(b,-3,1);   b7 := algebra.markH(a7,0@0); c7 := batcalc.and(b7, 8);
a8 := radix.radix_cluster(b,-2,2);   b8 := algebra.markH(a8,0@0); c8 := batcalc.and(b8,12);
a9 := radix.radix_cluster(b,-1,1,1); b9 := algebra.markH(a9,0@0); c9 := batcalc.and(b9, 6);

io.print(a,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9);
io.print(a,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9);

a0 := radix.radix_cluster2(b,1,1,0); b0 := algebra.markH(a0,0@0); c0 := batcalc.and(b0, 1);
a1 := radix.radix_cluster2(b,1,2,0); b1 := algebra.markH(a1,0@0); c1 := batcalc.and(b1, 3);
a2 := radix.radix_cluster2(b,1,3,0); b2 := algebra.markH(a2,0@0); c2 := batcalc.and(b2, 7);
a3 := radix.radix_cluster2(b,2,3,0); b3 := algebra.markH(a3,0@0); c3 := batcalc.and(b3, 7);
a4 := radix.radix_cluster2(b,2,3,0); b4 := algebra.markH(a4,0@0); c4 := batcalc.and(b4, 7);
a5 := radix.radix_cluster2(b,3,3,0); b5 := algebra.markH(a5,0@0); c5 := batcalc.and(b5, 7);
a6 := radix.radix_cluster2(b,1,4,0); b6 := algebra.markH(a6,0@0); c6 := batcalc.and(b6,15);
a7 := radix.radix_cluster2(b,1,1,3); b7 := algebra.markH(a7,0@0); c7 := batcalc.and(b7, 8);
a8 := radix.radix_cluster2(b,1,2,2); b8 := algebra.markH(a8,0@0); c8 := batcalc.and(b8,12);
a9 := radix.radix_cluster2(b,2,2,1); b9 := algebra.markH(a9,0@0); c9 := batcalc.and(b9, 6);

io.print(a,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9);
io.print(a,c0,c1,c2,c3,c4,c5,c6,c7,c8,c9);

d0 := bat.reverse(b0); e0 := radix.radix_bits(d0); io.print(e0);
d1 := bat.reverse(b1); e1 := radix.radix_bits(d1); io.print(e1);
d2 := bat.reverse(b2); e2 := radix.radix_bits(d2); io.print(e2);
d3 := bat.reverse(b3); e3 := radix.radix_bits(d3); io.print(e3);
d4 := bat.reverse(b4); e4 := radix.radix_bits(d4); io.print(e4);
d5 := bat.reverse(b5); e5 := radix.radix_bits(d5); io.print(e5);
d6 := bat.reverse(b6); e6 := radix.radix_bits(d6); io.print(e6);
d7 := bat.reverse(b7); e7 := radix.radix_bits(d7); io.print(e7);
d8 := bat.reverse(b8); e8 := radix.radix_bits(d8); io.print(e8);
d9 := bat.reverse(b9); e9 := radix.radix_bits(d9); io.print(e9);

rb3d4 := radix.radix_join(b3,d4);
rb2d5 := radix.radix_join(b2,d5);
pb3d4 := radix.phash_join(b3,d4);
pb2d5 := radix.phash_join(b2,d5);

io.print(rb3d4,rb2d5,pb3d4,pb2d5);

l0 := bat.new(:oid,:int,15);
bat.insert(l0,0@0,4);
bat.insert(l0,1@0,8);
bat.insert(l0,2@0,0);
bat.insert(l0,3@0,12);
bat.insert(l0,4@0,1);
bat.insert(l0,5@0,13);
bat.insert(l0,6@0,5);
bat.insert(l0,7@0,9);
bat.insert(l0,8@0,2);
bat.insert(l0,9@0,10);
bat.insert(l0,10@0,14);
bat.insert(l0,11@0,6);
bat.insert(l0,12@0,7);
bat.insert(l0,13@0,11);
bat.insert(l0,14@0,3);
l1 := radix.radix_cluster(l0,2); l := algebra.markH(l1,0@0);

r0 := bat.new(:oid,:int,17);
bat.insert(r0,0@0,16);
bat.insert(r0,1@0,4);
bat.insert(r0,2@0,12);
bat.insert(r0,3@0,8);
bat.insert(r0,4@0,0);
bat.insert(r0,5@0,1);
bat.insert(r0,6@0,5);
bat.insert(r0,7@0,9);
bat.insert(r0,8@0,13);
bat.insert(r0,9@0,14);
bat.insert(r0,10@0,10);
bat.insert(r0,11@0,6);
bat.insert(r0,12@0,2);
bat.insert(r0,13@0,15);
bat.insert(r0,14@0,7);
bat.insert(r0,15@0,11);
bat.insert(r0,16@0,3);
r1 := radix.radix_cluster(r0,2); r2 := algebra.markH(r1,0@0); r := bat.reverse(r2);

jlr := algebra.join(l,r);
rlr := radix.radix_join(l,r);
rlr2 := radix.radix_join(l,r,2);
plr := radix.phash_join(l,r);
plr2 := radix.phash_join(l,r,2);

io.print(jlr,rlr,rlr2,plr,plr2);

