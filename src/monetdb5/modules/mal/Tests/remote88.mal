# test octopus framework
include sql;
# The script occassionally showed parallism errors.
#profiler.activate("statement");
#profiler.setFilter("*","*");
#profiler.openStream("console");
#profiler.start();

function octopus.bind(v:int):bat[:oid,:int];
	b:= bat.new(:oid,:int);
	bat.append(b,v);
	return b;
end bind;

function octopus.bind(conn:str,v:int):bat[:oid,:int];
	vh:= remote.put(conn,v);
	b:= remote.put(conn,nil:bat[:oid,:int]);
	b:= remote.exec(conn,"octopus","bind",vh);
	bv:bat[:oid,:int]:= remote.get(conn,b);
	return bv;
end bind;

function octopus.tentacle(v:int, uri:str):bat[:oid,:int];
	conn:str := remote.connect(uri, "monetdb", "monetdb", "msql");
	b:= octopus.bind(conn,v);
catch RMTexception:str;
	io.print(RMTexception);
exit RMTexception;
	remote.disconnect(conn);
	return tentacle:=b;
end tentacle;

function octopus.exec(uri:str, query:str, version:int):bat[:oid,:int];
	conn:str := remote.connect(uri, "monetdb", "monetdb", "msql");
	m:= remote.put(conn,version);
	v:= remote.put(conn,nil:bat[:oid,:int]);
	u:= remote.put(conn,uri);
	# this works with uri, because head and tentacle are the same */
	v:= remote.exec(conn,"octopus", query, m, u);
	res:bat[:oid,:int]:= remote.get(conn,v);
	remote.disconnect(conn);
	return exec:=res;
end exec;

uri := sabaoth.getLocalConnectionURI();

barrier (k,v):= language.newRange(0:int);
	io.print(v);
barrier go:= language.dataflow();
	v1:bat[:oid,:int] :=octopus.exec(uri, "tentacle", v);
	v2:bat[:oid,:int] :=octopus.exec(uri, "tentacle", v);
	v3:bat[:oid,:int] :=octopus.exec(uri, "tentacle", v);
	v4:bat[:oid,:int] :=octopus.exec(uri, "tentacle", v);
	res:= mat.pack(v1,v2,v3,v4);
exit go;
	redo (k,v) := language.nextElement(1:int,25:int);
exit (k,v);
z:=clients.getUsers();
io.print(z);
