# let connect figure out itself how to connect to the running db
uri := sabaoth.getLocalConnectionURI();
conn:str := remote.connect(uri, "monetdb", "monetdb");

# this is invalid, as io.print is an invalid module, and bla will be
# taken as function
res:str := remote.put(conn,:void);
res := remote.exec(conn, "io.print", "bla");
catch SyntaxException:str;
	io.print("Received first error from the remote site");
	io.printf("!%s\n", SyntaxException);
exit SyntaxException;

# now do it with a function that returns something (a BAT in this case)
bn:= bat.new(:oid,:str);
b := remote.put(conn,bn);
catch MALException:str;
	io.print("Received second init error from the remote site");
	io.printf("!%s\n", MALException);
exit MALException;
io.print(b);
b := remote.exec(conn, "inspect", "getAtomNames");
catch MALException:str;
	io.print("Received second error from the remote site");
	io.printf("!%s\n", MALException);
exit MALException;
io.print(b);

c:bat[:oid,:str] := remote.get(conn, b);
io.print(c);
catch MALException:str;
	io.print("Received third error from the remote site");
	io.printf("!%s\n", MALException);
exit MALException;

# io.print only outputs things, but returns nothing
ah:str := remote.put(conn,:void);
io.print(ah);
ah:str := remote.exec(conn, "io", "print", b);
catch MALException:str;
	io.print("Received fourth error from the remote site");
	io.printf("!%s\n", MALException);
exit MALException;

d:void := remote.get(conn, ah);
io.print(d);
catch MALException:str;
	io.print("Received fifth error from the remote site");
	io.printf("!%s\n", MALException);
exit MALException;

# help testweb a bit, since currently no cleanup is done on server
# shutdown
remote.disconnect(conn);
