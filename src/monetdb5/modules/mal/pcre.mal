# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2013 MonetDB B.V.
# All Rights Reserved.

atom pcre:ptr;
command tostr()   address pcre_tostr;
command fromstr() address pcre_fromstr;
command nequal()  address pcre_nequal;
command hash()    address pcre_hash;
command null()    address pcre_null;
command put()     address pcre_put;
command del()     address pcre_del;
command length()  address pcre_length;
command heap()    address pcre_heap;

command compile(pat:str):pcre
address PCREcompile_wrap
comment "compile a pattern";

command match(pat:pcre, s:str) :bit
address PCREexec_wrap
comment "match a pattern";

command index(pat:pcre, s:str) :int
address PCREindex
comment "match a pattern, return matched position (or 0 when not found)";

command select(pat:str, strs:bat[:oid,:str]):bat[:oid,:str]
address PCREselectDef
comment "Select tuples based on the pattern";

command uselect(pat:str, strs:bat[:oid,:str]):bat[:oid,:oid]
address PCREuselectDef
comment "Select tuples based on the pattern, only returning the head";

command like_uselect(s:bat[:oid,:str], pat:str, esc:str):bat[:oid,:oid]
address PCRElike_uselect_pcre;

command like_filter(s:bat[:oid,:str], pat:str, esc:str):bat[:oid,:oid]
address PCRElike_uselect_pcre;

command likesubselect(s:bat[:oid,:str], pat:bat[:oid,:str], esc:str) (l:bat[:oid,:oid],r:bat[:oid,:oid])
address PCRElike_join_pcre;

command ilike_uselect(s:bat[:oid,:str], pat:str, esc:str):bat[:oid,:oid]
address PCREilike_uselect_pcre;

command ilike_filter(s:bat[:oid,:str], pat:str, esc:str):bat[:oid,:oid]
address PCREilike_uselect_pcre;

command ilikesubselect(s:bat[:oid,:str], pat:bat[:oid,:str], esc:str) (l:bat[:oid,:oid],r:bat[:oid,:oid])
address PCREilike_join_pcre;

command like_select(s:bat[:oid,:str], pat:str, esc:str):bat[:oid,:str]
address PCRElike_select_pcre;

command ilike_select(s:bat[:oid,:str], pat:str, esc:str):bat[:oid,:str]
address PCREilike_select_pcre;

function ilike_filter(s:bat[:oid,:str], pat:str) :bat[:oid,:str];
	return ilike_select(s, pat, "");
end ilike_filter;

command match(s:str, pat:str):bit
address PCREmatch
comment "Perl Compatible Regular Expression pattern matching against a string";

command imatch(s:str, pat:str):bit
address PCREimatch
comment "Caseless Perl Compatible Regular Expression pattern matching against a string";

command patindex(pat:str, s:str) :int
address PCREpatindex
comment "Location of the first POSIX pattern matching against a string";

command replace(origin:str,pat:str,repl:str,flags:str):str
address PCREreplace_wrap
comment "Replace _all_ matches of \"pattern\" in \"origin_str\" with \"replacement\".
	 Parameter \"flags\" accept these flags: 'i', 'm', 's', and 'x'.
	   'e': if present, an empty string is considered to be a valid match
	   'i': if present, the match operates in case-insensitive mode.
		Otherwise, in case-sensitive mode.
	   'm': if present, the match operates in multi-line mode.
	   's': if present, the match operates in \"dot-all\"
	   The specifications of the flags can be found in \"man pcreapi\"
	   The flag letters may be repeated.
	   No other letters than 'e', 'i', 'm', 's' and 'x' are allowed in \"flags\".
	   Returns the replaced string, or if no matches found, the original string.";

command replace(orig:bat[:oid,:str],pat:str,repl:str,flag:str):bat[:oid,:str]
address PCREreplace_bat_wrap;

command pcre_quote(s:str):str
address PCREquote
comment "Return a PCRE pattern string that matches the argument exactly.";

command sql2pcre(pat:str,esc:str):str
address PCREsql2pcre
comment "Convert a SQL like pattern with the given escape character into a PCRE pattern.";

pattern prelude() :void
address pcre_init
comment "Initialize pcre";

pcre.prelude();

module str;
command like(s:str, pat:str, esc:str):bit
address PCRElike3;

command like(s:str, pat:str):bit
address PCRElike2;

command not_like(s:str, pat:str, esc:str):bit
address PCREnotlike3;

command not_like(s:str, pat:str):bit
address PCREnotlike2;

command batstr.like(s:bat[:oid,:str], pat:str, esc:str):bat[:oid,:bit]
address BATPCRElike;

command batstr.like(s:bat[:oid,:str], pat:str):bat[:oid,:bit]
address BATPCRElike2;

command batstr.not_like(s:bat[:oid,:str], pat:str, esc:str):bat[:oid,:bit]
address BATPCREnotlike;

command batstr.not_like(s:bat[:oid,:str], pat:str):bat[:oid,:bit]
address BATPCREnotlike2;

command ilike(s:str, pat:str, esc:str):bit
address PCREilike3;

command ilike(s:str, pat:str):bit
address PCREilike2;

command not_ilike(s:str, pat:str, esc:str):bit
address PCREnotilike3;

command not_ilike(s:str, pat:str):bit
address PCREnotilike2;

command batstr.ilike(s:bat[:oid,:str], pat:str, esc:str):bat[:oid,:bit]
address BATPCREilike;

command batstr.ilike(s:bat[:oid,:str], pat:str):bat[:oid,:bit]
address BATPCREilike2;

command batstr.not_ilike(s:bat[:oid,:str], pat:str, esc:str):bat[:oid,:bit]
address BATPCREnotilike;

command batstr.not_ilike(s:bat[:oid,:str], pat:str):bat[:oid,:bit]
address BATPCREnotilike2;

module algebra;
command algebra.likesubselect(b:bat[:oid,:str], pat:str, esc:str, caseignore:bit, anti:bit) :bat[:oid,:oid]
address PCRElikesubselect1
comment "Select all head values for which the tail value is \"like\"
	the given (SQL-style) pattern.
	Input is a dense-headed BAT, output is a dense-headed BAT with in
	the tail the head value of the input BAT for which the
	relationship holds.  The output BAT is sorted on the tail value.";

command algebra.likesubselect(b:bat[:oid,:str], s:bat[:oid,:oid], pat:str, esc:str, caseignore:bit, anti:bit) :bat[:oid,:oid]
address PCRElikesubselect2
comment "Select all head values of the first input BAT for which the
	tail value is \"like\" the given (SQL-style) pattern and for
	which the head value occurs in the tail of the second input
	BAT.
	Input is a dense-headed BAT, output is a dense-headed BAT with in
	the tail the head value of the input BAT for which the
	relationship holds.  The output BAT is sorted on the tail value.";

command algebra.likesubselect(b:bat[:oid,:str], pat:str, esc:str, anti:bit) :bat[:oid,:oid]
address PCRElikesubselect3
comment "Select all head values of the first input BAT for which the
	tail value is \"like\" the given (SQL-style) pattern and for
	which the head value occurs in the tail of the second input
	BAT.
	Input is a dense-headed BAT, output is a dense-headed BAT with in
	the tail the head value of the input BAT for which the
	relationship holds.  The output BAT is sorted on the tail value.";

#function likesubselect(b:bat[:oid,:str], pat:str, esc:str, anti:bit) :bat[:oid,:oid];
	#return likesubselect(b, pat, esc, false, anti);
#end likesubselect;

function ilikesubselect(b:bat[:oid,:str], pat:str, esc:str, anti:bit) :bat[:oid,:oid];
	return likesubselect(b, pat, esc, true, anti);
end ilikesubselect;

function likesubselect(b:bat[:oid,:str], cand:bat[:oid,:oid], pat:str, esc:str, anti:bit) :bat[:oid,:oid];
	return likesubselect(b, cand, pat, esc, false, anti);
end likesubselect;

function ilikesubselect(b:bat[:oid,:str], cand:bat[:oid,:oid], pat:str, esc:str, anti:bit) :bat[:oid,:oid];
	return likesubselect(b, cand, pat, esc, true, anti);
end ilikesubselect;

command likesubselect(s:bat[:oid,:str], pat:bat[:oid,:str], esc:str) (l:bat[:oid,:oid],r:bat[:oid,:oid])
address PCRElike_join_pcre;

command ilikesubselect(s:bat[:oid,:str], pat:bat[:oid,:str], esc:str) (l:bat[:oid,:oid],r:bat[:oid,:oid])
address PCREilike_join_pcre;
