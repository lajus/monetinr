# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2013 MonetDB B.V.
# All Rights Reserved.

module txtsim;

command levenshtein(s:str, t:str, insdel_cost:int, replace_cost:int, transpose_cost:int) : int
address levenshtein_impl
comment "Calculates Levenshtein distance (edit distance) between two strings, variable operation costs (ins/del, replacement, transposition)";

command levenshtein(s:str, t:str) : int
address levenshteinbasic_impl
comment "Calculates Levenshtein distance (edit distance) between two strings";

command editdistance(s:str, t:str) : int
address levenshteinbasic_impl
comment "Alias for Levenshtein(str,str)";

command editdistance2(s:str, t:str) : int
address levenshteinbasic2_impl
comment "Calculates Levenshtein distance (edit distance) between two strings. Cost of transposition is 1 instead of 2";

command similarity(string1:str, string2:str, minimum:dbl) : dbl
address fstrcmp_impl
comment "Normalized edit distance between two strings";

command similarity(string1:str, string2:str) : dbl
address fstrcmp0_impl
comment "Normalized edit distance between two strings";

command soundex(name:str) : str
address soundex_impl
comment "Soundex function for phonetic matching";

command stringdiff(s1:str, s2:str) :int
address stringdiff_impl
comment "calculate the soundexed editdistance";

command qgramnormalize(input:str): str
address CMDqgramnormalize
comment "'Normalizes' strings (eg. toUpper and replaces non-alphanumerics with one space";

command qgramselfjoin(qgram:bat[:oid, :oid], id:bat[:oid, :oid], pos:bat[:oid, :int], len:bat[:oid, :int], c:flt, k:int) (:bat[:oid,:int],:bat[:oid, :int])
address CMDqgramselfjoin
comment "QGram self-join on ordered(!) qgram tables and sub-ordered q-gram positions";

command txtsim.str2qgrams(s:str):bat[:oid,:str]
address CMDstr2qgrams
comment "Break the string into 4-grams";
