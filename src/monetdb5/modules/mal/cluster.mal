module cluster;

command key(b:bat[:oid,:any_1]) :bat[:oid,:oid]
address CLUSTER_key
comment "Create the hash key list";

command map(b:bat[:oid,:oid]) :bat[:oid,:oid]
address CLUSTER_map
comment "Recluster a hash key table and produce a re-allocation map";

pattern column(m:bat[:oid,:oid], b:bat[:oid,:any_1]):bat[:oid,:any_1]
address CLUSTER_column
comment "Reorder tail of the BAT using the cluster map";

pattern table(b:bat[:oid,:any]...):bat[:oid,:oid]
address CLUSTER_table
comment "Cluster the BATs using the first one as reference.
Return the oid map used";

command new(b:bat[:oid,:bte], bits:int, offset:int) 
	(psum:bat[:oid,:wrd], map:bat[:oid,:wrd])
address CLS_create_bte
comment "Compute the cluster map for bat b of hash key values. A cluster map is a list of unique (new) BUN positions. The p(refix) sum is a by product which returns the prefix sum of the per masked key frequency.";

command new(b:bat[:oid,:bte], bits:int, offset:int, order:bit) (psum:bat[:oid,:wrd], map:bat[:oid,:bte])
address CLS_create2_bte
comment "Compute the cluster map for bat b. A cluster map is a list of partition ids. The p(refix) sum is a by product which returns the prefix sum of the per partition frequency. Prefix sum and map can be use to 'cluster' related columns based on b. Incase the offset is non negative it is used to shift the key values. Offset together with the mask bits should make sure that the result of the partitioning can be used in a order by sequence. If this holds and the input is sorted we return a 'compressed' representation of the map, ie [:oid,:bte], the repeated values are not inserted. The order flag indicates that the clustering is used for ordering, ie partition keys aren't fixed so we can internaly optimize partition sizes.";


command new(b:bat[:oid,:sht], bits:int, offset:int) (psum:bat[:oid,:wrd], map:bat[:oid,:wrd])
address CLS_create_sht;

command new(b:bat[:oid,:sht], bits:int, offset:int, order:bit) (psum:bat[:oid,:wrd], map:bat[:oid,:bte])
address CLS_create2_sht;

command new(b:bat[:oid,:int], bits:int, offset:int) (psum:bat[:oid,:wrd], map:bat[:oid,:wrd])
address CLS_create_int;

command new(b:bat[:oid,:int], bits:int, offset:int, order:bit) (psum:bat[:oid,:wrd], map:bat[:oid,:bte])
address CLS_create2_int;

command new(b:bat[:oid,:wrd], bits:int, offset:int) (psum:bat[:oid,:wrd], map:bat[:oid,:wrd])
address CLS_create_wrd;

command new(b:bat[:oid,:wrd], bits:int, offset:int, order:bit) (psum:bat[:oid,:wrd], map:bat[:oid,:bte])
address CLS_create2_wrd;

command new(b:bat[:oid,:lng], bits:int, offset:int) (psum:bat[:oid,:wrd], map:bat[:oid,:wrd])
address CLS_create_lng;

command new(b:bat[:oid,:lng], bits:int, offset:int, order:bit) (psum:bat[:oid,:wrd], map:bat[:oid,:bte])
address CLS_create2_lng;

command new(b:bat[:oid,:flt], bits:int, offset:int) (psum:bat[:oid,:wrd], map:bat[:oid,:wrd])
address CLS_create_flt;

command new(b:bat[:oid,:flt], bits:int, offset:int, order:bit) (psum:bat[:oid,:wrd], map:bat[:oid,:bte])
address CLS_create2_flt;

command new(b:bat[:oid,:dbl], bits:int, offset:int) (psum:bat[:oid,:wrd], map:bat[:oid,:wrd])
address CLS_create_dbl;

command new(b:bat[:oid,:dbl], bits:int, offset:int, order:bit) (psum:bat[:oid,:wrd], map:bat[:oid,:bte])
address CLS_create2_dbl;


command map(cluster:bat[:oid,:wrd], b:bat[:oid,:any_1]) :bat[:oid,:any_1]
address CLS_map
comment "Reorder tail of bat b, using a cluster map";

command map(psum:bat[:oid,:wrd], cluster:bat[:oid,:bte], b:bat[:oid,:any_1]) :bat[:oid,:any_1]
address CLS_map2
comment "Reorder tail of bat b, using a cluster prefix sum and map. In case the
map is sorted with a non dense head we assume no remapping is needed";

pattern split(clustered:bat[:oid,:any_1], psum:bat[:oid,:wrd]) :bat[:oid,:any_1]...
address CLS_split
comment "split the clustered bat into parts";

