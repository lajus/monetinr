module bbp;

command open():void		
address CMDbbpopen
comment "Locate the bbp box and open it.";
command close():void		
address CMDbbpclose
comment "Close the bbp box.";
command destroy():void		
address CMDbbpdestroy
comment "Destroy the box";
pattern take(name:str) :bat[:oid,:any_2] 
address CMDbbptake
comment "Load a particular bat.";
pattern deposit(name:str,v:bat[:oid,:any_2]) :void 			
address CMDbbpdeposit
comment "Enter a new bat into the bbp box.";
pattern deposit(name:str,loc:str) :bat[:oid,:any_2]
address CMDbbpbindDefinition
comment "Relate a logical name to a physical BAT in the buffer pool.";
command commit(b:bat[:oid,:any_2]):void 	
address CMDbbpSubCommit
comment "Commit updates for single BAT.";
pattern commit():void 	
address CMDbbpReleaseAll
comment "Commit updates for this client.";
pattern releaseAll():void 	
address CMDbbpReleaseAll
comment "Commit updates for this client.";
pattern release(name:str,val:bat[:oid,:any_2]) :void 			
address CMDbbprelease
comment "Commit updates and release this BAT.";
pattern release(b:bat[:oid,:any_2]):void
address CMDbbpreleaseBAT
comment "Remove the BAT from further consideration";
pattern destroy(b:bat[:oid,:any_2]):void
address CMDbbpdestroyBAT1
comment "Schedule a BAT for removal at session end.";
pattern destroy(b:bat[:oid,:any_2],immediate:bit)
address CMDbbpdestroyBAT
comment "Schedule a BAT for removal at session end or immediately.";
pattern toString(name:str):str 	
address CMDbbptoStr
comment "Get the string representation of an element in the box.";
pattern discard(name:str):void 
address CMDbbpdiscard
comment "Remove the BAT from the box.";

pattern iterator(nme:str):lng 	
address CMDbbpiterator
comment "Locate the next element in the box.";

pattern prelude():void 
address CMDbbpprelude
comment "Initialize the bbp box.";

pattern bind(name:str):bat[:oid,:any_2]
address CMDbbpbind
comment "Locate the BAT using its logical name";

pattern bind(head:str,tail:str):bat[:oid,:any_2]
address CMDbbpbind2
comment "Locate the BAT using the head and tail names in the BAT buffer pool");

pattern bind(idx:int):bat[:oid,:any_2] 
address CMDbbpbindindex
comment "Locate the BAT using its BBP index in the BAT buffer pool";

command compress(b:bat[:oid,:any_2],fnme:str):bat[:oid,:any_2]
address CMDbbpcompress
comment "Generate a compressed image of the BAT on a specific file";

command decompress(b:bat[:oid,:any_2],fnme:str):bat[:oid,:any_2] 
address CMDbbpdecompress
comment "Obtain a temporary decompressed image of a BAT from a specific file";

command truncate(b:bat[:oid,:any_2],fnme:str):bat[:oid,:any_2]
address CMDbbptruncate
comment "Truncate the heaps if a compressed image exist";

command expand(b:bat[:oid,:any_2],fnme:str):bat[:oid,:any_2]
address CMDbbpexpand
comment "Expand a compressed image of BAT heaps";

pattern getObjects():bat[:oid,:str] 
address CMDbbpGetObjects
	comment "View of the box content.";

# @+ BAT buffer pool
# The following list of operations permits inspection of the
# buffer pool
command getIndex(b:bat[:oid,:any_2]):int
address CMDbbpgetIndex
comment "Retrieve the index in the BBP";
command getType() :bat[:oid,:str]		
address CMDbbpType
comment "Map a BAT into its tail type";
command getNames() :bat[:oid,:str] 	
address CMDbbpNames
comment "Map BAT into its bbp name";
command getRNames() :bat[:oid,:str] 	
address CMDbbpRNames
comment "Map a BAT into its bbp physical name";

command get() (ns:bat[:any_1,:any_2], ht:bat[:int,:str], tt:bat[:int,:str],
	     cnt:bat[:int,:lng], refcnt:bat[:int,:int], lrefcnt:bat[:int,:int],
	     location:bat[:int,:str], heat:bat[:int,:int], dirty:bat[:int,:str], 
	     status:bat[:int,:str], kind:bat[:int,:str]) 
address CMDbbp
comment "bpp";

command getName( b:bat[:oid,:any_2]):str
address CMDbbpName
comment "Map a BAT into its internal name";
command getCount() :bat[:oid,:lng] 	
address CMDbbpCount
comment "Create a BAT with the cardinalities of all known BATs";
command getRefCount() :bat[:oid,:int] 	
address CMDbbpRefCount
comment "Create a BAT with the (hard) reference counts";
command getLRefCount() :bat[:oid,:int] 	
address CMDbbpLRefCount
comment "Create a BAT with the logical reference counts";
command getLocation() :bat[:oid,:str] 	
address CMDbbpLocation
comment "Create a BAT with their disk locations";
command getHeat() :bat[:oid,:int] 	
address CMDbbpHeat
comment "Create a BAT with the heat values";
command getDirty() :bat[:oid,:str] 	
address CMDbbpDirty
comment "Create a BAT with the dirty/ diffs/clean status";
command getStatus() :bat[:oid,:str] 	
address CMDbbpStatus
comment "Create a BAT with the disk/load status";
command getKind():bat[:oid,:str] 
address CMDbbpKind
comment "Create a BAT with the persistency status";
command getRefCount(b:bat[:oid,:any_2]) :int
address CMDgetBATrefcnt
comment "Utility for debugging MAL interpreter";
command getLRefCount(b:bat[:oid,:any_2]) :int
address CMDgetBATlrefcnt
comment "Utility for debugging MAL interpreter";
command getDiskSpace() :lng
address CMDbbpDiskSpace
comment "Estimate the amount of disk space occupied by dbpath";
command getPageSize():int
address CMDgetPageSize
comment "Obtain the memory page size";
