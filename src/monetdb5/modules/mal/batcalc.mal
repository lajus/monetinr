# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2013 MonetDB B.V.
# All Rights Reserved.

# This file was generated by using the script batcalc.mal.sh.

module batcalc;

pattern iszero(b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat";
pattern iszero(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat with candidates list";

pattern iszero(b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat";
pattern iszero(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat with candidates list";

pattern iszero(b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat";
pattern iszero(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat with candidates list";

pattern iszero(b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat";
pattern iszero(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat with candidates list";

pattern iszero(b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat";
pattern iszero(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat with candidates list";

pattern iszero(b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat";
pattern iszero(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat with candidates list";

pattern iszero(b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat";
pattern iszero(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISZERO
comment "Unary check for zero over the tail of the bat with candidates list";


pattern isnil(b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
pattern isnil(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat with candidates list";

pattern isnil(b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
pattern isnil(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat with candidates list";

pattern isnil(b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
pattern isnil(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat with candidates list";

pattern isnil(b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
pattern isnil(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat with candidates list";

pattern isnil(b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
pattern isnil(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat with candidates list";

pattern isnil(b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
pattern isnil(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat with candidates list";

pattern isnil(b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
pattern isnil(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat with candidates list";

pattern isnil(b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
pattern isnil(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat with candidates list";

pattern isnil(b:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
pattern isnil(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat with candidates list";

pattern isnil(b:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
pattern isnil(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat with candidates list";


pattern not(b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatNOT
comment "Return the Boolean inverse";
pattern not(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNOT
comment "Return the Boolean inverse with candidates list";

pattern not(b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatNOT
comment "Unary bitwise not over the tail of the bat";
pattern not(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatNOT
comment "Unary bitwise not over the tail of the bat with candidates list";

pattern not(b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatNOT
comment "Unary bitwise not over the tail of the bat";
pattern not(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatNOT
comment "Unary bitwise not over the tail of the bat with candidates list";

pattern not(b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatNOT
comment "Unary bitwise not over the tail of the bat";
pattern not(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatNOT
comment "Unary bitwise not over the tail of the bat with candidates list";

pattern not(b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatNOT
comment "Unary bitwise not over the tail of the bat";
pattern not(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatNOT
comment "Unary bitwise not over the tail of the bat with candidates list";

pattern not(b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatNOT
comment "Unary bitwise not over the tail of the bat";
pattern not(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatNOT
comment "Unary bitwise not over the tail of the bat with candidates list";


pattern sign(b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat";
pattern sign(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat with candidates list";

pattern sign(b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat";
pattern sign(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat with candidates list";

pattern sign(b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat";
pattern sign(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat with candidates list";

pattern sign(b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat";
pattern sign(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat with candidates list";

pattern sign(b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat";
pattern sign(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat with candidates list";

pattern sign(b:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat";
pattern sign(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat with candidates list";

pattern sign(b:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat";
pattern sign(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSIGN
comment "Unary sign (-1,0,1) over the tail of the bat with candidates list";


pattern abs(b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatABS
comment "Unary abs over the tail of the bat";
pattern abs(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatABS
comment "Unary abs over the tail of the bat with candidates list";

pattern abs(b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatABS
comment "Unary abs over the tail of the bat";
pattern abs(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatABS
comment "Unary abs over the tail of the bat with candidates list";

pattern abs(b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatABS
comment "Unary abs over the tail of the bat";
pattern abs(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatABS
comment "Unary abs over the tail of the bat with candidates list";

pattern abs(b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatABS
comment "Unary abs over the tail of the bat";
pattern abs(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatABS
comment "Unary abs over the tail of the bat with candidates list";

pattern abs(b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatABS
comment "Unary abs over the tail of the bat";
pattern abs(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatABS
comment "Unary abs over the tail of the bat with candidates list";

pattern abs(b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatABS
comment "Unary abs over the tail of the bat";
pattern abs(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatABS
comment "Unary abs over the tail of the bat with candidates list";

pattern abs(b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatABS
comment "Unary abs over the tail of the bat";
pattern abs(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatABS
comment "Unary abs over the tail of the bat with candidates list";


pattern -(b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatNEG
comment "Unary neg over the tail of the bat";
pattern -(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatNEG
comment "Unary neg over the tail of the bat with candidates list";

pattern -(b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatNEG
comment "Unary neg over the tail of the bat";
pattern -(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatNEG
comment "Unary neg over the tail of the bat with candidates list";

pattern -(b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatNEG
comment "Unary neg over the tail of the bat";
pattern -(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatNEG
comment "Unary neg over the tail of the bat with candidates list";

pattern -(b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatNEG
comment "Unary neg over the tail of the bat";
pattern -(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatNEG
comment "Unary neg over the tail of the bat with candidates list";

pattern -(b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatNEG
comment "Unary neg over the tail of the bat";
pattern -(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatNEG
comment "Unary neg over the tail of the bat with candidates list";

pattern -(b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatNEG
comment "Unary neg over the tail of the bat";
pattern -(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatNEG
comment "Unary neg over the tail of the bat with candidates list";

pattern -(b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatNEG
comment "Unary neg over the tail of the bat";
pattern -(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatNEG
comment "Unary neg over the tail of the bat with candidates list";


pattern ++(b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatINCR
comment "Unary increment over the tail of the bat";
pattern ++(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatINCR
comment "Unary increment over the tail of the bat with candidates list";

pattern ++(b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatINCR
comment "Unary increment over the tail of the bat";
pattern ++(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatINCR
comment "Unary increment over the tail of the bat with candidates list";

pattern ++(b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatINCR
comment "Unary increment over the tail of the bat";
pattern ++(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatINCR
comment "Unary increment over the tail of the bat with candidates list";

pattern ++(b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatINCR
comment "Unary increment over the tail of the bat";
pattern ++(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatINCR
comment "Unary increment over the tail of the bat with candidates list";

pattern ++(b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatINCR
comment "Unary increment over the tail of the bat";
pattern ++(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatINCR
comment "Unary increment over the tail of the bat with candidates list";

pattern ++(b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatINCR
comment "Unary increment over the tail of the bat";
pattern ++(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatINCR
comment "Unary increment over the tail of the bat with candidates list";

pattern ++(b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatINCR
comment "Unary increment over the tail of the bat";
pattern ++(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatINCR
comment "Unary increment over the tail of the bat with candidates list";


pattern --(b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatDECR
comment "Unary decrement over the tail of the bat";
pattern --(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDECR
comment "Unary decrement over the tail of the bat with candidates list";

pattern --(b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatDECR
comment "Unary decrement over the tail of the bat";
pattern --(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDECR
comment "Unary decrement over the tail of the bat with candidates list";

pattern --(b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatDECR
comment "Unary decrement over the tail of the bat";
pattern --(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDECR
comment "Unary decrement over the tail of the bat with candidates list";

pattern --(b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatDECR
comment "Unary decrement over the tail of the bat";
pattern --(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDECR
comment "Unary decrement over the tail of the bat with candidates list";

pattern --(b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatDECR
comment "Unary decrement over the tail of the bat";
pattern --(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDECR
comment "Unary decrement over the tail of the bat with candidates list";

pattern --(b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDECR
comment "Unary decrement over the tail of the bat";
pattern --(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDECR
comment "Unary decrement over the tail of the bat with candidates list";

pattern --(b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDECR
comment "Unary decrement over the tail of the bat";
pattern --(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDECR
comment "Unary decrement over the tail of the bat with candidates list";


pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:bte],v:bte) :bat[:oid,:sht]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:bte,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:bte],v:sht) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:bte,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:bte],v:int) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:bte,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:bte],v:flt) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:bte,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:sht],v:bte) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:sht,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:sht],v:sht) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:sht,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:sht],v:int) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:sht,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:sht],v:flt) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:sht,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:int],v:bte) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:int,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:int],v:sht) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:int,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:int],v:int) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:int,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:int],v:flt) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:int,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:lng],v:flt) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:lng,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:flt],v:bte) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:flt,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:flt],v:sht) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:flt,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:flt],v:int) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:flt,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:flt],v:lng) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:flt,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2, guarantee no overflow by returning larger type";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B1 + B2 with candidates list, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:flt],v:flt) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V, guarantee no overflow by returning larger type";
pattern +(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return B + V with candidates list, guarantee no overflow by returning larger type";
pattern +(v:flt,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B, guarantee no overflow by returning larger type";
pattern +(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDenlarge
comment "Return V + B with candidates list, guarantee no overflow by returning larger type";


pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:bte],v:bte) :bat[:oid,:sht]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:bte,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:bte],v:sht) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:bte,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:bte],v:int) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:bte,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:bte],v:flt) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:bte,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:sht],v:bte) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:sht,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:sht],v:sht) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:sht,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:sht],v:int) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:sht,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:sht],v:flt) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:sht,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:int],v:bte) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:int,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:int],v:sht) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:int,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:int],v:int) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:int,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:int],v:flt) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:int,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:lng],v:flt) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:lng,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:flt],v:bte) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:flt,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:flt],v:sht) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:flt,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:flt],v:int) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:flt,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:flt],v:lng) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:flt,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2, guarantee no overflow by returning larger type";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B1 - B2 with candidates list, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:flt],v:flt) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V, guarantee no overflow by returning larger type";
pattern -(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return B - V with candidates list, guarantee no overflow by returning larger type";
pattern -(v:flt,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B, guarantee no overflow by returning larger type";
pattern -(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBenlarge
comment "Return V - B with candidates list, guarantee no overflow by returning larger type";


pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:bte],v:bte) :bat[:oid,:sht]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:bte,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:bte],v:sht) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:bte,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:bte],v:int) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:bte,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:bte],v:flt) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:bte,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:sht],v:bte) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:sht,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:sht],v:sht) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:sht,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:sht],v:int) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:sht,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:sht],v:flt) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:sht,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:int],v:bte) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:int,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:int],v:sht) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:int,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:int],v:int) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:int,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:int],v:flt) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:int,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:lng],v:flt) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:lng,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:flt],v:bte) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:flt,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:flt],v:sht) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:flt,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:flt],v:int) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:flt,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:flt],v:lng) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:flt,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2, guarantee no overflow by returning larger type";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B1 * B2 with candidates list, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:flt],v:flt) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V, guarantee no overflow by returning larger type";
pattern *(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return B * V with candidates list, guarantee no overflow by returning larger type";
pattern *(v:flt,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B, guarantee no overflow by returning larger type";
pattern *(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULenlarge
comment "Return V * B with candidates list, guarantee no overflow by returning larger type";


pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:bte],v:sht) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:bte],v:sht) :bat[:oid,:sht]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:bte,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:bte,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:bte],v:int) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:bte],v:int) :bat[:oid,:int]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:bte,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:bte,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:bte],v:wrd) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:bte],v:wrd) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:bte],v:lng) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:bte],v:lng) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:bte,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:bte,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:bte],v:flt) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:bte],v:flt) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:bte,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:bte,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:bte],v:dbl) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:bte],v:dbl) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:sht],v:int) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:sht],v:int) :bat[:oid,:int]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:sht,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:sht,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:sht],v:wrd) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:sht],v:wrd) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:sht],v:lng) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:sht],v:lng) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:sht,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:sht,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:sht],v:flt) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:sht],v:flt) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:sht,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:sht,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:sht],v:dbl) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:sht],v:dbl) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:int],v:wrd) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:int],v:wrd) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:int,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:int,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:int],v:lng) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:int],v:lng) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:int,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:int,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:int],v:flt) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:int],v:flt) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:int,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:int,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:int],v:dbl) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:int],v:dbl) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:int,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:int,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:wrd],v:lng) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:wrd],v:lng) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:wrd],v:flt) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:wrd],v:flt) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:lng],v:flt) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:lng],v:flt) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:lng,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:lng,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:lng],v:dbl) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:lng],v:dbl) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:flt],v:bte) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:flt],v:bte) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:flt,b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:flt,b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:flt],v:sht) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:flt],v:sht) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:flt,b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:flt,b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:flt],v:int) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:flt],v:int) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:flt,b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:flt,b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:flt],v:wrd) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:flt],v:wrd) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:flt],v:lng) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:flt],v:lng) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:flt,b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:flt,b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:flt],v:flt) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:flt],v:flt) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:flt,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:flt,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:flt],v:dbl) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:flt],v:dbl) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:dbl],v:bte) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:dbl],v:bte) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:dbl],v:sht) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:dbl],v:sht) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:dbl],v:int) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:dbl],v:int) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:dbl,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:dbl,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:dbl],v:lng) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:dbl],v:lng) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:dbl],v:flt) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:dbl],v:flt) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";

pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2, signal error on overflow";
pattern +(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B1 + B2 with candidates list, signal error on overflow";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2, overflow causes NIL value";
pattern add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B1 + B2 with candidates list, overflow causes NIL value";
pattern +(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V, signal error on overflow";
pattern +(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return B + V with candidates list, signal error on overflow";
pattern add_noerror(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V, overflow causes NIL value";
pattern add_noerror(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return B + V with candidates list, overflow causes NIL value";
pattern +(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B, signal error on overflow";
pattern +(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADDsignal
comment "Return V + B with candidates list, signal error on overflow";
pattern add_noerror(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B, overflow causes NIL value";
pattern add_noerror(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatADD
comment "Return V + B with candidates list, overflow causes NIL value";


pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:bte],v:sht) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:bte],v:sht) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:bte,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:bte,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:bte],v:int) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:bte],v:int) :bat[:oid,:int]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:bte,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:bte,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:bte],v:wrd) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:bte],v:wrd) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:bte],v:lng) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:bte],v:lng) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:bte,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:bte,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:bte],v:flt) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:bte],v:flt) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:bte,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:bte,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:bte],v:dbl) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:bte],v:dbl) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:sht],v:int) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:sht],v:int) :bat[:oid,:int]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:sht,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:sht,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:sht],v:wrd) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:sht],v:wrd) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:sht],v:lng) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:sht],v:lng) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:sht,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:sht,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:sht],v:flt) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:sht],v:flt) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:sht,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:sht,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:sht],v:dbl) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:sht],v:dbl) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:int],v:wrd) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:int],v:wrd) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:int,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:int,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:int],v:lng) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:int],v:lng) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:int,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:int,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:int],v:flt) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:int],v:flt) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:int,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:int,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:int],v:dbl) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:int],v:dbl) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:int,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:int,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:wrd],v:lng) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:wrd],v:lng) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:wrd],v:flt) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:wrd],v:flt) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:lng],v:flt) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:lng],v:flt) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:lng,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:lng,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:lng],v:dbl) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:lng],v:dbl) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:flt],v:bte) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:flt],v:bte) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:flt,b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:flt,b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:flt],v:sht) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:flt],v:sht) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:flt,b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:flt,b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:flt],v:int) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:flt],v:int) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:flt,b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:flt,b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:flt],v:wrd) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:flt],v:wrd) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:flt],v:lng) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:flt],v:lng) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:flt,b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:flt,b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:flt],v:flt) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:flt],v:flt) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:flt,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:flt,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:flt],v:dbl) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:flt],v:dbl) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:dbl],v:bte) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:dbl],v:bte) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:dbl],v:sht) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:dbl],v:sht) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:dbl],v:int) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:dbl],v:int) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:dbl,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:dbl,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:dbl],v:lng) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:dbl],v:lng) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:dbl],v:flt) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:dbl],v:flt) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";

pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2, signal error on overflow";
pattern -(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B1 - B2 with candidates list, signal error on overflow";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2, overflow causes NIL value";
pattern sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B1 - B2 with candidates list, overflow causes NIL value";
pattern -(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V, signal error on overflow";
pattern -(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return B - V with candidates list, signal error on overflow";
pattern sub_noerror(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V, overflow causes NIL value";
pattern sub_noerror(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return B - V with candidates list, overflow causes NIL value";
pattern -(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B, signal error on overflow";
pattern -(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUBsignal
comment "Return V - B with candidates list, signal error on overflow";
pattern sub_noerror(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B, overflow causes NIL value";
pattern sub_noerror(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatSUB
comment "Return V - B with candidates list, overflow causes NIL value";


pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:bte],v:sht) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:bte],v:sht) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:bte,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:bte,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:bte],v:int) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:bte],v:int) :bat[:oid,:int]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:bte,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:bte,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:bte],v:wrd) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:bte],v:wrd) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:bte],v:lng) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:bte],v:lng) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:bte,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:bte,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:bte],v:flt) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:bte],v:flt) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:bte,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:bte,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:bte],v:dbl) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:bte],v:dbl) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:sht],v:int) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:sht],v:int) :bat[:oid,:int]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:sht,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:sht,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:sht],v:wrd) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:sht],v:wrd) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:sht],v:lng) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:sht],v:lng) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:sht,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:sht,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:sht],v:flt) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:sht],v:flt) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:sht,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:sht,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:sht],v:dbl) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:sht],v:dbl) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:int],v:wrd) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:int],v:wrd) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:int,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:int,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:int],v:lng) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:int],v:lng) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:int,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:int,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:int],v:flt) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:int],v:flt) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:int,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:int,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:int],v:dbl) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:int],v:dbl) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:int,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:int,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:wrd],v:lng) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:wrd],v:lng) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:wrd],v:flt) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:wrd],v:flt) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:lng],v:flt) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:lng],v:flt) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:lng,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:lng,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:lng],v:dbl) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:lng],v:dbl) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:flt],v:bte) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:flt],v:bte) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:flt,b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:flt,b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:flt],v:sht) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:flt],v:sht) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:flt,b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:flt,b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:flt],v:int) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:flt],v:int) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:flt,b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:flt,b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:flt],v:wrd) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:flt],v:wrd) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:flt],v:lng) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:flt],v:lng) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:flt,b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:flt,b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:flt],v:flt) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:flt],v:flt) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:flt,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:flt,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:flt],v:dbl) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:flt],v:dbl) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:dbl],v:bte) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:dbl],v:bte) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:dbl],v:sht) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:dbl],v:sht) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:dbl],v:int) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:dbl],v:int) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:dbl,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:dbl,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:dbl],v:lng) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:dbl],v:lng) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:dbl],v:flt) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:dbl],v:flt) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";

pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2, signal error on overflow";
pattern *(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B1 * B2 with candidates list, signal error on overflow";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2, overflow causes NIL value";
pattern mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B1 * B2 with candidates list, overflow causes NIL value";
pattern *(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V, signal error on overflow";
pattern *(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return B * V with candidates list, signal error on overflow";
pattern mul_noerror(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V, overflow causes NIL value";
pattern mul_noerror(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return B * V with candidates list, overflow causes NIL value";
pattern *(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B, signal error on overflow";
pattern *(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMULsignal
comment "Return V * B with candidates list, signal error on overflow";
pattern mul_noerror(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B, overflow causes NIL value";
pattern mul_noerror(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMUL
comment "Return V * B with candidates list, overflow causes NIL value";


pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:bte],v:sht) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:bte],v:sht) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:bte],v:int) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:bte],v:int) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:bte,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:bte,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:bte],v:lng) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:bte],v:lng) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:bte],v:flt) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:bte],v:flt) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:bte,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:bte,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:bte],v:dbl) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:bte],v:dbl) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:sht],v:int) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:sht],v:int) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:sht,b:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:sht,b:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:sht],v:wrd) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:sht],v:wrd) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:sht],v:lng) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:sht],v:lng) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:sht,b:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:sht,b:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:sht],v:flt) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:sht],v:flt) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:sht,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:sht,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:sht],v:dbl) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:sht],v:dbl) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:int],v:wrd) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:int],v:wrd) :bat[:oid,:int]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:int,b:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:int,b:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:int],v:lng) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:int],v:lng) :bat[:oid,:int]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:int,b:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:int,b:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:int],v:flt) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:int],v:flt) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:int,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:int,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:int],v:dbl) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:int],v:dbl) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:int,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:int,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:wrd],v:lng) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:wrd],v:lng) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:wrd],v:flt) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:wrd],v:flt) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:lng],v:flt) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:lng],v:flt) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:lng,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:lng,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:lng],v:dbl) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:lng],v:dbl) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:flt],v:bte) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:flt],v:bte) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:flt,b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:flt,b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:flt],v:sht) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:flt],v:sht) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:flt,b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:flt,b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:flt],v:int) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:flt],v:int) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:flt,b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:flt,b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:flt],v:wrd) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:flt],v:wrd) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:flt],v:lng) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:flt],v:lng) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:flt,b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:flt,b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:flt],v:flt) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:flt],v:flt) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:flt,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:flt,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:flt],v:dbl) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:flt],v:dbl) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:dbl],v:bte) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:dbl],v:bte) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:dbl],v:sht) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:dbl],v:sht) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:dbl],v:int) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:dbl],v:int) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:dbl,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:dbl,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:dbl],v:lng) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:dbl],v:lng) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:dbl],v:flt) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:dbl],v:flt) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";

pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2, signal error on overflow";
pattern /(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B1 / B2 with candidates list, signal error on overflow";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2, overflow causes NIL value";
pattern div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B1 / B2 with candidates list, overflow causes NIL value";
pattern /(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V, signal error on overflow";
pattern /(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return B / V with candidates list, signal error on overflow";
pattern div_noerror(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V, overflow causes NIL value";
pattern div_noerror(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return B / V with candidates list, overflow causes NIL value";
pattern /(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B, signal error on overflow";
pattern /(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIVsignal
comment "Return V / B with candidates list, signal error on overflow";
pattern div_noerror(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B, overflow causes NIL value";
pattern div_noerror(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatDIV
comment "Return V / B with candidates list, overflow causes NIL value";


pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:bte],v:sht) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:bte],v:sht) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:bte],v:int) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:bte],v:int) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:bte,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:bte,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:bte],v:lng) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:bte],v:lng) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:bte],v:flt) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:bte],v:flt) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:bte,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:bte,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:bte],v:dbl) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:bte],v:dbl) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:sht],v:bte) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:sht],v:bte) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:sht,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:sht,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:sht],v:int) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:sht],v:int) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:sht,b:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:sht,b:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:sht],v:wrd) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:sht],v:wrd) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:sht],v:lng) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:sht],v:lng) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:sht,b:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:sht,b:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:sht],v:flt) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:sht],v:flt) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:sht,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:sht,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:sht],v:dbl) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:sht],v:dbl) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:int],v:bte) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:int],v:bte) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:int,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:int,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:int],v:sht) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:int],v:sht) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:int,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:int,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:int],v:wrd) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:int],v:wrd) :bat[:oid,:int]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:int,b:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:int,b:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:int],v:lng) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:int],v:lng) :bat[:oid,:int]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:int,b:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:int,b:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:int],v:flt) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:int],v:flt) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:int,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:int,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:int],v:dbl) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:int],v:dbl) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:int,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:int,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:wrd],v:bte) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:wrd],v:bte) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:wrd],v:sht) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:wrd],v:sht) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:wrd],v:int) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:wrd],v:int) :bat[:oid,:int]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:wrd,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:wrd,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:wrd],v:lng) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:wrd],v:lng) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:wrd],v:flt) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:wrd],v:flt) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:lng],v:bte) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:lng],v:bte) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:lng,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:lng,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:lng],v:sht) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:lng],v:sht) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:lng,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:lng,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:lng],v:int) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:lng],v:int) :bat[:oid,:int]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:lng,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:lng,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:lng],v:wrd) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:lng],v:wrd) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:lng],v:flt) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:lng],v:flt) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:lng,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:lng,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:lng],v:dbl) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:lng],v:dbl) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:flt],v:bte) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:flt],v:bte) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:flt,b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:flt,b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:flt],v:sht) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:flt],v:sht) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:flt,b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:flt,b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:flt],v:int) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:flt],v:int) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:flt,b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:flt,b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:flt],v:wrd) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:flt],v:wrd) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:flt],v:lng) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:flt],v:lng) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:flt,b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:flt,b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:flt],v:flt) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:flt],v:flt) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:flt,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:flt,b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:flt],v:dbl) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:flt],v:dbl) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:dbl],v:bte) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:dbl],v:bte) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:dbl],v:sht) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:dbl],v:sht) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:dbl],v:int) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:dbl],v:int) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:dbl,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:dbl,b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:dbl],v:lng) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:dbl],v:lng) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:dbl],v:flt) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:dbl],v:flt) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";

pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2, signal error on divide by zero";
pattern %(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B1 % B2 with candidates list, signal error on divide by zero";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2, divide by zero causes NIL value";
pattern mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B1 % B2 with candidates list, divide by zero causes NIL value";
pattern %(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V, signal error on divide by zero";
pattern %(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return B % V with candidates list, signal error on divide by zero";
pattern mod_noerror(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V, divide by zero causes NIL value";
pattern mod_noerror(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return B % V with candidates list, divide by zero causes NIL value";
pattern %(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B, signal error on divide by zero";
pattern %(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMODsignal
comment "Return V % B with candidates list, signal error on divide by zero";
pattern mod_noerror(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B, divide by zero causes NIL value";
pattern mod_noerror(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDbatMOD
comment "Return V % B with candidates list, divide by zero causes NIL value";


pattern and(b1:bat[:oid,:bit],b2:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatAND
comment "Return B1 AND B2";
pattern and(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatAND
comment "Return B1 AND B2 with candidates list";
pattern and(b:bat[:oid,:bit],v:bit) :bat[:oid,:bit]
address CMDbatAND
comment "Return B AND V";
pattern and(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatAND
comment "Return B AND V with candidates list";
pattern and(v:bit,b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatAND
comment "Return V AND B";
pattern and(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatAND
comment "Return V AND B with candidates list";

pattern and(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatAND
comment "Return B1 AND B2";
pattern and(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatAND
comment "Return B1 AND B2 with candidates list";
pattern and(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatAND
comment "Return B AND V";
pattern and(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatAND
comment "Return B AND V with candidates list";
pattern and(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatAND
comment "Return V AND B";
pattern and(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatAND
comment "Return V AND B with candidates list";

pattern and(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatAND
comment "Return B1 AND B2";
pattern and(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatAND
comment "Return B1 AND B2 with candidates list";
pattern and(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatAND
comment "Return B AND V";
pattern and(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatAND
comment "Return B AND V with candidates list";
pattern and(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatAND
comment "Return V AND B";
pattern and(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatAND
comment "Return V AND B with candidates list";

pattern and(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatAND
comment "Return B1 AND B2";
pattern and(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatAND
comment "Return B1 AND B2 with candidates list";
pattern and(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatAND
comment "Return B AND V";
pattern and(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatAND
comment "Return B AND V with candidates list";
pattern and(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatAND
comment "Return V AND B";
pattern and(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatAND
comment "Return V AND B with candidates list";

pattern and(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatAND
comment "Return B1 AND B2";
pattern and(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatAND
comment "Return B1 AND B2 with candidates list";
pattern and(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatAND
comment "Return B AND V";
pattern and(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatAND
comment "Return B AND V with candidates list";
pattern and(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatAND
comment "Return V AND B";
pattern and(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatAND
comment "Return V AND B with candidates list";

pattern and(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatAND
comment "Return B1 AND B2";
pattern and(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatAND
comment "Return B1 AND B2 with candidates list";
pattern and(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatAND
comment "Return B AND V";
pattern and(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatAND
comment "Return B AND V with candidates list";
pattern and(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatAND
comment "Return V AND B";
pattern and(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatAND
comment "Return V AND B with candidates list";


pattern or(b1:bat[:oid,:bit],b2:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatOR
comment "Return B1 OR B2";
pattern or(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatOR
comment "Return B1 OR B2 with candidates list";
pattern or(b:bat[:oid,:bit],v:bit) :bat[:oid,:bit]
address CMDbatOR
comment "Return B OR V";
pattern or(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatOR
comment "Return B OR V with candidates list";
pattern or(v:bit,b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatOR
comment "Return V OR B";
pattern or(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatOR
comment "Return V OR B with candidates list";

pattern or(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatOR
comment "Return B1 OR B2";
pattern or(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatOR
comment "Return B1 OR B2 with candidates list";
pattern or(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatOR
comment "Return B OR V";
pattern or(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatOR
comment "Return B OR V with candidates list";
pattern or(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatOR
comment "Return V OR B";
pattern or(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatOR
comment "Return V OR B with candidates list";

pattern or(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatOR
comment "Return B1 OR B2";
pattern or(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatOR
comment "Return B1 OR B2 with candidates list";
pattern or(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatOR
comment "Return B OR V";
pattern or(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatOR
comment "Return B OR V with candidates list";
pattern or(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatOR
comment "Return V OR B";
pattern or(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatOR
comment "Return V OR B with candidates list";

pattern or(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatOR
comment "Return B1 OR B2";
pattern or(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatOR
comment "Return B1 OR B2 with candidates list";
pattern or(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatOR
comment "Return B OR V";
pattern or(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatOR
comment "Return B OR V with candidates list";
pattern or(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatOR
comment "Return V OR B";
pattern or(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatOR
comment "Return V OR B with candidates list";

pattern or(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatOR
comment "Return B1 OR B2";
pattern or(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatOR
comment "Return B1 OR B2 with candidates list";
pattern or(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatOR
comment "Return B OR V";
pattern or(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatOR
comment "Return B OR V with candidates list";
pattern or(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatOR
comment "Return V OR B";
pattern or(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatOR
comment "Return V OR B with candidates list";

pattern or(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatOR
comment "Return B1 OR B2";
pattern or(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatOR
comment "Return B1 OR B2 with candidates list";
pattern or(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatOR
comment "Return B OR V";
pattern or(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatOR
comment "Return B OR V with candidates list";
pattern or(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatOR
comment "Return V OR B";
pattern or(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatOR
comment "Return V OR B with candidates list";


pattern xor(b1:bat[:oid,:bit],b2:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatXOR
comment "Return B1 XOR B2";
pattern xor(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatXOR
comment "Return B1 XOR B2 with candidates list";
pattern xor(b:bat[:oid,:bit],v:bit) :bat[:oid,:bit]
address CMDbatXOR
comment "Return B XOR V";
pattern xor(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatXOR
comment "Return B XOR V with candidates list";
pattern xor(v:bit,b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatXOR
comment "Return V XOR B";
pattern xor(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatXOR
comment "Return V XOR B with candidates list";

pattern xor(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatXOR
comment "Return B1 XOR B2";
pattern xor(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatXOR
comment "Return B1 XOR B2 with candidates list";
pattern xor(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatXOR
comment "Return B XOR V";
pattern xor(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatXOR
comment "Return B XOR V with candidates list";
pattern xor(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatXOR
comment "Return V XOR B";
pattern xor(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatXOR
comment "Return V XOR B with candidates list";

pattern xor(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatXOR
comment "Return B1 XOR B2";
pattern xor(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatXOR
comment "Return B1 XOR B2 with candidates list";
pattern xor(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatXOR
comment "Return B XOR V";
pattern xor(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatXOR
comment "Return B XOR V with candidates list";
pattern xor(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatXOR
comment "Return V XOR B";
pattern xor(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatXOR
comment "Return V XOR B with candidates list";

pattern xor(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatXOR
comment "Return B1 XOR B2";
pattern xor(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatXOR
comment "Return B1 XOR B2 with candidates list";
pattern xor(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatXOR
comment "Return B XOR V";
pattern xor(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatXOR
comment "Return B XOR V with candidates list";
pattern xor(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatXOR
comment "Return V XOR B";
pattern xor(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatXOR
comment "Return V XOR B with candidates list";

pattern xor(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatXOR
comment "Return B1 XOR B2";
pattern xor(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatXOR
comment "Return B1 XOR B2 with candidates list";
pattern xor(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatXOR
comment "Return B XOR V";
pattern xor(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatXOR
comment "Return B XOR V with candidates list";
pattern xor(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatXOR
comment "Return V XOR B";
pattern xor(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatXOR
comment "Return V XOR B with candidates list";

pattern xor(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatXOR
comment "Return B1 XOR B2";
pattern xor(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatXOR
comment "Return B1 XOR B2 with candidates list";
pattern xor(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatXOR
comment "Return B XOR V";
pattern xor(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatXOR
comment "Return B XOR V with candidates list";
pattern xor(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatXOR
comment "Return V XOR B";
pattern xor(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatXOR
comment "Return V XOR B with candidates list";


pattern <<(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:bte],v:sht) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:bte],v:sht) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:bte],v:int) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:bte],v:int) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:bte,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:bte,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:bte],v:lng) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:bte],v:lng) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:sht],v:int) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:sht],v:int) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:sht,b:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:sht,b:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:sht],v:wrd) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:sht],v:wrd) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:sht],v:lng) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:sht],v:lng) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:sht,b:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:sht,b:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:int],v:wrd) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:int],v:wrd) :bat[:oid,:int]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:int,b:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:int,b:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:int],v:lng) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:int],v:lng) :bat[:oid,:int]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:int,b:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:int,b:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:wrd],v:lng) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:wrd],v:lng) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";

pattern <<(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B1 << B2, raise error on out of range second operand";
pattern <<(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B1 << B2 with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B1 << B2, out of range second operand causes NIL value";
pattern lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B1 << B2 with candidates list, out of range second operand causes NIL value";
pattern <<(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B << V, raise error on out of range second operand";
pattern <<(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return B << V with candidates list, raise error on out of range second operand";
pattern lsh_noerror(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B << V, out of range second operand causes NIL value";
pattern lsh_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return B << V with candidates list, out of range second operand causes NIL value";
pattern <<(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return V << B, raise error on out of range second operand";
pattern <<(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSHsignal
comment "Return V << B with candidates list, raise error on out of range second operand";
pattern lsh_noerror(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return V << B, out of range second operand causes NIL value";
pattern lsh_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatLSH
comment "Return V << B with candidates list, out of range second operand causes NIL value";


pattern >>(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:bte],v:sht) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:bte],v:sht) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:bte],v:int) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:bte],v:int) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:bte,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:bte,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:bte],v:lng) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:bte],v:lng) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:sht],v:bte) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:sht,b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:sht],v:sht) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:sht,b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:sht],v:int) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:sht],v:int) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:sht,b:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:sht,b:bat[:oid,:int]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:sht],v:wrd) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:sht],v:wrd) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:sht],v:lng) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:sht],v:lng) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:sht,b:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:sht,b:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:int],v:bte) :bat[:oid,:int]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:int,b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:int],v:sht) :bat[:oid,:int]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:int,b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:int],v:int) :bat[:oid,:int]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:int,b:bat[:oid,:int]) :bat[:oid,:int]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:int],v:wrd) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:int],v:wrd) :bat[:oid,:int]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:int,b:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:int,b:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:int],v:lng) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:int],v:lng) :bat[:oid,:int]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:int,b:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:int,b:bat[:oid,:lng]) :bat[:oid,:int]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:wrd],v:bte) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:wrd],v:sht) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:wrd],v:int) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:wrd,b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:wrd],v:lng) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:wrd],v:lng) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:lng],v:bte) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:lng,b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:lng],v:sht) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:lng,b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:lng],v:int) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:lng,b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:lng],v:wrd) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";

pattern >>(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B1 >> B2, raise error on out of range second operand";
pattern >>(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B1 >> B2 with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B1 >> B2, out of range second operand causes NIL value";
pattern rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B1 >> B2 with candidates list, out of range second operand causes NIL value";
pattern >>(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B >> V, raise error on out of range second operand";
pattern >>(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return B >> V with candidates list, raise error on out of range second operand";
pattern rsh_noerror(b:bat[:oid,:lng],v:lng) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B >> V, out of range second operand causes NIL value";
pattern rsh_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return B >> V with candidates list, out of range second operand causes NIL value";
pattern >>(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return V >> B, raise error on out of range second operand";
pattern >>(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSHsignal
comment "Return V >> B with candidates list, raise error on out of range second operand";
pattern rsh_noerror(v:lng,b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return V >> B, out of range second operand causes NIL value";
pattern rsh_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDbatRSH
comment "Return V >> B with candidates list, out of range second operand causes NIL value";


pattern <(b1:bat[:oid,:bit],b2:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:bit],v:bit) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:bit,b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:str],b2:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:str],v:str) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:str,b:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:oid],b2:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:oid],v:oid) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:oid,b:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:bte],v:bte) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:bte],v:sht) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:bte],v:int) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:bte,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:bte],v:lng) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:bte],v:flt) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:bte,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:bte],v:dbl) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:sht],v:bte) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:sht,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:sht],v:sht) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:sht,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:sht],v:int) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:sht,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:sht],v:wrd) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:sht],v:lng) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:sht,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:sht],v:flt) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:sht,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:sht],v:dbl) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:int],v:bte) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:int,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:int],v:sht) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:int,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:int],v:int) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:int,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:int],v:wrd) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:int,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:int],v:lng) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:int,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:int],v:flt) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:int,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:int],v:dbl) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:int,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:wrd],v:bte) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:wrd],v:sht) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:wrd],v:int) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:wrd,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:wrd],v:lng) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:wrd],v:flt) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:lng],v:bte) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:lng,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:lng],v:sht) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:lng,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:lng],v:int) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:lng,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:lng],v:wrd) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:lng],v:lng) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:lng,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:lng],v:flt) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:lng,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:lng],v:dbl) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:flt],v:bte) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:flt,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:flt],v:sht) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:flt,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:flt],v:int) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:flt,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:flt],v:wrd) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:flt],v:lng) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:flt,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:flt],v:flt) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:flt,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:flt],v:dbl) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:dbl],v:bte) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:dbl],v:sht) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:dbl],v:int) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:dbl,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:dbl],v:lng) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:dbl],v:flt) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";

pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2 with candidates list";
pattern <(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V";
pattern <(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B < V with candidates list";
pattern <(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B";
pattern <(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLT
comment "Return V < B with candidates list";


pattern <=(b1:bat[:oid,:bit],b2:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:bit],v:bit) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:bit,b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:str],b2:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:str],v:str) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:str,b:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:oid],b2:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:oid],v:oid) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:oid,b:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:bte],v:bte) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:bte],v:sht) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:bte],v:int) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:bte,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:bte],v:lng) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:bte],v:flt) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:bte,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:bte],v:dbl) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:sht],v:bte) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:sht,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:sht],v:sht) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:sht,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:sht],v:int) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:sht,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:sht],v:wrd) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:sht],v:lng) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:sht,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:sht],v:flt) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:sht,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:sht],v:dbl) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:int],v:bte) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:int,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:int],v:sht) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:int,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:int],v:int) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:int,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:int],v:wrd) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:int,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:int],v:lng) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:int,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:int],v:flt) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:int,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:int],v:dbl) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:int,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:wrd],v:bte) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:wrd],v:sht) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:wrd],v:int) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:wrd,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:wrd],v:lng) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:wrd],v:flt) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:lng],v:bte) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:lng,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:lng],v:sht) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:lng,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:lng],v:int) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:lng,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:lng],v:wrd) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:lng],v:lng) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:lng,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:lng],v:flt) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:lng,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:lng],v:dbl) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:flt],v:bte) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:flt,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:flt],v:sht) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:flt,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:flt],v:int) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:flt,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:flt],v:wrd) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:flt],v:lng) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:flt,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:flt],v:flt) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:flt,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:flt],v:dbl) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:dbl],v:bte) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:dbl],v:sht) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:dbl],v:int) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:dbl,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:dbl],v:lng) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:dbl],v:flt) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";

pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2 with candidates list";
pattern <=(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V";
pattern <=(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B <= V with candidates list";
pattern <=(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B";
pattern <=(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatLE
comment "Return V <= B with candidates list";


pattern >(b1:bat[:oid,:bit],b2:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:bit],v:bit) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:bit,b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:str],b2:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:str],v:str) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:str,b:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:oid],b2:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:oid],v:oid) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:oid,b:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:bte],v:bte) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:bte],v:sht) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:bte],v:int) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:bte,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:bte],v:lng) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:bte],v:flt) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:bte,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:bte],v:dbl) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:sht],v:bte) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:sht,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:sht],v:sht) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:sht,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:sht],v:int) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:sht,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:sht],v:wrd) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:sht],v:lng) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:sht,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:sht],v:flt) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:sht,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:sht],v:dbl) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:int],v:bte) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:int,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:int],v:sht) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:int,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:int],v:int) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:int,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:int],v:wrd) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:int,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:int],v:lng) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:int,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:int],v:flt) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:int,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:int],v:dbl) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:int,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:wrd],v:bte) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:wrd],v:sht) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:wrd],v:int) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:wrd,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:wrd],v:lng) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:wrd],v:flt) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:lng],v:bte) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:lng,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:lng],v:sht) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:lng,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:lng],v:int) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:lng,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:lng],v:wrd) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:lng],v:lng) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:lng,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:lng],v:flt) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:lng,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:lng],v:dbl) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:flt],v:bte) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:flt,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:flt],v:sht) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:flt,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:flt],v:int) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:flt,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:flt],v:wrd) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:flt],v:lng) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:flt,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:flt],v:flt) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:flt,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:flt],v:dbl) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:dbl],v:bte) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:dbl],v:sht) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:dbl],v:int) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:dbl,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:dbl],v:lng) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:dbl],v:flt) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";

pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2 with candidates list";
pattern >(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V";
pattern >(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B > V with candidates list";
pattern >(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B";
pattern >(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGT
comment "Return V > B with candidates list";


pattern >=(b1:bat[:oid,:bit],b2:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:bit],v:bit) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:bit,b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:str],b2:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:str],v:str) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:str,b:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:oid],b2:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:oid],v:oid) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:oid,b:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:bte],v:bte) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:bte],v:sht) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:bte],v:int) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:bte,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:bte],v:lng) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:bte],v:flt) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:bte,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:bte],v:dbl) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:sht],v:bte) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:sht,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:sht],v:sht) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:sht,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:sht],v:int) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:sht,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:sht],v:wrd) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:sht],v:lng) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:sht,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:sht],v:flt) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:sht,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:sht],v:dbl) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:int],v:bte) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:int,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:int],v:sht) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:int,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:int],v:int) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:int,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:int],v:wrd) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:int,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:int],v:lng) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:int,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:int],v:flt) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:int,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:int],v:dbl) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:int,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:wrd],v:bte) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:wrd],v:sht) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:wrd],v:int) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:wrd,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:wrd],v:lng) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:wrd],v:flt) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:lng],v:bte) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:lng,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:lng],v:sht) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:lng,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:lng],v:int) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:lng,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:lng],v:wrd) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:lng],v:lng) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:lng,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:lng],v:flt) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:lng,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:lng],v:dbl) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:flt],v:bte) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:flt,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:flt],v:sht) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:flt,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:flt],v:int) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:flt,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:flt],v:wrd) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:flt],v:lng) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:flt,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:flt],v:flt) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:flt,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:flt],v:dbl) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:dbl],v:bte) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:dbl],v:sht) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:dbl],v:int) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:dbl,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:dbl],v:lng) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:dbl],v:flt) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";

pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2 with candidates list";
pattern >=(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V";
pattern >=(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B >= V with candidates list";
pattern >=(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B";
pattern >=(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatGE
comment "Return V >= B with candidates list";


pattern ==(b1:bat[:oid,:bit],b2:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:bit],v:bit) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:bit,b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:str],b2:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:str],v:str) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:str,b:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:oid],b2:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:oid],v:oid) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:oid,b:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:bte],v:bte) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:bte],v:sht) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:bte],v:int) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:bte,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:bte],v:lng) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:bte],v:flt) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:bte,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:bte],v:dbl) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:sht],v:bte) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:sht,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:sht],v:sht) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:sht,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:sht],v:int) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:sht,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:sht],v:wrd) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:sht],v:lng) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:sht,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:sht],v:flt) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:sht,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:sht],v:dbl) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:int],v:bte) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:int,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:int],v:sht) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:int,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:int],v:int) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:int,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:int],v:wrd) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:int,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:int],v:lng) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:int,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:int],v:flt) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:int,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:int],v:dbl) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:int,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:wrd],v:bte) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:wrd],v:sht) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:wrd],v:int) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:wrd,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:wrd],v:lng) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:wrd],v:flt) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:lng],v:bte) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:lng,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:lng],v:sht) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:lng,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:lng],v:int) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:lng,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:lng],v:wrd) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:lng],v:lng) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:lng,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:lng],v:flt) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:lng,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:lng],v:dbl) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:flt],v:bte) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:flt,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:flt],v:sht) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:flt,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:flt],v:int) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:flt,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:flt],v:wrd) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:flt],v:lng) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:flt,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:flt],v:flt) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:flt,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:flt],v:dbl) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:dbl],v:bte) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:dbl],v:sht) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:dbl],v:int) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:dbl,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:dbl],v:lng) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:dbl],v:flt) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";

pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2 with candidates list";
pattern ==(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V";
pattern ==(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B == V with candidates list";
pattern ==(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B";
pattern ==(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return V == B with candidates list";


pattern !=(b1:bat[:oid,:bit],b2:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:bit],v:bit) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:bit,b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:str],b2:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:str],v:str) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:str,b:bat[:oid,:str]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:oid],b2:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:oid],v:oid) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:oid,b:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:bte],v:bte) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:bte],v:sht) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:bte],v:int) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:bte,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:bte],v:lng) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:bte],v:flt) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:bte,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:bte],v:dbl) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:sht],v:bte) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:sht,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:sht],v:sht) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:sht,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:sht],v:int) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:sht,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:sht],v:wrd) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:sht],v:lng) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:sht,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:sht],v:flt) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:sht,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:sht],v:dbl) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:int],v:bte) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:int,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:int],v:sht) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:int,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:int],v:int) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:int,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:int],v:wrd) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:int,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:int],v:lng) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:int,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:int],v:flt) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:int,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:int],v:dbl) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:int,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:wrd],v:bte) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:wrd],v:sht) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:wrd],v:int) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:wrd,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:wrd],v:lng) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:wrd],v:flt) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:lng],v:bte) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:lng,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:lng],v:sht) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:lng,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:lng],v:int) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:lng,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:lng],v:wrd) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:lng],v:lng) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:lng,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:lng],v:flt) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:lng,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:lng],v:dbl) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:flt],v:bte) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:flt,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:flt],v:sht) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:flt,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:flt],v:int) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:flt,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:flt],v:wrd) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:flt],v:lng) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:flt,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:flt],v:flt) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:flt,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:flt],v:dbl) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:dbl],v:bte) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:dbl],v:sht) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:dbl],v:int) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:dbl,b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:dbl],v:lng) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:dbl],v:flt) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";

pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2 with candidates list";
pattern !=(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V";
pattern !=(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B != V with candidates list";
pattern !=(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B";
pattern !=(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatNE
comment "Return V != B with candidates list";


pattern cmp(b1:bat[:oid,:bit],b2:bat[:oid,:bit]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:bit],v:bit) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:bit,b:bat[:oid,:bit]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:str],b2:bat[:oid,:str]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:str],v:str) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:str,b:bat[:oid,:str]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:oid],b2:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:oid],v:oid) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:oid,b:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:bte],v:bte) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:bte,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:bte],v:sht) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:bte,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:bte],v:int) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:bte,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:bte],v:wrd) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:bte,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:bte],v:lng) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:bte,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:bte],v:flt) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:bte,b:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:bte],v:dbl) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:bte,b:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:sht],v:bte) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:sht,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:sht],v:sht) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:sht,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:sht],v:int) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:sht,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:sht],v:wrd) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:sht,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:sht],v:lng) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:sht,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:sht],v:flt) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:sht,b:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:sht],v:dbl) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:sht,b:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:int],v:bte) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:int,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:int],v:sht) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:int,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:int],v:int) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:int,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:int],v:wrd) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:int,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:int],v:lng) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:int,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:int],v:flt) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:int,b:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:int],v:dbl) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:int,b:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:wrd],v:bte) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:wrd,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:wrd],v:sht) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:wrd,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:wrd],v:int) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:wrd,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:wrd],v:wrd) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:wrd,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:wrd],v:lng) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:wrd,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:wrd],v:flt) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:wrd,b:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:wrd],v:dbl) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:wrd,b:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:lng],v:bte) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:lng,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:lng],v:sht) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:lng,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:lng],v:int) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:lng,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:lng],v:wrd) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:lng,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:lng],v:lng) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:lng,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:lng],v:flt) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:lng,b:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:lng],v:dbl) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:lng,b:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:flt],v:bte) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:flt,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:flt],v:sht) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:flt,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:flt],v:int) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:flt,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:flt],v:wrd) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:flt,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:flt],v:lng) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:flt,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:flt],v:flt) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:flt,b:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:flt],v:dbl) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:flt,b:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:dbl],v:bte) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:dbl,b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:dbl],v:sht) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:dbl,b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:dbl],v:int) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:dbl,b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:dbl],v:wrd) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:dbl,b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:dbl],v:lng) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:dbl,b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:dbl],v:flt) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:dbl,b:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";

pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2";
pattern cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B1 </==/> B2 with candidates list";
pattern cmp(b:bat[:oid,:dbl],v:dbl) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V";
pattern cmp(v:dbl,b:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B";
pattern cmp(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if B </==/> V with candidates list";
pattern cmp(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDbatCMP
comment "Return -1/0/1 if V </==/> B with candidates list";


pattern between(b:bat[:oid,:bit],lo:bat[:oid,:bit],hi:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bit],lo:bat[:oid,:bit],hi:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bit],lo:bat[:oid,:bit],hi:bit) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bit],lo:bat[:oid,:bit],hi:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bit],lo:bit,hi:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bit],lo:bit,hi:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bit],lo:bit,hi:bit) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bit],lo:bit,hi:bit,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";

pattern between(b:bat[:oid,:bte],lo:bat[:oid,:bte],hi:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bte],lo:bat[:oid,:bte],hi:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bte],lo:bat[:oid,:bte],hi:bte) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bte],lo:bat[:oid,:bte],hi:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bte],lo:bte,hi:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bte],lo:bte,hi:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bte],lo:bte,hi:bte) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:bte],lo:bte,hi:bte,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";

pattern between(b:bat[:oid,:sht],lo:bat[:oid,:sht],hi:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:sht],lo:bat[:oid,:sht],hi:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:sht],lo:bat[:oid,:sht],hi:sht) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:sht],lo:bat[:oid,:sht],hi:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:sht],lo:sht,hi:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:sht],lo:sht,hi:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:sht],lo:sht,hi:sht) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:sht],lo:sht,hi:sht,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";

pattern between(b:bat[:oid,:int],lo:bat[:oid,:int],hi:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:int],lo:bat[:oid,:int],hi:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:int],lo:bat[:oid,:int],hi:int) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:int],lo:bat[:oid,:int],hi:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:int],lo:int,hi:bat[:oid,:int]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:int],lo:int,hi:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:int],lo:int,hi:int) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:int],lo:int,hi:int,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";

pattern between(b:bat[:oid,:wrd],lo:bat[:oid,:wrd],hi:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:wrd],lo:bat[:oid,:wrd],hi:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:wrd],lo:bat[:oid,:wrd],hi:wrd) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:wrd],lo:bat[:oid,:wrd],hi:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:wrd],lo:wrd,hi:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:wrd],lo:wrd,hi:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:wrd],lo:wrd,hi:wrd) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:wrd],lo:wrd,hi:wrd,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";

pattern between(b:bat[:oid,:lng],lo:bat[:oid,:lng],hi:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:lng],lo:bat[:oid,:lng],hi:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:lng],lo:bat[:oid,:lng],hi:lng) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:lng],lo:bat[:oid,:lng],hi:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:lng],lo:lng,hi:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:lng],lo:lng,hi:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:lng],lo:lng,hi:lng) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:lng],lo:lng,hi:lng,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";

pattern between(b:bat[:oid,:flt],lo:bat[:oid,:flt],hi:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:flt],lo:bat[:oid,:flt],hi:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:flt],lo:bat[:oid,:flt],hi:flt) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:flt],lo:bat[:oid,:flt],hi:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:flt],lo:flt,hi:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:flt],lo:flt,hi:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:flt],lo:flt,hi:flt) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:flt],lo:flt,hi:flt,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";

pattern between(b:bat[:oid,:dbl],lo:bat[:oid,:dbl],hi:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:dbl],lo:bat[:oid,:dbl],hi:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:dbl],lo:bat[:oid,:dbl],hi:dbl) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:dbl],lo:bat[:oid,:dbl],hi:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:dbl],lo:dbl,hi:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:dbl],lo:dbl,hi:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:dbl],lo:dbl,hi:dbl) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:dbl],lo:dbl,hi:dbl,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";

pattern between(b:bat[:oid,:oid],lo:bat[:oid,:oid],hi:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:oid],lo:bat[:oid,:oid],hi:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:oid],lo:bat[:oid,:oid],hi:oid) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:oid],lo:bat[:oid,:oid],hi:oid,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:oid],lo:oid,hi:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:oid],lo:oid,hi:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";
pattern between(b:bat[:oid,:oid],lo:oid,hi:oid) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive, nil border is (minus) infinity";
pattern between(b:bat[:oid,:oid],lo:oid,hi:oid,s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDbatBETWEEN
comment "B between LO and HI inclusive with candidates list, nil border is (minus) infinity";


pattern avg(b:bat[:oid,:bte]) :dbl
address CMDcalcavg
comment "average of non-nil values of B with candidates list";
pattern avg(b:bat[:oid,:bte],s:bat[:oid,:oid]) :dbl
address CMDcalcavg
comment "average of non-nil values of B";
pattern avg(b:bat[:oid,:bte]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B";
pattern avg(b:bat[:oid,:bte],s:bat[:oid,:oid]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B with candidates list";

pattern avg(b:bat[:oid,:sht]) :dbl
address CMDcalcavg
comment "average of non-nil values of B with candidates list";
pattern avg(b:bat[:oid,:sht],s:bat[:oid,:oid]) :dbl
address CMDcalcavg
comment "average of non-nil values of B";
pattern avg(b:bat[:oid,:sht]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B";
pattern avg(b:bat[:oid,:sht],s:bat[:oid,:oid]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B with candidates list";

pattern avg(b:bat[:oid,:int]) :dbl
address CMDcalcavg
comment "average of non-nil values of B with candidates list";
pattern avg(b:bat[:oid,:int],s:bat[:oid,:oid]) :dbl
address CMDcalcavg
comment "average of non-nil values of B";
pattern avg(b:bat[:oid,:int]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B";
pattern avg(b:bat[:oid,:int],s:bat[:oid,:oid]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B with candidates list";

pattern avg(b:bat[:oid,:wrd]) :dbl
address CMDcalcavg
comment "average of non-nil values of B with candidates list";
pattern avg(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :dbl
address CMDcalcavg
comment "average of non-nil values of B";
pattern avg(b:bat[:oid,:wrd]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B";
pattern avg(b:bat[:oid,:wrd],s:bat[:oid,:oid]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B with candidates list";

pattern avg(b:bat[:oid,:lng]) :dbl
address CMDcalcavg
comment "average of non-nil values of B with candidates list";
pattern avg(b:bat[:oid,:lng],s:bat[:oid,:oid]) :dbl
address CMDcalcavg
comment "average of non-nil values of B";
pattern avg(b:bat[:oid,:lng]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B";
pattern avg(b:bat[:oid,:lng],s:bat[:oid,:oid]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B with candidates list";

pattern avg(b:bat[:oid,:flt]) :dbl
address CMDcalcavg
comment "average of non-nil values of B with candidates list";
pattern avg(b:bat[:oid,:flt],s:bat[:oid,:oid]) :dbl
address CMDcalcavg
comment "average of non-nil values of B";
pattern avg(b:bat[:oid,:flt]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B";
pattern avg(b:bat[:oid,:flt],s:bat[:oid,:oid]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B with candidates list";

pattern avg(b:bat[:oid,:dbl]) :dbl
address CMDcalcavg
comment "average of non-nil values of B with candidates list";
pattern avg(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :dbl
address CMDcalcavg
comment "average of non-nil values of B";
pattern avg(b:bat[:oid,:dbl]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B";
pattern avg(b:bat[:oid,:dbl],s:bat[:oid,:oid]) (:dbl, :lng)
address CMDcalcavg
comment "average and number of non-nil values of B with candidates list";

pattern bit(b:bat[:oid,:void]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from void to bit, signal error on overflow";
pattern bit(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from void to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:void]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from void to bit";
pattern bit_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from void to bit with candidates list";

pattern bit(b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from bit to bit, signal error on overflow";
pattern bit(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from bit to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:bit]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from bit to bit";
pattern bit_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from bit to bit with candidates list";

pattern bit(b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from bte to bit, signal error on overflow";
pattern bit(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from bte to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:bte]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from bte to bit";
pattern bit_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from bte to bit with candidates list";

pattern bit(b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from sht to bit, signal error on overflow";
pattern bit(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from sht to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:sht]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from sht to bit";
pattern bit_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from sht to bit with candidates list";

pattern bit(b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from int to bit, signal error on overflow";
pattern bit(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from int to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:int]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from int to bit";
pattern bit_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from int to bit with candidates list";

pattern bit(b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from wrd to bit, signal error on overflow";
pattern bit(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from wrd to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:wrd]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from wrd to bit";
pattern bit_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from wrd to bit with candidates list";

pattern bit(b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from lng to bit, signal error on overflow";
pattern bit(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from lng to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:lng]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from lng to bit";
pattern bit_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from lng to bit with candidates list";

pattern bit(b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from flt to bit, signal error on overflow";
pattern bit(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from flt to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:flt]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from flt to bit";
pattern bit_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from flt to bit with candidates list";

pattern bit(b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from dbl to bit, signal error on overflow";
pattern bit(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from dbl to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:dbl]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from dbl to bit";
pattern bit_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from dbl to bit with candidates list";

pattern bit(b:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from oid to bit, signal error on overflow";
pattern bit(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from oid to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from oid to bit";
pattern bit_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from oid to bit with candidates list";

pattern bit(b:bat[:oid,:str]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from str to bit, signal error on overflow";
pattern bit(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvertsignal_bit
comment "cast from str to bit with candidates list, signal error on overflow";
pattern bit_noerror(b:bat[:oid,:str]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from str to bit";
pattern bit_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bit]
address CMDconvert_bit
comment "cast from str to bit with candidates list";

pattern bte(b:bat[:oid,:void]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from void to bte, signal error on overflow";
pattern bte(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from void to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:void]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from void to bte";
pattern bte_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from void to bte with candidates list";

pattern bte(b:bat[:oid,:bit]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from bit to bte, signal error on overflow";
pattern bte(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from bit to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:bit]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from bit to bte";
pattern bte_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from bit to bte with candidates list";

pattern bte(b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from bte to bte, signal error on overflow";
pattern bte(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from bte to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:bte]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from bte to bte";
pattern bte_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from bte to bte with candidates list";

pattern bte(b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from sht to bte, signal error on overflow";
pattern bte(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from sht to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:sht]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from sht to bte";
pattern bte_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from sht to bte with candidates list";

pattern bte(b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from int to bte, signal error on overflow";
pattern bte(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from int to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:int]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from int to bte";
pattern bte_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from int to bte with candidates list";

pattern bte(b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from wrd to bte, signal error on overflow";
pattern bte(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from wrd to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:wrd]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from wrd to bte";
pattern bte_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from wrd to bte with candidates list";

pattern bte(b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from lng to bte, signal error on overflow";
pattern bte(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from lng to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:lng]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from lng to bte";
pattern bte_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from lng to bte with candidates list";

pattern bte(b:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from flt to bte, signal error on overflow";
pattern bte(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from flt to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:flt]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from flt to bte";
pattern bte_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from flt to bte with candidates list";

pattern bte(b:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from dbl to bte, signal error on overflow";
pattern bte(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from dbl to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:dbl]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from dbl to bte";
pattern bte_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from dbl to bte with candidates list";

pattern bte(b:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from oid to bte, signal error on overflow";
pattern bte(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from oid to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from oid to bte";
pattern bte_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from oid to bte with candidates list";

pattern bte(b:bat[:oid,:str]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from str to bte, signal error on overflow";
pattern bte(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvertsignal_bte
comment "cast from str to bte with candidates list, signal error on overflow";
pattern bte_noerror(b:bat[:oid,:str]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from str to bte";
pattern bte_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:bte]
address CMDconvert_bte
comment "cast from str to bte with candidates list";

pattern sht(b:bat[:oid,:void]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from void to sht, signal error on overflow";
pattern sht(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from void to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:void]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from void to sht";
pattern sht_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from void to sht with candidates list";

pattern sht(b:bat[:oid,:bit]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from bit to sht, signal error on overflow";
pattern sht(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from bit to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:bit]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from bit to sht";
pattern sht_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from bit to sht with candidates list";

pattern sht(b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from bte to sht, signal error on overflow";
pattern sht(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from bte to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:bte]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from bte to sht";
pattern sht_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from bte to sht with candidates list";

pattern sht(b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from sht to sht, signal error on overflow";
pattern sht(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from sht to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:sht]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from sht to sht";
pattern sht_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from sht to sht with candidates list";

pattern sht(b:bat[:oid,:int]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from int to sht, signal error on overflow";
pattern sht(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from int to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:int]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from int to sht";
pattern sht_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from int to sht with candidates list";

pattern sht(b:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from wrd to sht, signal error on overflow";
pattern sht(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from wrd to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:wrd]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from wrd to sht";
pattern sht_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from wrd to sht with candidates list";

pattern sht(b:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from lng to sht, signal error on overflow";
pattern sht(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from lng to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:lng]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from lng to sht";
pattern sht_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from lng to sht with candidates list";

pattern sht(b:bat[:oid,:flt]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from flt to sht, signal error on overflow";
pattern sht(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from flt to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:flt]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from flt to sht";
pattern sht_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from flt to sht with candidates list";

pattern sht(b:bat[:oid,:dbl]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from dbl to sht, signal error on overflow";
pattern sht(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from dbl to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:dbl]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from dbl to sht";
pattern sht_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from dbl to sht with candidates list";

pattern sht(b:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from oid to sht, signal error on overflow";
pattern sht(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from oid to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from oid to sht";
pattern sht_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from oid to sht with candidates list";

pattern sht(b:bat[:oid,:str]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from str to sht, signal error on overflow";
pattern sht(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvertsignal_sht
comment "cast from str to sht with candidates list, signal error on overflow";
pattern sht_noerror(b:bat[:oid,:str]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from str to sht";
pattern sht_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:sht]
address CMDconvert_sht
comment "cast from str to sht with candidates list";

pattern int(b:bat[:oid,:void]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from void to int, signal error on overflow";
pattern int(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from void to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:void]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from void to int";
pattern int_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from void to int with candidates list";

pattern int(b:bat[:oid,:bit]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from bit to int, signal error on overflow";
pattern int(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from bit to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:bit]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from bit to int";
pattern int_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from bit to int with candidates list";

pattern int(b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from bte to int, signal error on overflow";
pattern int(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from bte to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:bte]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from bte to int";
pattern int_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from bte to int with candidates list";

pattern int(b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from sht to int, signal error on overflow";
pattern int(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from sht to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:sht]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from sht to int";
pattern int_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from sht to int with candidates list";

pattern int(b:bat[:oid,:int]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from int to int, signal error on overflow";
pattern int(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from int to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:int]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from int to int";
pattern int_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from int to int with candidates list";

pattern int(b:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from wrd to int, signal error on overflow";
pattern int(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from wrd to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:wrd]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from wrd to int";
pattern int_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from wrd to int with candidates list";

pattern int(b:bat[:oid,:lng]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from lng to int, signal error on overflow";
pattern int(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from lng to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:lng]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from lng to int";
pattern int_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from lng to int with candidates list";

pattern int(b:bat[:oid,:flt]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from flt to int, signal error on overflow";
pattern int(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from flt to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:flt]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from flt to int";
pattern int_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from flt to int with candidates list";

pattern int(b:bat[:oid,:dbl]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from dbl to int, signal error on overflow";
pattern int(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from dbl to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:dbl]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from dbl to int";
pattern int_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from dbl to int with candidates list";

pattern int(b:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from oid to int, signal error on overflow";
pattern int(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from oid to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from oid to int";
pattern int_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from oid to int with candidates list";

pattern int(b:bat[:oid,:str]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from str to int, signal error on overflow";
pattern int(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvertsignal_int
comment "cast from str to int with candidates list, signal error on overflow";
pattern int_noerror(b:bat[:oid,:str]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from str to int";
pattern int_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:int]
address CMDconvert_int
comment "cast from str to int with candidates list";

pattern wrd(b:bat[:oid,:void]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from void to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from void to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:void]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from void to wrd";
pattern wrd_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from void to wrd with candidates list";

pattern wrd(b:bat[:oid,:bit]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from bit to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from bit to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:bit]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from bit to wrd";
pattern wrd_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from bit to wrd with candidates list";

pattern wrd(b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from bte to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from bte to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:bte]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from bte to wrd";
pattern wrd_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from bte to wrd with candidates list";

pattern wrd(b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from sht to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from sht to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:sht]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from sht to wrd";
pattern wrd_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from sht to wrd with candidates list";

pattern wrd(b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from int to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from int to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:int]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from int to wrd";
pattern wrd_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from int to wrd with candidates list";

pattern wrd(b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from wrd to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from wrd to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:wrd]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from wrd to wrd";
pattern wrd_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from wrd to wrd with candidates list";

pattern wrd(b:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from lng to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from lng to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:lng]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from lng to wrd";
pattern wrd_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from lng to wrd with candidates list";

pattern wrd(b:bat[:oid,:flt]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from flt to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from flt to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:flt]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from flt to wrd";
pattern wrd_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from flt to wrd with candidates list";

pattern wrd(b:bat[:oid,:dbl]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from dbl to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from dbl to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:dbl]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from dbl to wrd";
pattern wrd_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from dbl to wrd with candidates list";

pattern wrd(b:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from oid to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from oid to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from oid to wrd";
pattern wrd_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from oid to wrd with candidates list";

pattern wrd(b:bat[:oid,:str]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from str to wrd, signal error on overflow";
pattern wrd(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvertsignal_wrd
comment "cast from str to wrd with candidates list, signal error on overflow";
pattern wrd_noerror(b:bat[:oid,:str]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from str to wrd";
pattern wrd_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:wrd]
address CMDconvert_wrd
comment "cast from str to wrd with candidates list";

pattern lng(b:bat[:oid,:void]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from void to lng, signal error on overflow";
pattern lng(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from void to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:void]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from void to lng";
pattern lng_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from void to lng with candidates list";

pattern lng(b:bat[:oid,:bit]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from bit to lng, signal error on overflow";
pattern lng(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from bit to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:bit]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from bit to lng";
pattern lng_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from bit to lng with candidates list";

pattern lng(b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from bte to lng, signal error on overflow";
pattern lng(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from bte to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:bte]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from bte to lng";
pattern lng_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from bte to lng with candidates list";

pattern lng(b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from sht to lng, signal error on overflow";
pattern lng(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from sht to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:sht]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from sht to lng";
pattern lng_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from sht to lng with candidates list";

pattern lng(b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from int to lng, signal error on overflow";
pattern lng(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from int to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:int]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from int to lng";
pattern lng_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from int to lng with candidates list";

pattern lng(b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from wrd to lng, signal error on overflow";
pattern lng(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from wrd to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:wrd]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from wrd to lng";
pattern lng_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from wrd to lng with candidates list";

pattern lng(b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from lng to lng, signal error on overflow";
pattern lng(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from lng to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:lng]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from lng to lng";
pattern lng_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from lng to lng with candidates list";

pattern lng(b:bat[:oid,:flt]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from flt to lng, signal error on overflow";
pattern lng(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from flt to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:flt]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from flt to lng";
pattern lng_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from flt to lng with candidates list";

pattern lng(b:bat[:oid,:dbl]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from dbl to lng, signal error on overflow";
pattern lng(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from dbl to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:dbl]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from dbl to lng";
pattern lng_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from dbl to lng with candidates list";

pattern lng(b:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from oid to lng, signal error on overflow";
pattern lng(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from oid to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from oid to lng";
pattern lng_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from oid to lng with candidates list";

pattern lng(b:bat[:oid,:str]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from str to lng, signal error on overflow";
pattern lng(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvertsignal_lng
comment "cast from str to lng with candidates list, signal error on overflow";
pattern lng_noerror(b:bat[:oid,:str]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from str to lng";
pattern lng_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:lng]
address CMDconvert_lng
comment "cast from str to lng with candidates list";

pattern flt(b:bat[:oid,:void]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from void to flt, signal error on overflow";
pattern flt(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from void to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:void]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from void to flt";
pattern flt_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from void to flt with candidates list";

pattern flt(b:bat[:oid,:bit]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from bit to flt, signal error on overflow";
pattern flt(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from bit to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:bit]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from bit to flt";
pattern flt_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from bit to flt with candidates list";

pattern flt(b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from bte to flt, signal error on overflow";
pattern flt(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from bte to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:bte]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from bte to flt";
pattern flt_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from bte to flt with candidates list";

pattern flt(b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from sht to flt, signal error on overflow";
pattern flt(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from sht to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:sht]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from sht to flt";
pattern flt_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from sht to flt with candidates list";

pattern flt(b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from int to flt, signal error on overflow";
pattern flt(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from int to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:int]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from int to flt";
pattern flt_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from int to flt with candidates list";

pattern flt(b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from wrd to flt, signal error on overflow";
pattern flt(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from wrd to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:wrd]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from wrd to flt";
pattern flt_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from wrd to flt with candidates list";

pattern flt(b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from lng to flt, signal error on overflow";
pattern flt(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from lng to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:lng]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from lng to flt";
pattern flt_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from lng to flt with candidates list";

pattern flt(b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from flt to flt, signal error on overflow";
pattern flt(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from flt to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:flt]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from flt to flt";
pattern flt_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from flt to flt with candidates list";

pattern flt(b:bat[:oid,:dbl]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from dbl to flt, signal error on overflow";
pattern flt(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from dbl to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:dbl]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from dbl to flt";
pattern flt_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from dbl to flt with candidates list";

pattern flt(b:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from oid to flt, signal error on overflow";
pattern flt(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from oid to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from oid to flt";
pattern flt_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from oid to flt with candidates list";

pattern flt(b:bat[:oid,:str]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from str to flt, signal error on overflow";
pattern flt(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvertsignal_flt
comment "cast from str to flt with candidates list, signal error on overflow";
pattern flt_noerror(b:bat[:oid,:str]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from str to flt";
pattern flt_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:flt]
address CMDconvert_flt
comment "cast from str to flt with candidates list";

pattern dbl(b:bat[:oid,:void]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from void to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from void to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:void]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from void to dbl";
pattern dbl_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from void to dbl with candidates list";

pattern dbl(b:bat[:oid,:bit]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from bit to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from bit to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:bit]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from bit to dbl";
pattern dbl_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from bit to dbl with candidates list";

pattern dbl(b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from bte to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from bte to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:bte]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from bte to dbl";
pattern dbl_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from bte to dbl with candidates list";

pattern dbl(b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from sht to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from sht to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:sht]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from sht to dbl";
pattern dbl_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from sht to dbl with candidates list";

pattern dbl(b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from int to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from int to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:int]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from int to dbl";
pattern dbl_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from int to dbl with candidates list";

pattern dbl(b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from wrd to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from wrd to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:wrd]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from wrd to dbl";
pattern dbl_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from wrd to dbl with candidates list";

pattern dbl(b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from lng to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from lng to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:lng]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from lng to dbl";
pattern dbl_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from lng to dbl with candidates list";

pattern dbl(b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from flt to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from flt to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:flt]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from flt to dbl";
pattern dbl_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from flt to dbl with candidates list";

pattern dbl(b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from dbl to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from dbl to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:dbl]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from dbl to dbl";
pattern dbl_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from dbl to dbl with candidates list";

pattern dbl(b:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from oid to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from oid to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from oid to dbl";
pattern dbl_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from oid to dbl with candidates list";

pattern dbl(b:bat[:oid,:str]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from str to dbl, signal error on overflow";
pattern dbl(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvertsignal_dbl
comment "cast from str to dbl with candidates list, signal error on overflow";
pattern dbl_noerror(b:bat[:oid,:str]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from str to dbl";
pattern dbl_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:dbl]
address CMDconvert_dbl
comment "cast from str to dbl with candidates list";

pattern oid(b:bat[:oid,:void]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from void to oid, signal error on overflow";
pattern oid(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from void to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:void]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from void to oid";
pattern oid_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from void to oid with candidates list";

pattern oid(b:bat[:oid,:bit]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from bit to oid, signal error on overflow";
pattern oid(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from bit to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:bit]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from bit to oid";
pattern oid_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from bit to oid with candidates list";

pattern oid(b:bat[:oid,:bte]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from bte to oid, signal error on overflow";
pattern oid(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from bte to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:bte]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from bte to oid";
pattern oid_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from bte to oid with candidates list";

pattern oid(b:bat[:oid,:sht]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from sht to oid, signal error on overflow";
pattern oid(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from sht to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:sht]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from sht to oid";
pattern oid_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from sht to oid with candidates list";

pattern oid(b:bat[:oid,:int]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from int to oid, signal error on overflow";
pattern oid(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from int to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:int]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from int to oid";
pattern oid_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from int to oid with candidates list";

pattern oid(b:bat[:oid,:wrd]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from wrd to oid, signal error on overflow";
pattern oid(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from wrd to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:wrd]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from wrd to oid";
pattern oid_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from wrd to oid with candidates list";

pattern oid(b:bat[:oid,:lng]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from lng to oid, signal error on overflow";
pattern oid(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from lng to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:lng]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from lng to oid";
pattern oid_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from lng to oid with candidates list";

pattern oid(b:bat[:oid,:flt]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from flt to oid, signal error on overflow";
pattern oid(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from flt to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:flt]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from flt to oid";
pattern oid_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from flt to oid with candidates list";

pattern oid(b:bat[:oid,:dbl]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from dbl to oid, signal error on overflow";
pattern oid(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from dbl to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:dbl]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from dbl to oid";
pattern oid_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from dbl to oid with candidates list";

pattern oid(b:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from oid to oid, signal error on overflow";
pattern oid(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from oid to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from oid to oid";
pattern oid_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from oid to oid with candidates list";

pattern oid(b:bat[:oid,:str]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from str to oid, signal error on overflow";
pattern oid(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvertsignal_oid
comment "cast from str to oid with candidates list, signal error on overflow";
pattern oid_noerror(b:bat[:oid,:str]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from str to oid";
pattern oid_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:oid]
address CMDconvert_oid
comment "cast from str to oid with candidates list";

pattern str(b:bat[:oid,:void]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from void to str, signal error on overflow";
pattern str(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from void to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:void]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from void to str";
pattern str_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from void to str with candidates list";

pattern str(b:bat[:oid,:bit]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from bit to str, signal error on overflow";
pattern str(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from bit to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:bit]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from bit to str";
pattern str_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from bit to str with candidates list";

pattern str(b:bat[:oid,:bte]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from bte to str, signal error on overflow";
pattern str(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from bte to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:bte]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from bte to str";
pattern str_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from bte to str with candidates list";

pattern str(b:bat[:oid,:sht]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from sht to str, signal error on overflow";
pattern str(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from sht to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:sht]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from sht to str";
pattern str_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from sht to str with candidates list";

pattern str(b:bat[:oid,:int]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from int to str, signal error on overflow";
pattern str(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from int to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:int]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from int to str";
pattern str_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from int to str with candidates list";

pattern str(b:bat[:oid,:wrd]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from wrd to str, signal error on overflow";
pattern str(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from wrd to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:wrd]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from wrd to str";
pattern str_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from wrd to str with candidates list";

pattern str(b:bat[:oid,:lng]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from lng to str, signal error on overflow";
pattern str(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from lng to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:lng]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from lng to str";
pattern str_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from lng to str with candidates list";

pattern str(b:bat[:oid,:flt]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from flt to str, signal error on overflow";
pattern str(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from flt to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:flt]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from flt to str";
pattern str_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from flt to str with candidates list";

pattern str(b:bat[:oid,:dbl]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from dbl to str, signal error on overflow";
pattern str(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from dbl to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:dbl]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from dbl to str";
pattern str_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from dbl to str with candidates list";

pattern str(b:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from oid to str, signal error on overflow";
pattern str(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from oid to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from oid to str";
pattern str_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from oid to str with candidates list";

pattern str(b:bat[:oid,:str]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from str to str, signal error on overflow";
pattern str(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvertsignal_str
comment "cast from str to str with candidates list, signal error on overflow";
pattern str_noerror(b:bat[:oid,:str]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from str to str";
pattern str_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]) :bat[:oid,:str]
address CMDconvert_str
comment "cast from str to str with candidates list";

pattern ifthen(b:bat[:oid,:bit], v1:any_1) :bat[:oid,:any_1]
address CMDifthen
comment "If-then operation to assemble a conditional result";

pattern ifthenelse(b:bat[:oid,:bit], v1:any_1, v2:any_1) :bat[:oid,:any_1]
address CMDifthen
comment "If-then-else operation to assemble a conditional result";

pattern ifthenelse(b:bat[:oid,:bit], b1:bat[:oid,:any_1], v2:any_1) :bat[:oid,:any_1]
address CMDifthen
comment "If-then-else operation to assemble a conditional result";

pattern ifthenelse(b:bat[:oid,:bit], v1:any_1, b2:bat[:oid,:any_1]) :bat[:oid,:any_1]
address CMDifthen
comment "If-then-else operation to assemble a conditional result";

pattern ifthen(b:bat[:oid,:bit], b1:bat[:oid,:any_1]) :bat[:oid,:any_1]
address CMDifthen
comment "If-then operation to assemble a conditional result";

pattern ifthenelse(b:bat[:oid,:bit], b1:bat[:oid,:any_1], b2:bat[:oid,:any_1]) :bat[:oid,:any_1]
address CMDifthen
comment "If-then-else operation to assemble a conditional result";

