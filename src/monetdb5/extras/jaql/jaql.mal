# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2013 MonetDB B.V.
# All Rights Reserved.

module jaql;

pattern execute(jaql:str):void
address JAQLexecute
comment "Parse and run the given JAQL query";

pattern x(jaql:str):void
address JAQLexecute
comment "execute() alias for the lazy";

pattern getVar(nme:str)(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str])
address JAQLgetVar
comment "Retrieve value of JSON variable";

pattern setVar(nme:str, kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]):void
address JAQLsetVar
comment "Set or overwrite value of JSON variable";

pattern cast(b:bat[:oid,:any], t:any_1):bat[:oid,:any_1]
address JAQLcast
comment "Return BAT b as BAT with tail type of t, if the BAT tail in reality is of that type";

pattern batconcat(l:bat[:oid,:str], r:bat[:oid,:str]):bat[:oid,:str]
address JAQLbatconcat
comment "Return the string concatenation of the tails of both input BATs";

pattern printTimings(execute:lng, transport:lng):void
address JAQLprintTimings
comment "Print timing breakdown information to stdout stream";

# scenario functions and init call
command prelude()
address JAQLprelude;

command epilogue()
address JAQLepilogue;

jaql.prelude();
