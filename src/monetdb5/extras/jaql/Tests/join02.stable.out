stdout of test 'join02` in directory 'monetdb5/extras/jaql` itself:


# 22:41:51 >  
# 22:41:51 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/net/sofia.ins.cwi.nl/export/scratch1/fabian/tmp/mtest-jacqueline-sofia.ins.cwi.nl/five/dbfarm" "--set" "mapi_open=true" "--set" "mapi_port=36950" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_extras_jaql" "join02.mal"
# 22:41:51 >  

# MonetDB 5 server v11.8.0 "jacqueline-0c67cb41e11b+"
# Serving database 'mTests_extras_jaql', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.630 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://sofia.ins.cwi.nl:36950/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/DataCell module not loaded: MALException:jaql.context:JAQL environment not found
function user.main():void;
# extended join test (on more than 2 vars) 
    jaql.x("users = [ {\"name\": \"Jon Doe\", \"password\": \"asdf1234\", \"id\": 1}, {\"name\": \"Jane Doe\", \"password\": \"qwertyui\", \"id\": 2}, {\"name\": \"Max Mustermann\", \"password\": \"q1w2e3r4\", \"id\": 3} ];");
    jaql.x("pages = [ {\"userid\": 1, \"url\":\"code.google.com/p/jaql/\"}, {\"userid\": 2, \"url\":\"www.cnn.com\"}, {\"userid\": 1, \"url\":\"java.sun.com/javase/6/docs/api/\"} ];");
    jaql.x("temps = [ { \"uid\": 1, \"temp\": 1 }, { \"uid\": 2, \"temp\": 2 },  { \"uid\": 3, \"temp\": 3 } ];");
# the normal join, from users to pages and temps 
    jaql.x("join users, pages, temps where users.id == pages.userid and users.id == temps.uid into {users.name, pages.url, temps.temp};");
# normal, but this time users indirectly to temps through pages 
    jaql.x("join users, pages, temps where users.id == pages.userid and pages.userid == temps.uid into {users.name, pages.url, temps.temp};");
# preserve on users only, direct joins on users 
    jaql.x("join preserve users, pages, temps where users.id == pages.userid and users.id == temps.uid into {users.name, pages.url, temps.temp};");
# preserve on users only, indirect join users to temps 
    jaql.x("join preserve users, pages, temps where users.id == pages.userid and pages.userid == temps.uid into {users.name, pages.url, temps.temp};");
# preserve on users and temps, direct join on users 
    jaql.x("join preserve users, pages, preserve temps where users.id == pages.userid and users.id == temps.uid into {users.name, pages.url, temps.temp};");
# preserve on users and temps, with indirect join from users to temps 
# jaql tool adds two separate records for Max Mustermann and temp 3 
# we, as real database connect those two despite the indirection 
    jaql.x("join preserve users, pages, preserve temps where users.id == pages.userid and pages.userid == temps.uid into {users.name, pages.url, temps.temp};");
end main;
[ { "name": "Jon Doe", "url": "java.sun.com/javase/6/docs/api/", "temp": 1 }, { "name": "Jon Doe", "url": "code.google.com/p/jaql/", "temp": 1 }, { "name": "Jane Doe", "url": "www.cnn.com", "temp": 2 } ]
[ { "name": "Jon Doe", "url": "java.sun.com/javase/6/docs/api/", "temp": 1 }, { "name": "Jon Doe", "url": "code.google.com/p/jaql/", "temp": 1 }, { "name": "Jane Doe", "url": "www.cnn.com", "temp": 2 } ]
[ { "name": "Jon Doe", "url": "java.sun.com/javase/6/docs/api/", "temp": 1 }, { "name": "Jon Doe", "url": "code.google.com/p/jaql/", "temp": 1 }, { "name": "Jane Doe", "url": "www.cnn.com", "temp": 2 }, { "name": "Max Mustermann", "temp": 3 } ]
[ { "name": "Jon Doe", "url": "java.sun.com/javase/6/docs/api/", "temp": 1 }, { "name": "Jon Doe", "url": "code.google.com/p/jaql/", "temp": 1 }, { "name": "Jane Doe", "url": "www.cnn.com", "temp": 2 }, { "name": "Max Mustermann" } ]
[ { "name": "Jon Doe", "url": "java.sun.com/javase/6/docs/api/", "temp": 1 }, { "name": "Jon Doe", "url": "code.google.com/p/jaql/", "temp": 1 }, { "name": "Jane Doe", "url": "www.cnn.com", "temp": 2 }, { "name": "Max Mustermann", "temp": 3 } ]
[ { "name": "Jon Doe", "url": "java.sun.com/javase/6/docs/api/", "temp": 1 }, { "name": "Jon Doe", "url": "code.google.com/p/jaql/", "temp": 1 }, { "name": "Jane Doe", "url": "www.cnn.com", "temp": 2 }, { "name": "Max Mustermann", "temp": 3 } ]

# 22:41:51 >  
# 22:41:51 >  "Done."
# 22:41:51 >  

