s := io.stdout();

(j1,j2,j3,j4,j5,j6,j7) := json.shred("[ 1,3, 5]");
json.print(s, j1,j2,j3,j4,j5,j6,j7);

(j1,j2,j3,j4,j5,j6,j7) := json.shred("[\"hello\",\"world\"]");
json.print(s, j1,j2,j3,j4,j5,j6,j7);

(j1,j2,j3,j4,j5,j6,j7) := json.shred("[ { \"key\": \"value\", \"key2\": 5.3 }, null, 4, true ]");
json.print(s, j1,j2,j3,j4,j5,j6,j7);

(j1,j2,j3,j4,j5,j6,j7) := json.shred("[{\"from\":101,\"to\":[20,81,94],\"ts\":1234567,\"msg\":\"Hello world!\"}]");
json.print(s, j1,j2,j3,j4,j5,j6,j7);

# this shouldn't exist
(i1,i2,i3,i4,i5,i6,i7) := json.load("demo");
catch MALException:str;
	io.printf("!%s\n", MALException);
exit MALException;

json.store("demo", j1,j2,j3,j4,j5,j6,j7);
(i1,i2,i3,i4,i5,i6,i7) := json.load("demo");
json.print(s, i1,i2,i3,i4,i5,i6,i7);

# reload again, to check if this works as expected
(i1,i2,i3,i4,i5,i6,i7) := json.load("demo");
json.print(s, i1,i2,i3,i4,i5,i6,i7);

json.drop("demo");
# this should no longer exist
(i1,i2,i3,i4,i5,i6,i7) := json.load("demo");
catch MALException:str;
	io.printf("!%s\n", MALException);
exit MALException;

