stdout of test 'plan00` in directory 'monetdb5/extras/jaql` itself:


# 21:19:49 >  
# 21:19:49 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/net/sofia.ins.cwi.nl/export/scratch1/fabian/tmp/mtest-jacqueline-sofia.ins.cwi.nl/five/dbfarm" "--set" "mapi_open=true" "--set" "mapi_port=33566" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_extras_jaql" "plan00.mal"
# 21:19:49 >  

# MonetDB 5 server v11.8.0 "jacqueline-65159548356e+"
# Serving database 'mTests_extras_jaql', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.662 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://sofia.ins.cwi.nl:33566/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/DataCell module not loaded: MALException:jaql.context:JAQL environment not found
function user.main():void;
    jaql.x("plan A = B;");
    jaql.x("plan test -> filter $.mgr;");
    jaql.x("plan test -> filter each emp emp.mgr;");
    jaql.x("plan e -> filter $.mgr or $.income > 30000;");
    jaql.x("plan emps = [ {id:1, dept:1, income:12000},{id:2, dept:1, income:13000} ];");
    jaql.x("plan [ {id:1, dept:1, income:12000},{id:2, dept:1, income:13000} ] -> filter $.dept == 1;");
    jaql.x("plan [ [3,65,8,72], [5,98,2,65] ] -> expand each arr;");
    jaql.x("plan [ {\"name\":\"Jon Doe\", \"movie_ids\":[3,65,8,72]}, {\"name\":\"Jane Dean\",\"movie_ids\":[5,98,2]} ] -> expand $.movie_ids;");
    jaql.x("plan [ {\"name\":\"Jon Doe\", \"movie_ids\":[3,65,8,72]}, {\"name\":\"Jane Dean\",\"movie_ids\":[5,98,2]} ] -> expand unroll $.movie_ids;");
    jaql.x("plan A -> expand -> transform $ * 2;");
    jaql.x("plan A -> expand $.ids;");
    jaql.x("plan [1,2,3] -> transform {\"value\":$};");
    jaql.x("plan [1,2,3] -> transform $;");
    jaql.x("plan [1,2,3] -> transform $ * 2;");
    jaql.x("plan [1,2,3] -> transform 2 * $;");
    jaql.x("plan [1,2,3] -> transform 2 * 2;");
    jaql.x("plan [1,2,3] -> transform 2 * ($ * 2);");
    jaql.x("plan [1,2,3] -> transform 2 * 2.0 * $;");
    jaql.x("plan [1,2,3] -> transform ($ * 2.0) / 4;");
    jaql.x("plan join users, pages where users.id == pages.userid into {users.name, pages.url};");
    jaql.x("plan join u in users, p in pages where u.id == p.userid into {u.name, p.url};");
    jaql.x("plan join preserve u in users, p in pages where u.id == p.userid into {u.name, p.url};");
    jaql.x("plan employees -> group into $;");
    jaql.x("plan employees -> group by d = $.dept into {d, \"total\": $[*].income};");
    jaql.x("plan employees -> group each emp by d = emp.dept as deptEmps into {d, \"total\": deptEmps[*].income};");
    jaql.x("plan group employees by g = $.dept as es, depts by g = $.did as ds into { \"dept\": g, \"deptName\": ds[0].name, \"emps\": es[*].id, \"numEmps\": es };");
end main;
B => A 
test as $ -> filter: ( $.mgr == true ) => <result> 
test as emp -> filter: ( emp.mgr == true ) => <result> 
e as $ -> filter: ( ( $.mgr == true ) || ( $.income > 30000 ) ) => <result> 
[ {id:1, dept:1, income:12000},{id:2, dept:1, income:13000} ] => emps 
[ {id:1, dept:1, income:12000},{id:2, dept:1, income:13000} ] as $ -> filter: ( $.dept == 1 ) => <result> 
[ [3,65,8,72], [5,98,2,65] ] as arr -> expand: arr => <result> 
[ {"name":"Jon Doe", "movie_ids":[3,65,8,72]}, {"name":"Jane Dean","movie_ids":[5,98,2]} ] as $ -> expand: $.movie_ids => <result> 
[ {"name":"Jon Doe", "movie_ids":[3,65,8,72]}, {"name":"Jane Dean","movie_ids":[5,98,2]} ] as $ -> expand unroll: $.movie_ids => <result> 
A as $ -> expand: $ as $ -> transform: ( $ * 2 ) 
A as $ -> expand: $.ids => <result> 
[1,2,3] as $ -> transform: { "value": $ } 
[1,2,3] => <result> 
[1,2,3] as $ -> transform: ( $ * 2 ) 
[1,2,3] as $ -> transform: ( 2 * $ ) 
[1,2,3] as $ -> transform: 4 
[1,2,3] as $ -> transform: ( 2 * ( $ * 2 ) ) 
[1,2,3] as $ -> transform: ( 2 * ( 2.000000 * $ ) ) 
[1,2,3] as $ -> transform: ( ( $ * 2.000000 ) / 4 ) 
as users in users , pages in pages -> join: where ( ( users.id == pages.userid ) ) into { "name": users.name , "url": pages.url } 
as u in users , p in pages -> join: where ( ( u.id == p.userid ) ) into { "name": u.name , "url": p.url } 
as preserve u in users , p in pages -> join: where ( ( u.id == p.userid ) ) into { "name": u.name , "url": p.url } 
employees -> group by: ( ) into $ 
employees -> group by: ( each $ by d = $.dept as $ ) into { "d": d , "total": $[*].income } 
employees -> group by: ( each emp by d = emp.dept as deptEmps ) into { "d": d , "total": deptEmps[*].income } 
group by: ( employees each $ by g = $.dept as es , depts each $ by g = $.did as ds ) into { "dept": g , "deptName": ds[0].name , "emps": es[*].id , "numEmps": es } 

# 21:19:49 >  
# 21:19:49 >  "Done."
# 21:19:49 >  

