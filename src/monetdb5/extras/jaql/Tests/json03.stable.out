stdout of test 'json03` in directory 'monetdb5/extras/jaql` itself:


# 11:50:58 >  
# 11:50:58 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/net/sofia.ins.cwi.nl/export/scratch1/fabian/tmp/mtest-jacqueline-sofia.ins.cwi.nl/five/dbfarm" "--set" "mapi_open=true" "--set" "mapi_port=30430" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_extras_jaql" "json03.mal"
# 11:50:58 >  

# MonetDB 5 server v11.8.0 "jacqueline-0c67cb41e11b+"
# Serving database 'mTests_extras_jaql', using 8 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.662 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://sofia.ins.cwi.nl:30430/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/DataCell module not loaded: MALException:jaql.context:JAQL environment not found
function user.main():void;
# use extract to semi-construct a new result 
    s := io.stdout();
    (l1,l2,l3,l4,l5,l6,l7) := json.shred("[{\"id\":1,\"name\":\"Fabian\",\"data\":[0,2,true,null]},{\"id\":2,\"name\":\"Niels\"},{\"id\":3,\"name\":\"Martin\",\"data\":null}]");
    json.print(s,l1,l2,l3,l4,l5,l6,l7,0@0,true);
    (r1,r2,r3,r4,r5,r6,r7) := json.shred("[{\"userid\":2,\"prj\":\"sql\"},{\"userid\":1,\"prj\":[\"merovingian\",\"jdbc\",\"jacqueline\"]}]");
    json.print(s,r1,r2,r3,r4,r5,r6,r7,0@0,true);
    elems := bat.new(:oid,:oid);
    elems := bat.insert(elems,1@0,4@0);
    elems := bat.insert(elems,9@0,1@0);
    (r1,r2,r3,r4,r5,r6,r7) := json.extract(r1,r2,r3,r4,r5,r6,r7,elems,0@0);
    json.print(s,r1,r2,r3,r4,r5,r6,r7,0@0,true);
    elems := bat.reverse(elems);
    lastid := json.nextid(r1);
    (l1,l2,l3,l4,l5,l6,l7) := json.extract(l1,l2,l3,l4,l5,l6,l7,elems,lastid);
    json.print(s,l1,l2,l3,l4,l5,l6,l7,lastid,true);
# objects from l and r, order should match elems and be equal to elemes 
# if startoid is 0@0 
    o5 := bat.reverse(l5);
    lo := algebra.select(o5,lastid);
    o5 := bat.reverse(r5);
    ro := algebra.select(o5,0@0);
# remove old outer arrays 
    cleanup := bat.new(:oid,:oid);
    cleanup := bat.insert(cleanup,0@0,nil:oid);
    cleanup := bat.insert(cleanup,lastid,nil:oid);
    l5 := algebra.kdifference(l5,cleanup);
    r5 := algebra.kdifference(r5,cleanup);
# get next id for new objects to create 
    lastid := json.nextid(l1);
# create objects 
    ln := algebra.project(lo,"l");
    l7 := bat.insert(l7,ln);
    rn := algebra.project(ro,"r");
    r7 := bat.insert(r7,rn);
    lo := algebra.markT(lo,lastid);
    lo := bat.reverse(lo);
    l6 := bat.insert(l6,lo);
    ro := algebra.markT(ro,lastid);
    ro := bat.reverse(ro);
    r6 := bat.insert(r6,ro);
# their kind entries 
    kind := algebra.project(ro,111:bte);
# 'o' 
# and the outermost array 
    objs := algebra.project(ro,0@0);
    objs := bat.reverse(objs);
# merge everything 
    r1 := bat.insert(r1,l1);
    r1 := bat.insert(r1,kind);
    r2 := bat.insert(r2,l2);
    r3 := bat.insert(r3,l3);
    r4 := bat.insert(r4,l4);
    r5 := bat.insert(r5,l5);
    r5 := bat.insert(r5,objs);
    r6 := bat.insert(r6,l6);
    r7 := bat.insert(r7,l7);
    json.print(s,r1,r2,r3,r4,r5,r6,r7,0@0,true);
end main;
[
  { "id": 1, "name": "Fabian", "data": [ 0, 2, true, null ] },
  { "id": 2, "name": "Niels" },
  { "id": 3, "name": "Martin", "data": null }
]
[
  { "userid": 2, "prj": "sql" },
  { "userid": 1, "prj": [ "merovingian", "jdbc", "jacqueline" ] }
]
[
  { "userid": 1, "prj": [ "merovingian", "jdbc", "jacqueline" ] },
  { "userid": 2, "prj": "sql" }
]
[
  { "id": 1, "name": "Fabian", "data": [ 0, 2, true, null ] },
  { "id": 2, "name": "Niels" }
]
[
  {
    "r":
    {
      "userid": 1,
      "prj":
      [
        "merovingian",
        "jdbc",
        "jacqueline"
      ]
    },
    "l":
    {
      "id": 1,
      "name": "Fabian",
      "data":
      [
        0,
        2,
        true,
        null
      ]
    }
  },
  {
    "r":
    {
      "userid": 2,
      "prj": "sql"
    },
    "l":
    {
      "id": 2,
      "name": "Niels"
    }
  }
]

# 11:50:58 >  
# 11:50:58 >  "Done."
# 11:50:58 >  

