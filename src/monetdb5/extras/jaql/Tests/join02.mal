# extended join test (on more than 2 vars)

jaql.x("users = [ {\"name\": \"Jon Doe\", \"password\": \"asdf1234\", \"id\": 1}, {\"name\": \"Jane Doe\", \"password\": \"qwertyui\", \"id\": 2}, {\"name\": \"Max Mustermann\", \"password\": \"q1w2e3r4\", \"id\": 3} ];");
jaql.x("pages = [ {\"userid\": 1, \"url\":\"code.google.com/p/jaql/\"}, {\"userid\": 2, \"url\":\"www.cnn.com\"}, {\"userid\": 1, \"url\":\"java.sun.com/javase/6/docs/api/\"} ];");
jaql.x("temps = [ { \"uid\": 1, \"temp\": 1 }, { \"uid\": 2, \"temp\": 2 },  { \"uid\": 3, \"temp\": 3 } ];");

# the normal join, from users to pages and temps
jaql.x("join users, pages, temps where users.id == pages.userid and users.id == temps.uid into {users.name, pages.url, temps.temp};");

# normal, but this time users indirectly to temps through pages
jaql.x("join users, pages, temps where users.id == pages.userid and pages.userid == temps.uid into {users.name, pages.url, temps.temp};");

# preserve on users only, direct joins on users
jaql.x("join preserve users, pages, temps where users.id == pages.userid and users.id == temps.uid into {users.name, pages.url, temps.temp};");

# preserve on users only, indirect join users to temps
jaql.x("join preserve users, pages, temps where users.id == pages.userid and pages.userid == temps.uid into {users.name, pages.url, temps.temp};");

# preserve on users and temps, direct join on users
jaql.x("join preserve users, pages, preserve temps where users.id == pages.userid and users.id == temps.uid into {users.name, pages.url, temps.temp};");

# preserve on users and temps, with indirect join from users to temps
# jaql tool adds two separate records for Max Mustermann and temp 3
# we, as real database connect those two despite the indirection
jaql.x("join preserve users, pages, preserve temps where users.id == pages.userid and pages.userid == temps.uid into {users.name, pages.url, temps.temp};");
