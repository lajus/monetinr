# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2013 MonetDB B.V.
# All Rights Reserved.

# This module contains all functions that can be used from jaql
module jaqlfunc;


# generate a JSON record by merging two JSON arrays
# http://code.google.com/p/jaql/wiki/Builtin_functions#arrayToRecord()
function arrayToRecord(kindn:bat[:oid,:bte],stringn:bat[:oid,:str],integern:bat[:oid,:lng],doublen:bat[:oid,:dbl],arrayn:bat[:oid,:oid],objectn:bat[:oid,:oid],namen:bat[:oid,:str],kindv:bat[:oid,:bte],stringv:bat[:oid,:str],integerv:bat[:oid,:lng],doublev:bat[:oid,:dbl],arrayv:bat[:oid,:oid],objectv:bat[:oid,:oid],namev:bat[:oid,:str])(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	r1 := bat.new(:oid,:bte);
	r2 := bat.new(:oid,:str);
	r3 := bat.new(:oid,:lng);
	r4 := bat.new(:oid,:dbl);
	r5 := bat.new(:oid,:oid);
	r6 := bat.new(:oid,:oid);
	r7 := bat.new(:oid,:str);

	elemsn := algebra.selectH(arrayn, 0@0);
	elemsn := bat.reverse(elemsn);
	k1 := algebra.semijoin(kindn, elemsn);
	# we can only have string values
	k2 := algebra.select(k1, 115:bte); # s
	k3 := algebra.markH(k2, 1@0);
	k4 := algebra.markT(k2, 1@0);

	elemsv := algebra.selectH(arrayv, 0@0);
	e1 := algebra.markH(elemsv, 1@0);
	e2 := algebra.join(k4, e1);

	# create nulls for missing values
	i1 := bat.reverse(kindv);
	i2 := aggr.max(i1);
	i3 := calc.wrd(i2);
	i4 := calc.+(i3, 1);
	i5 := calc.oid(i4);
	e3 := algebra.kdifference(k4, e2);
	e4 := algebra.project(e3, 110:bte); # n
	e5 := algebra.markH(e4, i5);

	# copy the value JSON data
	r1 := bat.insert(r1, 0@0, 111:bte); # o
	k10 := algebra.kdifference(kindv, r1);
	r1 := bat.insert(r1, k10);
	r1 := bat.insert(r1, e5);
	r2 := bat.insert(r2, stringv);
	r3 := bat.insert(r3, integerv);
	r4 := bat.insert(r4, doublev);
	a1 := algebra.kdifference(arrayv, elemsv);
	r5 := bat.insert(r5, a1);
	r6 := bat.insert(r6, objectv);
	r7 := bat.insert(r7, namev);

	# construct the top level object
	e10 := algebra.markH(e3, i5);
	e11 := algebra.markT(e10, i5);
	e2 := bat.insert(e2, e11);
	o1 := algebra.project(0@0, e2);
	e12 := bat.reverse(e2);
	s1 := algebra.join(e12, stringn);
	# add object and the pair names
	r6 := bat.insert(r6, o1);
	r7 := bat.insert(r7, s1);

	return (r1,r2,r3,r4,r5,r6,r7);
end arrayToRecord;

# combine two arrays (A,B) into one array C
# http://code.google.com/p/jaql/wiki/Builtin_functions#pairwise()
function pairwise(kindn:bat[:oid,:bte],stringn:bat[:oid,:str],integern:bat[:oid,:lng],doublen:bat[:oid,:dbl],arrayn:bat[:oid,:oid],objectn:bat[:oid,:oid],namen:bat[:oid,:str],kindv:bat[:oid,:bte],stringv:bat[:oid,:str],integerv:bat[:oid,:lng],doublev:bat[:oid,:dbl],arrayv:bat[:oid,:oid],objectv:bat[:oid,:oid],namev:bat[:oid,:str])(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	nextid := json.nextid(kindn);

	# re-base second json to be appended to the first
	elems := algebra.selectH(arrayv, 0@0);
	(v1,v2,v3,v4,v5,v6,v7) := json.extract(kindv, stringv, integerv, doublev, arrayv, objectv, namev, elems, nextid);

	u1 := bat.insert(kindn, v1);
	u2 := bat.insert(stringn, v2);
	u3 := bat.insert(integern, v3);
	u4 := bat.insert(doublen, v4);
	u5 := bat.insert(arrayn, v5);
	u6 := bat.insert(objectn, v6);
	u7 := bat.insert(namen, v7);

	# construct arrays with values from n and v, the size of n is
	# leading, that is, we pad with nulls on v, but don't pad nulls on n
	# when v is larger
	elemsn := algebra.selectH(u5, 0@0);
	elemsv := algebra.selectH(u5, nextid);

	nullid := json.nextid(u1);
	u1 := bat.insert(u1, nullid, 110:bte);  # n

	nextid := json.nextid(u1);

	t1 := algebra.project(elemsn, 97:bte);  # a
	t2 := algebra.markH(t1, nextid);

	t3 := algebra.markH(elemsn, nextid);
	t4 := algebra.markH(elemsv, nextid);

	# find size mismatch between t3 and t4, and pad with nulls
	d := algebra.kdifference(t3, t4);
	dn := algebra.project(d, nullid);
	t4 := bat.insert(t4, dn);

	u1 := bat.insert(u1, t2);
	u5 := bat.insert(u5, t3);
	u5 := bat.insert(u5, t4);

	t6 := bat.mirror(t2);

	(r1,r2,r3,r4,r5,r6,r7) := json.extract(u1,u2,u3,u4,u5,u6,u7, t6, 0@0);

	return (r1,r2,r3,r4,r5,r6,r7);
end pairwise;

# read JSON data from URI
function shred(uri:str)(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	(r1,r2,r3,r4,r5,r6,r7) := json.shreduri(uri);

	return (r1,r2,r3,r4,r5,r6,r7);
end shred;

# (persistently) store input document
function store(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str], docname:str)(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	json.store(docname, kind,string,integer,double,array,object,name);

	r1 := bat.new(:oid,:bte);
	r2 := bat.new(:oid,:str);
	r3 := bat.new(:oid,:lng);
	r4 := bat.new(:oid,:dbl);
	r5 := bat.new(:oid,:oid);
	r6 := bat.new(:oid,:oid);
	r7 := bat.new(:oid,:str);

	r1 := bat.insert(r1, 0@0, 116:bte); # t

	return (r1,r2,r3,r4,r5,r6,r7);
end store

# load previously stored document
function load(docname:str)(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	(r1,r2,r3,r4,r5,r6,r7) := json.load(docname);

	return (r1,r2,r3,r4,r5,r6,r7);
end load;

# drop a stored document
function drop(docname:str)(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	json.drop(docname);

	r1 := bat.new(:oid,:bte);
	r2 := bat.new(:oid,:str);
	r3 := bat.new(:oid,:lng);
	r4 := bat.new(:oid,:dbl);
	r5 := bat.new(:oid,:oid);
	r6 := bat.new(:oid,:oid);
	r7 := bat.new(:oid,:str);

	r1 := bat.insert(r1, 0@0, 116:bte); # t

	return (r1,r2,r3,r4,r5,r6,r7);
end drop;

# show all stored documents
function list()(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	bats := bbp.getNames();
	docs := pcre.select("json_.*_kind", bats);

	lens := batstr.length(docs);
	lens := batcalc.-(lens, 10);
	offs := algebra.project(lens, 6);
	docs := batstr.substring(docs, offs, lens);

	# in the future we could try to list some info about the document
	# here, like size

	r1 := bat.new(:oid,:bte);
	#r2 := bat.new(:oid,:str);
	r3 := bat.new(:oid,:lng);
	r4 := bat.new(:oid,:dbl);
	#r5 := bat.new(:oid,:oid);
	r6 := bat.new(:oid,:oid);
	r7 := bat.new(:oid,:str);

	r1 := bat.insert(r1, 0@0, 97:bte); # a
	r2 := algebra.markH(docs, 1@0);

	t1 := algebra.project(r2, 115:bte); # s
	r1 := bat.insert(r1, t1);
	
	t2 := algebra.project(r2, 0@0);
	r5 := bat.reverse(t2);

	return (r1,r2,r3,r4,r5,r6,r7);
end list();

# produce a JSON document with trace information
function gettrace()(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	r1 := bat.new(:oid,:bte);
	#r2 := bat.new(:oid,:str);
	#r3 := bat.new(:oid,:lng);
	r4 := bat.new(:oid,:dbl);
	#r5 := bat.new(:oid,:oid);
	#r6 := bat.new(:oid,:oid);
	#r7 := bat.new(:oid,:str);

	r1 := bat.insert(r1, 0@0, 97:bte); # a

	# hardcode info for now, in the future could be argument
	t := profiler.getTrace("ticks");
	s := profiler.getTrace("stmt");

	# build objects
	t5 := algebra.markT(t, 1@0);
	r5 := algebra.project(0@0, t5);
	t6 := bat.reverse(r5);
	t7 := algebra.project(t6, 111:bte); # o

	r1 := bat.insert(r1, t7);

	# ticks are lng
	n := json.nextid(r1);
	r3 := algebra.markH(t, n);
	r7 := algebra.project(r3, "ticks");
	t4 := bat.reverse(r3);
	r6 := algebra.markH(t4, 1@0);
	t1 := algebra.project(r3, 105:bte); # i
	r1 := bat.insert(r1, t1);

	# stmt are str
	n := json.nextid(r1);
	r2 := algebra.markH(s, n);
	t8 := algebra.project(r2, "stmt");
	r7 := bat.insert(r7, t8);
	t9 := bat.reverse(r2);
	r10 := algebra.markH(t9, 1@0);
	r6 := bat.insert(r6, r10);
	t11 := algebra.project(r2, 115:bte); # s
	r1 := bat.insert(r1, t11);

	return (r1,r2,r3,r4,r5,r6,r7);
end gettrace;


# these are groupable functions, they receive their input as :oid,:any_1
# and return the per :oid group result as :oid,:any_2

# perform sum over the input array
function sum(v:bat[:oid,:lng]):bat[:oid,:lng];
	k := algebra.kunique(v);
	p := algebra.uselect(v, nil:lng);
	v := algebra.kdifference(v, p);
	r:bat[:oid,:lng] := aggr.sum(v, k);
	return r;
end sum;
function sum(v:bat[:oid,:dbl]):bat[:oid,:dbl];
	k := algebra.kunique(v);
	p := algebra.uselect(v, nil:dbl);
	v := algebra.kdifference(v, p);
	r:bat[:oid,:dbl] := aggr.sum(v, k);
	return r;
end sum;

# perform average over the input array
function avg(v:bat[:oid,:lng]):bat[:oid,:dbl];
	k := algebra.kunique(v);
	p := algebra.uselect(v, nil:lng);
	v := algebra.kdifference(v, p);
	r := aggr.avg(v, k);
	return r;
end avg;
function avg(v:bat[:oid,:dbl]):bat[:oid,:dbl];
	k := algebra.kunique(v);
	p := algebra.uselect(v, nil:dbl);
	v := algebra.kdifference(v, p);
	r := aggr.avg(v, k);
	return r;
end avg;

# perform count over the input array
function count(v:bat[:oid,:any]):bat[:oid,:lng];
	k := algebra.kunique(v);
	# the input bat v is :oid,:lng, this is guaranteed, but the function
	# signature *must* be :oid,:any in order to indicate that the
	# original contents (tail value) does not matter for this function
	w := algebra.antiuselect(v, nil:lng);
	x := aggr.count(w, k, false);
	r := batcalc.lng(x);
	return r;
end count;

# generates a continuous array of numbers
# http://code.google.com/p/jaql/wiki/Builtin_functions#range()
function range(start:bat[:oid,:lng], vend:bat[:oid,:lng], skip:bat[:oid,:lng]):bat[:oid,:lng];
	ret := bat.new(:oid,:lng);
	barrier (h,t) := iterator.new(start);
		iend := algebra.fetch(vend, h);
		iskip := algebra.fetch(skip, h);
		# TODO: use array.series from sciql
#		ret := array.series(t, iskip, iend, 1, 1);
		iend := calc.+(iend, 1);
		barrier i := t;
				ret := bat.insert(ret, h, i);
				redo i := iterator.next(iskip, iend);
		exit i;
		redo (h,t) := iterator.next(start);
	exit (h,t);
	return ret;
end range;
function range(start:bat[:oid,:lng], vend:bat[:oid,:lng]):bat[:oid,:lng];
	step := algebra.project(start, 1:lng);
	ret := jaqlfunc.range(start, vend, step);
	return ret;
end range;
function range(size:bat[:oid,:lng]):bat[:oid,:lng];
	start := algebra.project(size, 0:lng);
	vend := batcalc.-(size,1);
	ret := jaqlfunc.range(start, vend);
	return ret;
end range;
