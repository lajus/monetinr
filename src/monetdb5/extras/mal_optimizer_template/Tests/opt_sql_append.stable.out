stdout of test 'opt_sql_append` in directory 'monetdb5/extras/mal_optimizer_template` itself:


# 22:58:57 >  
# 22:58:57 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/ufs/manegold/_/Monet/HG/default/prefix/_/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=36275" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_extras_mal_optimizer_template" "--set" "mal_listing=0"
# 22:58:57 >  

# MonetDB 5 server v11.8.0
# This is an unreleased version
# Serving database 'mTests_extras_mal_optimizer_template', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.630 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:36275/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_history.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 40_geom.sql
# loading sql script: 80_udf.sql
# loading sql script: 99_system.sql

# 22:58:57 >  
# 22:58:57 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=rome" "--port=36275"
# 22:58:57 >  

#create table ttt (a int, b int, c int);
#select optimizer;
% . # table_name
% single_value # name
% varchar # type
% 12 # length
[ "default_pipe"	]
#select def from optimizers() where name = optimizer;
% . # table_name
% def # name
% clob # type
% 448 # length
[ "optimizer.inline();optimizer.remap();optimizer.costModel();optimizer.coercions();optimizer.evaluate();optimizer.emptySet();optimizer.aliases();optimizer.pushselect();optimizer.mitosis();optimizer.mergetable();optimizer.deadcode();optimizer.commonTerms();optimizer.joinPath();optimizer.reorder();optimizer.deadcode();optimizer.reduce();optimizer.matpack();optimizer.dataflow();optimizer.querylog();optimizer.multiplex();optimizer.garbageCollector();"	]
#explain copy into ttt from '/:\tmp/xyz';
% .explain # table_name
% mal # name
% clob # type
% 153 # length
function user.s2_1{autoCommit=true}():void;
barrier X_32 := language.dataflow();
    X_2 := sql.mvc();
    (X_13:bat[:oid,:int] ,X_14:bat[:oid,:int] ,X_15:bat[:oid,:int] ) := sql.copy_from("sys","ttt","|","\\n",nil:str,"null","/:\\tmp/xyz",-1:lng,0:lng,0);
exit X_32;
    X_17 := sql.append(X_2,"sys","ttt","a",X_13);
    X_19 := sql.append(X_17,"sys","ttt","b",X_14);
    X_23 := sql.append(X_19,"sys","ttt","c",X_15);
    X_24 := aggr.count(X_15);
    sql.affectedRows(X_23,X_24,"");
end s2_1;
# optimizer.mitosis()
# optimizer.dataflow()
#select optimizer;
% . # table_name
% single_value # name
% varchar # type
% 6 # length
[ "user_1"	]
#select def from optimizers() where name = optimizer;
% . # table_name
% def # name
% clob # type
% 471 # length
[ "optimizer.inline();optimizer.remap();optimizer.costModel();optimizer.coercions();optimizer.evaluate();optimizer.emptySet();optimizer.aliases();optimizer.pushselect();optimizer.mitosis();optimizer.mergetable();optimizer.deadcode();optimizer.commonTerms();optimizer.joinPath();optimizer.reorder();optimizer.deadcode();optimizer.reduce();optimizer.matpack();optimizer.dataflow();optimizer.querylog();optimizer.multiplex();optimizer.sql_append();optimizer.garbageCollector();"	]
#explain copy into ttt from '/:\tmp/xyz';
% .explain # table_name
% mal # name
% clob # type
% 153 # length
function user.s5_1{autoCommit=true}():void;
barrier X_33 := language.dataflow();
    X_2 := sql.mvc();
    (X_13:bat[:oid,:int] ,X_14:bat[:oid,:int] ,X_15:bat[:oid,:int] ) := sql.copy_from("sys","ttt","|","\\n",nil:str,"null","/:\\tmp/xyz",-1:lng,0:lng,0);
exit X_33;
    X_17 := sql.append(X_2,"sys","ttt","a",X_13);
    X_19 := sql.append(X_17,"sys","ttt","b",X_14);
    X_24 := aggr.count(X_15);
    X_23 := sql.append(X_19,"sys","ttt","c",X_15);
    sql.affectedRows(X_23,X_24,"");
end s5_1;
# optimizer.mitosis()
# optimizer.dataflow()
#drop table ttt;

# 22:58:58 >  
# 22:58:58 >  "Done."
# 22:58:58 >  

