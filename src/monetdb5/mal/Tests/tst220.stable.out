stdout of test 'tst220` in directory 'monetdb5/mal` itself:


# 08:01:01 >  
# 08:01:01 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst220.mal </dev/null
# 08:01:01 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## a test checking BAT reference counting under various situations
#function steal(bb:bat[:any$1,:any$2]) :bat[:any$1,:any$2];
#	i:= getLRefCount(bb);
#	printf("enter function refcount =%d[2]\n",i);
#
#	loc:= bb;
#	i:= getLRefCount(bb);
#	printf("local in function refcount =%d[3]\n",i);
#
#	return bb;
#end steal; 
function user.steal(bb:bat[:any_1,:any_2]):bat[:any_1,:any_2];
    i := bbp.getLRefCount(bb);
    io.printf("enter function refcount =%d[2,3]\n",i);
    loc := bb;
    i := bbp.getLRefCount(bb);
    io.printf("local in function refcount =%d[3,4]\n",i);
    return steal := bb;
end steal;
function user.createone():bat[:oid,:str];
    b := bat.new(:oid,:str);
    return createone := b;
end createone;
#
#	b:= bbp.new(:int,:str);
#	i:= bbp.getLRefCount(b);
#	io.printf("refcount =%d[1]\n",i);	
#
#	bat.insert(b,1,"bat B");
#	io.print(b);
#	i:= bbp.getLRefCount(b);
#	io.printf("refcount =%d[1]\n",i);
#
#	#handle an alias
#	b2:= b;			
#	i:= getLRefCount(b);
#	printf("after assignment refcount =%d[2]\n",i);
#
#	#re-use a bat variable
#	b3:= b;			
#	i:= getLRefCount(b);
#	printf("after 2nd assignment refcount =%d[3]\n",i);
#
#	#re-use a bat variable
#	b3:= new(:int,:str);			
#	i:= getLRefCount(b);
#	printf("after 3rd assignment refcount =%d[2]\n",i);
#	i:= getLRefCount(b3);
#	printf("assignment refcount =%d[1]\n",i);
#
#	#re-use a bat variable
#	b4:= select(b,"bat B","bat B");
#	print(b4);
#	i:= getLRefCount(b);
#	printf("after 4rd assignment refcount =%d[2]\n",i);
#
#	# remove by assignment
#	b2:= b3;
#	i:= getLRefCount(b);
#	printf("after 5rd assignment refcount =%d[1]\n",i);
#
function user.main():void;
# a test checking BAT reference counting under various situations 
    b := bat.new(:oid,:str);
    i := bbp.getLRefCount(b);
    io.printf("refcount =%d[1]\n",i);
    bat.append(b,"bat B");
    io.print(b);
    i := bbp.getLRefCount(b);
    io.printf("refcount =%d[1]\n",i);
#handle an alias, which isn;t used! 
    b2 := b;
    i := bbp.getLRefCount(b);
    io.printf("after assignment refcount =%d[2]\n",i);
#re-use a bat variable 
    b3 := b;
    cnt := aggr.count(b3);
# forced use 
    i := bbp.getLRefCount(b);
    io.printf("after 2nd assignment refcount =%d[3]\n",i);
#re-use a bat variable 
    b3 := user.createone();
    i := bbp.getLRefCount(b);
    io.printf("after 3rd assignment refcount =%d[2]\n",i);
    i := bbp.getLRefCount(b3);
    io.printf("assignment refcount =%d[1]\n",i);
#re-use a bat variable 
    b4 := algebra.select(b,"bat C","bat C");
    io.print(b4);
    i := bbp.getLRefCount(b);
    io.printf("after 4rd assignment refcount =%d[2]\n",i);
# remove by assignment 
    b2 := b3;
    i := bbp.getLRefCount(b);
    io.printf("after 5rd assignment refcount =%d[1]\n",i);
    io.printf("call function\n");
    d := user.steal(b);
    i := bbp.getLRefCount(b);
    io.printf("return from function refcount =%d[2]\n",i);
    io.printf("check self replacement, overrule refcount!\n");
    b := user.steal(b);
    i := bbp.getLRefCount(b);
    io.printf("return from function refcount =%d[2]\n",i);
end main;
refcount =1[1]
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 0@0,	  "bat B"	  ]
refcount =2[1]
after assignment refcount =3[2]
after 2nd assignment refcount =4[3]
after 3rd assignment refcount =3[2]
assignment refcount =1[1]
#-----------------#
# h	t	  # name
# int	str	  # type
#-----------------#
after 4rd assignment refcount =3[2]
after 5rd assignment refcount =2[1]
call function
enter function refcount =3[2,3]
local in function refcount =4[3,4]
return from function refcount =3[2]
check self replacement, overrule refcount!
enter function refcount =4[2,3]
local in function refcount =5[3,4]
return from function refcount =3[2]

# 08:01:01 >  
# 08:01:01 >  Done.
# 08:01:01 >  

