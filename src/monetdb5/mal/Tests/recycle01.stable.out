stdout of test 'recycle01` in directory 'monetdb5/mal` itself:


# 12:49:06 >  
# 12:49:06 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=33469 --set xrpc_port=48324 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle01.mal
# 12:49:06 >  

# MonetDB server v5.5.0, based on kernel v1.23.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:33469/
##test the basics of the recycler
## reusing select results
#
#function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
#	b:= bat.new(:oid,:int);
#	bat.insert(b,0@0,0);
#	bat.insert(b,1@0,1);
#	bat.insert(b,2@0,2);
#	bat.insert(b,3@0,3);
#	bat.insert(b,4@0,4);
#	bat.insert(b,5@0,5);
#	bat.insert(b,6@0,6);
#	bat.insert(b,7@0,7);
#	bat.insert(b,8@0,8);
#	bat.insert(b,9@0,9);
#	bat.insert(b,10@0,10);
#	bat.insert(b,11@0,11);
#	return bind:=b;
#end bind;
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
    b := bat.new(:oid,:int);
    bat.insert(b,0@0,0);
    bat.insert(b,1@0,1);
    bat.insert(b,2@0,2);
    bat.insert(b,3@0,3);
    bat.insert(b,4@0,4);
    bat.insert(b,5@0,5);
    bat.insert(b,6@0,6);
    bat.insert(b,7@0,7);
    bat.insert(b,8@0,8);
    bat.insert(b,9@0,9);
    bat.insert(b,10@0,10);
    bat.insert(b,11@0,11);
    return bind := b;
end bind;
#
#function qry(low:int, hgh:int);
#	b:= user.bind("schema","table","column",0);
#	s1:= algebra.select(b,low,hgh);
#end qry;
function user.qry(low:int,hgh:int):void;
    b := user.bind("schema","table","column",0);
    s1 := algebra.select(b,low,hgh);
end qry;
#
#recycle.setRetainPolicy(1);
#recycle.setReusePolicy(1);
#optimizer.recycle("user","qry");
#io.print("start");
#qry(1,10);
#io.print("zoom in");
#qry(1,5);
#io.print("next step");
#qry(2,3);
#io.print("last");
#qry(1,11);
#recycle.dump();
#
function user.main():void;
#test the basics of the recycler 
# reusing select results 
    recycle.setAdmPolicy(1);
    recycle.setReusePolicy(1);
    io.print("start");
    user.qry(1,10);
    io.print("zoom in");
    user.qry(1,5);
    io.print("next step");
    user.qry(2,3);
    io.print("last");
    user.qry(1,11);
    recycle.dump();
end main;
[ "start" ]
[ "zoom in" ]
[ "next step" ]
[ "last" ]
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 0
#   0 lru= 0 cnt=   1 ticks=  80  vol=    0     _0 := user.bind("schema","table","column",0);
#   1 lru= 0 cnt=   4 ticks=  57  vol=    0     _5 := algebra.select(<tmp_20>,1,10);
#   2 lru= 0 cnt=   1 ticks=  22  vol=    0     _8 := algebra.select(<tmp_21>,1,5);
#   3 lru= 0 cnt=   1 ticks=  16  vol=    0     _10 := algebra.select(<tmp_21>,2,3);
#   4 lru= 0 cnt=   1 ticks=  18  vol=    0     _13 := algebra.select(<tmp_21>,1,11);

# 12:49:07 >  
# 12:49:07 >  Done.
# 12:49:07 >  

