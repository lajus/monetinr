stdout of test 'tst610` in directory 'monetdb5/mal` itself:


# 08:01:26 >  
# 08:01:26 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst610.mal </dev/null
# 08:01:26 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##this test is used to monitor reference count setting
##create a persistent bat and destroy it in the next session
#function refs():void;
#    g:=bbp.getNames();
#    gr:=bbp.getRefCount();
#    gl:=bbp.getLRefCount();
#    print(g,gr,gl);
#end refs;
function user.refs():void;
    g := bbp.getNames();
    gs := algebra.sort(g);
    gr := bbp.getRefCount();
    gl := bbp.getLRefCount();
    io.table(gs,gr,gl);
end refs;
#
#b:= new(:int,:int);
##refs();
#insert(b,23,32);
##refs();
#setName(b,"tasks");
##refs();
#setPersistent(b);
##refs();
## it is committed 
#print("open box");
#bbp.open();
#refs();
#t:= bbp.bind("tasks");
#print(t);
#bbp.release(t);
#refs();
#print(t);
#catch MALException;
#print("BAT was released");
#exit MALException;
## the bat is still visible, because the destroy only
## marks it for deletion at the end of session or
## when the reference counters drop to zero
#t:= bind("tasks");
#refs();
## to really remove, we get rid of the current
## references as well
#bbp.destroy(t,true);
#refs();
#print(t);
#catch MALException;
#print("BAT was destroyed");
#exit MALException;
#z:=bind("tasks");
#print(z);
##it is not in the box anymore either
#catch MALException;
#print("BAT was removed from the box");
#exit MALException;
#
function user.main():void;
#this test is used to monitor reference count setting 
#create a persistent bat and destroy it in test 612 
    b := bat.new(:oid,:int);
#refs(); 
    bat.append(b,32);
#refs(); 
    bat.setName(b,"tasks");
#refs(); 
    bat.setPersistent(b,true);
#refs(); 
# it is committed  
    io.print("open box");
    bbp.open();
#user.refs(); 
    t:bat[:oid,:int]  := bbp.bind("tasks");
    io.print(t);
    bbp.release(t);
#user.refs(); 
    io.print(t);
catch MALException:str ;
    io.print("BAT was released");
exit MALException:str ;
# the bat is still visible, because the destroy only 
# marks it for deletion at the end of session or 
# when the reference counters drop to zero 
    t:bat[:oid,:int]  := bbp.bind("tasks");
#user.refs(); 
# to really remove, we get rid of the current 
# references as well 
    bbp.destroy(t,true);
#user.refs(); 
    io.print(t);
catch MALException:str ;
    io.print("BAT was destroyed");
exit MALException:str ;
    z:bat[:oid,:any]  := bbp.bind("tasks");
    io.print(z);
#it is not in the box anymore either 
catch MALException:str ;
    io.print("BAT was removed from the box");
exit MALException:str ;
end main;
[ "open box" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0@0,	  32	  ]
[ nil ]
[ "BAT was destroyed" ]
[ "BAT was removed from the box" ]

# 08:01:26 >  
# 08:01:26 >  Done.
# 08:01:26 >  

