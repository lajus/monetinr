#inspection of the runtime setting
#it uses the dynamic type analysis scheme

function dir(b:bat[:int,:str]):void;
	atm:= inspect.getAtomNames();
	brev:= bat.reverse(b);
	bm := bat.mirror(brev);
	h := bbp.getHeadType();
	bHead:= algebra.join(brev,h);
	bat.setColumn(bHead,"htype");
	h := bbp.getTailType();
	bTail:= algebra.join(brev,h);
	bat.setColumn(bTail,"ttype");
	bcount:= bbp.getCount();
	bCount:= algebra.join(brev,bcount);
	bat.setColumn(bCount,"count");
# ignore is it debug flag dependent
#	bheat:= bbp.getHeat();
#	bHeat:= algebra.join(brev,bheat);
#	bat.setColumn(bHeat,"heat");
#	bdirty:= bbp.getDirty();
#	bDirty:= algebra.join(brev,bdirty);
#	bat.setColumn(bDirty,"dirty");
#	bstatus:= bbp.getDirty();
#	bStatus:= algebra.join(brev,bstatus);
#	bat.setColumn(bStatus,"status");
	bkind:= bbp.getKind();
	bKind:= algebra.join(brev,bkind);
	bat.setColumn(bKind,"kind");
	bref:= bbp.getRefCount();
	bRef:= algebra.join(brev,bref);
	bat.setColumn(bRef,"refcnt");
#	io.table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef);
	io.table(brev, bm, bHead,bTail,bCount, bKind,bRef);
end dir;

function dir(s:str):void;
	io.print("Search directory by name");
	t:= bbp.getNames();
	tn:= algebra.like(t,s);
	io.print(tn);
	user.dir(tn);
end dir;
io.print("start test");
b:=bat.new(:int,:int);
bat.setName(b,"simplemind");

z:= bbp.getNames();
user.dir(z);

user.dir("simple");

