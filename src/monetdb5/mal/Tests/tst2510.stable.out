stdout of test 'tst2510` in directory 'monetdb5/mal` itself:


# 08:01:07 >  
# 08:01:07 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst2510.mal </dev/null
# 08:01:07 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:33756/
## A exception in a factory should terminate it 
#
#factory tryme():bit;
#	b:= bat.new(:oid,:int);
#    bat.setWriteMode(b);
#barrier always:= true;
#    yield always;
#    redo always;
#exit always;
##catch MALException:str;
#    #print("exception");
##exit MALException;
#	return tryme:= false;
#end tryme;
factory user.tryme():bit;
    b := bat.new(:oid,:int);
    bat.setWriteMode(b);
barrier always := true;
    yield tryme := always;
    redo always;
exit always;
#catch MALException:str; 
#print("exception"); 
#exit MALException; 
    return tryme := false;
end tryme;
#user.tryme();    # shouldn;t hang when you forget the exception
#
function user.main():void;
# A exception in a factory should terminate it  
    user.tryme();
# shouldn;t hang when you forget the exception 
end main;

# 08:58:58 >  
# 08:58:58 >  Done.
# 08:58:58 >  

