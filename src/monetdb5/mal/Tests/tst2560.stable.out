stdout of test 'tst2560` in directory 'monetdb5/mal` itself:


# 11:22:26 >  
# 11:22:26 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31608 --set monet_prompt= --trace --dbname=mTests_src_mal  tst2560.mal < /dev/null
# 11:22:26 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
##materialized views example
#r:= bat.new(:void,:int);
#bat.setSequenceBase(r,0@0);
#bat.setRole(r,"emp","age");
#bat.append(r,1);
#bat.append(r,2);
#bat.append(r,3);
#io.print(r);
#s:= bat.new(:void,:str);
#bat.setSequenceBase(s,0@0);
#bat.setRole(s,"emp","name");
#bat.append(s,"A");
#bat.append(s,"B");
#bat.append(s,"C");
#io.print(s);
#
#factory view1(l:int,h:int):bat[:void,:str];
#a:bat[:void,:int] := bbp.bind("emp","age");
#b:bat[:void,:str] := bbp.bind("emp","name");
#barrier always:= true;
#	lOld:= l;
#	hOld:= h;
#	io.print("recalc");
#	c := algebra.select(a,l,h);
#	d := algebra.semijoin(b,c);
#	barrier available:=true;
#		yield d;
#		leave available:= lOld != l;
#		leave available:= hOld != h;
#		io.print("reuse");
#		redo available:=true;
#	exit available;
#	redo always;
#exit always;
#end view1;
factory user.view1(l:int,h:int):bat[:oid,:str];
    a:bat[:oid,:int]  := bbp.bind("emp","age");
    b:bat[:oid,:str]  := bbp.bind("emp","name");
barrier always := true;
    lOld := l;
    hOld := h;
    io.print("recalc");
    c := algebra.select(a,l,h);
    d := algebra.semijoin(b,c);
barrier available := true;
    yield view1 := d;
    leave available := calc.!=(lOld,l);
    leave available := calc.!=(hOld,h);
    io.print("reuse");
    redo available := true;
exit available;
    redo always;
exit always;
    return view1 := nil:bat[:oid,:str];
end view1;
#
#e:= user.view1(0,2);
#io.print(e);
#e:= user.view1(0,2);
#io.print(e);
#e:= user.view1(0,4);
#io.print(e);
#
#
function user.main():void;
#materialized views example 
    r := bat.new(:oid,:int);
    bat.setRole(r,"emp","age");
    bat.append(r,1);
    bat.append(r,2);
    bat.append(r,3);
    io.print(r);
    s := bat.new(:oid,:str);
    bat.setRole(s,"emp","name");
    bat.append(s,"A");
    bat.append(s,"B");
    bat.append(s,"C");
    io.print(s);
    e := user.view1(0,2);
    io.print(e);
    e := user.view1(0,2);
    io.print(e);
    e := user.view1(0,4);
    io.print(e);
    factories.shutdown("user","view1");
end main;
#-----------------#
# emp	age	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
#-----------------#
# emp	name	  # name
# void	str	  # type
#-----------------#
[ 0@0,	  "A"	  ]
[ 1@0,	  "B"	  ]
[ 2@0,	  "C"	  ]
[ "recalc" ]
#-----------------#
# t	h	  # name
# void	str	  # type
#-----------------#
[ 0@0,	  "A"	  ]
[ 1@0,	  "B"	  ]
[ "reuse" ]
#-----------------#
# t	h	  # name
# void	str	  # type
#-----------------#
[ 0@0,	  "A"	  ]
[ 1@0,	  "B"	  ]
[ "recalc" ]
#-----------------#
# h	t	  # name
# void	str	  # type
#-----------------#
[ 0@0,	  "A"	  ]
[ 1@0,	  "B"	  ]
[ 2@0,	  "C"	  ]


# 11:22:26 >  
# 11:22:26 >  Done.
# 11:22:26 >  

