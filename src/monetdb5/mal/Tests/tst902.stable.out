stdout of test 'tst902` in directory 'monetdb5/mal` itself:


# 08:01:33 >  
# 08:01:33 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst902.mal </dev/null
# 08:01:33 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## what is the overhead of MAL in multiplex situations
## using a BATloop !! This is 40x slower as the V4.3 multiplex implementation
#b:= new(:lng,:lng);
#barrier (k,v):= newRange(0:lng);
#	insert(b,v,v);
#	redo (k,v):= nextElement(1:lng,10:lng);
#exit (k,v);
#
#
#c:= copy(b);
#
#d:= new(:lng,:lng);
#barrier (w,h,t):= newIterator(b);
#	B1:= find(b,h);
#	B2:= find(c,h);
#	t:= B1+B2;
#	insert(d,h,t);
#	redo (w,h,t):= hasMoreElements(b);
#catch 	GDKerror;
#exit	GDKerror;
#exit w;
#print(d);
#
function user.main():void;
# what is the overhead of MAL in multiplex situations 
# using a BATloop !! This is 40x slower as the V4.3 multiplex implementation 
    b := bat.new(:oid,:lng);
barrier v := 0:lng;
    bat.append(b,v);
    redo v := iterator.next(1:lng,10:lng);
exit v;
    c := algebra.copy(b);
    d := bat.new(:oid,:lng);
barrier (h,t) := iterator.new(b);
    B1 := algebra.fetch(b,h);
    B2 := algebra.fetch(c,h);
    t := calc.+(B1,B2);
    bat.insert(d,h,t);
    redo (h,t) := iterator.next(b);
catch GDKerror:str ;
exit GDKerror:str ;
exit (h,t);
    io.print(d);
end main;
#-----------------#
# h	tmp_6	  # name
# lng	lng	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  2	  ]
[ 2@0,	  4	  ]
[ 3@0,	  6	  ]
[ 4@0,	  8	  ]
[ 5@0,	  10	  ]
[ 6@0,	  12	  ]
[ 7@0,	  14	  ]
[ 8@0,	  16	  ]
[ 9@0,	  18	  ]

# 08:01:33 >  
# 08:01:33 >  Done.
# 08:01:33 >  

