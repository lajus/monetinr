stdout of test 'recycle13` in directory 'monetdb5/mal` itself:


# 15:18:01 >  
# 15:18:01 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch1/milena/monet.DBG/var/MonetDB5/dbfarm" --set "sql_logdir=/export/scratch1/milena/monet.DBG/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=31726 --set xrpc_port=43645 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle13.mal
# 15:18:01 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:33756/
##test the basics of the recycler
## testing toll-based retention
#
#function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
#	b:= bat.new(:oid,:int);
#	bat.insert(b,0@0,0);
#	bat.insert(b,1@0,1);
#	bat.insert(b,2@0,2);
#	bat.insert(b,3@0,3);
#	bat.insert(b,4@0,4);
#	bat.insert(b,5@0,5);
#	bat.insert(b,6@0,6);
#	bat.insert(b,7@0,7);
#	bat.insert(b,8@0,8);
#	bat.insert(b,9@0,9);
#	bat.insert(b,10@0,10);
#	bat.insert(b,11@0,11);
#	return bind:=b;
#end bind;
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
    b := bat.new(:oid,:int);
    bat.insert(b,0@0,0);
    bat.insert(b,1@0,1);
    bat.insert(b,2@0,2);
    bat.insert(b,3@0,3);
    bat.insert(b,4@0,4);
    bat.insert(b,5@0,5);
    bat.insert(b,6@0,6);
    bat.insert(b,7@0,7);
    bat.insert(b,8@0,8);
    bat.insert(b,9@0,9);
    bat.insert(b,10@0,10);
    bat.insert(b,11@0,11);
    return bind := b;
end bind;
#
#function qry(low:int, hgh:int);
#    b:= user.bind("schema","table","column",0);
#    s1:= algebra.select(b,low,hgh);
#    m0:= algebra.markT(s1, 0@0);
#    mr:= bat.reverse(m0);
#    j:= algebra.join(mr,s1);
#end qry;
function user.qry(low:int,hgh:int):void;
    b := user.bind("schema","table","column",0);
    s1 := algebra.select(b,low,hgh);
    m0 := algebra.markT(s1,0@0);
    mr := bat.reverse(m0);
    j := algebra.join(mr,s1);
end qry;
#                        
##inter-query commonality
#function qry1(val:int);
#    b:= user.bind("schema","table","column1",0);
#    s1:= algebra.select(b,val);
#    io.print(s1);
#end qry1;
function user.qry1(val:int):void;
    b := user.bind("schema","table","column1",0);
    s1 := algebra.select(b,val);
    io.print(s1);
end qry1;
#
#recycle.setRetainPolicy(3);
#recycle.setReusePolicy(1);
#recycle.setCachePolicy(1,5);
#optimizer.recycle("user","qry");
#optimizer.recycle("user","qry1");
#
#qry1(2);
#qry1(5);
#qry1(7);
#
## selection is not reused: it is added maximum (MAX_INTEREST-Min_INTEREST = 3) number of times
#recycle.dump();
#io.print("3 select instances");
#
##the following call does not add the select to RP, its tolls are finished
#qry1(10);
#recycle.dump();
#io.print("still 3 select instances, tolls are finished");
#
##new execution can still re-use some of the existing instances in the RP
#qry1(5);
#recycle.dump();
#io.print("reuse of instruction #2 even when tolls are finished");
#
##next call evicts all instructions from qry1 returning the tolls to the
##reused ones
#qry(1,5);
#recycle.dump();
#io.print("all instructions from qry1 evicted");
#
## new call adds the instructions with tolls back to RP
#qry1(10);
#recycle.dump();
#io.print("qry1 reused instructions added again");
#
function user.main():void;
#test the basics of the recycler 
# testing toll-based retention 
#inter-query commonality 
    recycle.setAdmPolicy(3);
    recycle.setReusePolicy(1);
    recycle.setCachePolicy(1,5);
    user.qry1(2);
    user.qry1(5);
    user.qry1(7);
# selection is not reused: it is added maximum (MAX_INTEREST-Min_INTEREST = 3) number of times 
    recycle.dump();
    io.print("3 select instances");
#the following call does not add the select to RP, its tolls are finished 
    user.qry1(10);
    recycle.dump();
    io.print("still 3 select instances, tolls are finished");
#new execution can still re-use some of the existing instances in the RP 
    user.qry1(5);
    recycle.dump();
    io.print("reuse of instruction #2 even when tolls are finished");
#next call evicts all instructions from qry1 returning the tolls to the 
#reused ones 
    user.qry(1,5);
    recycle.dump();
    io.print("all instructions from qry1 evicted");
# new call adds the instructions with tolls back to RP 
    user.qry1(10);
    recycle.dump();
    io.print("qry1 reused instructions added again");
end main;
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 2@0,	  2	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 5@0,	  5	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 7@0,	  7	  ]
#Recycler  catalog
#retain= 3 time =0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 5 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 2 incache= 4 executed = 72 memory(KB)= 4 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	889073	3	68	1	1	    _0 := user.bind("schema","table","column1",0,2);
#        1	889017	1	44	1	1	    _6 := algebra.select(<tmp_20>,2,3);
#        2	889059	1	16	1	1	    _8 := algebra.select(<tmp_20>,5,3);
#        3	889090	1	16	1	1	    _10 := algebra.select(<tmp_20>,7,3);
[ "3 select instances" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  10	  ]
#Recycler  catalog
#retain= 3 time =0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 5 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 3 incache= 4 executed = 82 memory(KB)= 4 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	889160	4	68	1	1	    _0 := user.bind("schema","table","column1",0,2);
#        1	889017	1	44	1	1	    _6 := algebra.select(<tmp_20>,2,3);
#        2	889059	1	16	1	1	    _8 := algebra.select(<tmp_20>,5,3);
#        3	889090	1	16	1	1	    _10 := algebra.select(<tmp_20>,7,3);
[ "still 3 select instances, tolls are finished" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 5@0,	  5	  ]
#Recycler  catalog
#retain= 3 time =0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 5 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 5 incache= 4 executed = 92 memory(KB)= 4 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	889234	5	68	1	1	    _0 := user.bind("schema","table","column1",0,2);
#        1	889017	1	44	1	1	    _6 := algebra.select(<tmp_20>,2,3);
#        2	889235	2	16	1	1	    _8 := algebra.select(<tmp_20>,5,3);
#        3	889090	1	16	1	1	    _10 := algebra.select(<tmp_20>,7,3);
[ "reuse of instruction #2 even when tolls are finished" ]
#Recycler  catalog
#retain= 3 time =0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 5 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 5 incache= 5 executed = 119 memory(KB)= 5 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	889327	1	35	1	1	    _6 := user.bind("schema","table","column",0,2);
#        1	889354	1	27	1	1	    _8 := algebra.select(<tmp_24>,1,5,3);
#        2	889381	1	27	1	1	    _10 := algebra.markT(<tmp_25>,0@0,4);
#        3	889397	1	16	1	1	    _13 := bat.reverse(<tmp_26>,5);
#        4	889463	1	66	1	1	    _14 := algebra.join(<~tmp_26>,<tmp_25>,6);
[ "all instructions from qry1 evicted" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  10	  ]
#Recycler  catalog
#retain= 3 time =0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 5 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 5 incache= 5 executed = 143 memory(KB)= 5 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	889327	1	35	1	1	    _6 := user.bind("schema","table","column",0,2);
#        1	889354	1	27	1	1	    _8 := algebra.select(<tmp_24>,1,5,3);
#        2	889381	1	27	1	1	    _10 := algebra.markT(<tmp_25>,0@0,4);
#        3	889568	1	41	1	1	    _13 := user.bind("schema","table","column1",0,2);
#        4	889584	1	16	1	1	    _15 := algebra.select(<tmp_20>,10,3);
[ "qry1 reused instructions added again" ]

# 15:18:01 >  
# 15:18:01 >  Done.
# 15:18:01 >  

