# what is the overhead of MAL in multiplex situations
# using a BATloop !! This is 40x slower as the V4.3 multiplex implementation
#profiler.setAll();
#profiler.setLogFile("/tmp/MonetProfile.xml");
b:= bat.new(:oid,:lng);

INT_MAX := 2147483647;
dbgmsk_restore := mdb.getDebug();
dbgmsk_unset := 8+8388608;
dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
mdb.setDebug(dbgmsk_set);

t0:= alarm.usec();
barrier i:= 0:lng;
	o:= calc.oid(i);
	bat.insert(b,o,i);
	redo i:= iterator.next(1:lng,1000000:lng);
exit i;
t1:= alarm.usec();

mdb.setDebug(dbgmsk_restore);

c:= algebra.copy(b);

mdb.setDebug(dbgmsk_set);

t2:= alarm.usec();
d:= bat.new(:oid,:lng);
barrier (h,t):= iterator.new(b);
        zz:= algebra.fetch(b,h);
        z:= algebra.fetch(c,h);
	cr:= zz+z;
	bat.insert(d,h,cr);
catch GDKerror:str;
	leave h;
exit GDKerror;
	redo (h,t):= iterator.next(b);
exit (h,t);
t3:= alarm.usec();

mdb.setDebug(dbgmsk_restore);

#CMD000(b,b);
t4:= alarm.usec();
d1:= t1-t0;
d2:= t3-t2;
d3:= t4-t3;
cnt:= aggr.count(d);
io.printf("#cnt %d ",cnt);
io.printf("#make %d ",d1);
io.printf("#multiplex %d\n",d2);
io.printf("#compiled multiplex %d\n",d3);
#profiler.stop();
