# The first MAL compiler test
# the result is retained in MCCtst903.c
# which can be compiled and linked with the system.


function tst903();
    t0:= alarm.usec();
    b:= new(:void,:lng);
    barrier (go,i):= mal.newRange(0:lng);
        k:= rand();
        l:= lng(k);
        insert(b,nil,l);
        redo (go,i):= mal.nextElement(1:lng,1000000:lng);
    exit (go,i);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#loop %d",d0);
    #setReadMode(b);
    mx:= algebra.max(b); 
    #io.printf("max %d",mx);
    mi:= algebra.min(b); 
    #io.printf(" min %d\n",mi);
    t0:= alarm.usec();
    c:= algebra.copy(b);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#copy %d",d0);
    cnt:= aggr.count(c);
    io.printf("#aggr.count %d\n",cnt);
    t0:= alarm.usec();
    z:= algebra.select(b,25:lng,25:lng);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#algebra.select none %d",d0);
    cnt:= aggr.count(z);
    io.printf(" aggr.count %d\n",cnt);
    t0:= alarm.usec();
    z2:= algebra.select(b,mi,mx);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#algebra.select all %d",d0);
    cnt:= aggr.count(z2);
    io.printf(" aggr.count %d\n",cnt);
    rng:= mx-mi;
    r2:= rng/20;
    r3:= mi+r2;
    t0:= alarm.usec();
    z3:= algebra.select(b,mi,r3);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#algebra.select 0.05 %d",d0);
    cnt:= aggr.count(z3);
    io.printf(" aggr.count %d\n",cnt);
    r2:= rng/10;
    r3:= mi+r2;
    t0:= alarm.usec();
    z4:= algebra.select(b,mi,r3);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#algebra.select 0.1 %d",d0);
    cnt:= aggr.count(z4);
    io.printf(" aggr.count %d\n",cnt);
    r2:= rng/5;
    r3:= mi+r2;
    t0:= alarm.usec();
    z5:= algebra.select(b,mi,r3);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#algebra.select 0.2 %d",d0);
    cnt:= aggr.count(z5);
    io.printf(" aggr.count %d\n",cnt);
    r3:= r3+r2;
    t0:= alarm.usec();
    z6:= algebra.select(b,mi,r3);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#algebra.select 0.4 %d",d0);
    cnt:= aggr.count(z6);
    io.printf(" aggr.count %d\n",cnt);
    r3:= r3+r2;
    t0:= alarm.usec();
    z7:= algebra.select(b,mi,r3);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#algebra.select 0.6 %d",d0);
    cnt:= aggr.count(z7);
    io.printf(" aggr.count %d\n",cnt);
    r3:= r3+r2;
    t0:= alarm.usec();
    z8:= algebra.select(b,mi,r3);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#algebra.select 0.8 %d",d0);
    cnt:= aggr.count(z8);
    io.printf(" aggr.count %d\n",cnt);
    r3:= r3+r2;
    t0:= alarm.usec();
    z9:= algebra.select(b,mi,r3);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#algebra.select 1.0 %d",d0);
    cnt:= aggr.count(z9);
    io.printf(" aggr.count %d\n",cnt);
    t0:= alarm.usec();
    sr:= bat.reverse(b);
    s:= algebra.sort(sr);
    t1:= alarm.usec();
    d0:= t1-t0;
    io.printf("#tail algebra.sort %d",d0);
end tst903;

Mcc("user","tst903");
