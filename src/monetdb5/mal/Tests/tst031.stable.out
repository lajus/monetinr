stdout of test 'tst031` in directory 'monetdb5/mal` itself:


# 07:58:41 >  
# 07:58:41 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst031.mal </dev/null
# 07:58:41 >  

# MonetDB server v5.5.0, based on kernel v1.23.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:30373/
## testing the void semantics, both replace and delete fail (void != oid)
#b:= bat.new(:void,:int);
#bat.append(b,0);
#bat.append(b,1);
#bat.append(b,2);
#io.print(b);
##k:= 1@0;
##bat.replace(b,k,3);
##io.print(b);
##bat.delete(b,2@0);
##io.print(b);
#
## The oid cases, they should start as a vid column, both replace and delete work
#io.print("oid as a vid column");
#c:= bat.new(:oid,:int);
#bat.insert(c,0@0,0);
#bat.insert(c,1@0,1);
#bat.insert(c,2@0,2);
#io.print(c);
#k:= 1@0;
#bat.replace(c,k,3);
#io.print(c);
#bat.delete(c,2@0);
#io.print(c);
#
## The oid cases using nils should fail on replace /delete
#io.print("inserting nil's in a oid column");
#d:= bat.new(:oid,:int);
#bat.insert(d,nil:oid,0);
#bat.insert(d,nil:oid,1);
#bat.insert(d,nil:oid,2);
#io.print(d);
#k:= 1@0;
#bat.replace(d,k,3);
#io.print(d);
#bat.delete(d,2@0);
#io.print(d);
#
## can we handle a vid column starting differently
#io.print("double oid as a vid column starting at 3,5");
#e:= bat.new(:oid,:oid);
#bat.insert(e,3@0,5@0);
#bat.append(e,6@0);
#io.print(e);
#
## the void,void bat they still consume space
## shouldn't that be avoided or limited to at most 1 pair?
#io.print("void,void bat");
#f:= bat.new(:void,:void);
#bat.insert(f,nil:void,nil:void);
#bat.insert(f,nil:void,nil:void);
#io.print(f);
#
#
function user.main():void;
# testing the void semantics, both replace and delete fail (void != oid) 
    b := bat.new(:oid,:int);
    bat.append(b,0);
    bat.append(b,1);
    bat.append(b,2);
    io.print(b);
#k:= 1@0; 
#bat.replace(b,k,3); 
#io.print(b); 
#bat.delete(b,2@0); 
#io.print(b); 
# The oid cases, they should start as a vid column, both replace and delete work 
    io.print("oid as a vid column");
    c := bat.new(:oid,:int);
    bat.insert(c,0@0,0);
    bat.insert(c,1@0,1);
    bat.insert(c,2@0,2);
    io.print(c);
    k := 1@0;
    bat.replace(c,k,3);
    io.print(c);
    bat.delete(c,2@0);
    io.print(c);
# The oid cases using nils should fail on replace /delete 
    io.print("inserting nil's in a oid column");
    d := bat.new(:oid,:int);
    bat.insert(d,nil:oid,0);
    bat.insert(d,nil:oid,1);
    bat.insert(d,nil:oid,2);
    io.print(d);
    k := 1@0;
    bat.replace(d,k,3);
    io.print(d);
    bat.delete(d,2@0);
    io.print(d);
# can we handle a vid column starting differently 
    io.print("double oid as a vid column starting at 3,5");
    e := bat.new(:oid,:oid);
    bat.insert(e,3@0,5@0);
    bat.append(e,6@0);
    io.print(e);
# the void,void bat they still consume space 
# shouldn't that be avoided or limited to at most 1 pair? 
    io.print("void,void bat");
    f := bat.new(:oid,:oid);
    bat.insert(f,nil:oid,nil:oid);
    bat.insert(f,nil:oid,nil:oid);
    io.print(f);
end main;
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ "oid as a vid column" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  3	  ]
[ 2@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  3	  ]
[ "inserting nil's in a oid column" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ "double oid as a vid column starting at 3,5" ]
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
[ 3@0,	  5@0	  ]
[ 4@0,	  6@0	  ]
[ "void,void bat" ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ nil,	  nil	  ]
[ nil,	  nil	  ]

# 07:58:41 >  
# 07:58:41 >  Done.
# 07:58:41 >  

