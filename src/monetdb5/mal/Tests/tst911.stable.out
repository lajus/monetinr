stdout of test 'tst911` in directory 'monetdb5/mal` itself:


# 08:01:40 >  
# 08:01:40 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst911.mal </dev/null
# 08:01:40 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## analyse the overhead of chopping a table
## the multiplex code blocks.
#
#function choptest(b:bat[:void,:lng], size:lng, base:lng);
#    t0:= alarm.usec();
#    barrier (chk,c):= newChunkIterator(b,size);
#        t:= select(c, 256000:lng,266000:lng);
#        redo (chk,c):= hasMoreChunks(b,size);
#    exit (chk,c);
#
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    printf("#chopped at %d",size);
#    printf(" %d",d0);
#    d0:= d0-base;
#    printf(" %d ",d0);
#    i:= 1000000:lng/size;
#    if:= flt(i);
#    df:= flt(d0);
#    f:= df/if;
#    printf(" at %f usec\n",f);
#end choptest;
function user.choptest(b:bat[:oid,:lng],size:lng,base:lng):void;
    t0 := alarm.usec();
    INT_MAX := 2147483647;
    dbgmsk_restore := mdb.getDebug();
    dbgmsk_unset := calc.+(8,8388608);
    dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
    dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
    mdb.setDebug(dbgmsk_set);
barrier (chk,c) := iterator.new(b,size);
    t := algebra.select(c,256000:lng,266000:lng);
    redo (chk,c) := iterator.next(b,size);
exit (chk,c);
    mdb.setDebug(dbgmsk_restore);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#chopped at %d",size);
    io.printf(" %d",d0);
    d0 := calc.-(d0,base);
    io.printf(" %d ",d0);
    i := calc./(1000000:lng,size);
    if := calc.flt(i);
    df := calc.flt(d0);
    f := calc./(df,if);
    io.printf(" at %f usec\n",f);
end choptest;
#
#b:= bat.new(:oid,:lng);
#barrier (go,i):= language.newRange(0:lng);
#	k:= mmath.rand();
#	l:= calc.lng(k);
#	bat.insert(b,nil:oid,l);
#	redo (go,i):= language.nextElement(1:lng,1000000:lng);
#exit (go,i);
#
#t0:= alarm.usec();
#barrier doit:= true;
#    t:= select(b, 256000:lng,266000:lng);
#exit doit;
#t1:= alarm.usec();
#base:= t1-t0;
#printf("#select direct %d usec\n",base);
#
#choptest(b,100000:lng,base);
#choptest(b,10000:lng,base);
#choptest(b,1000:lng,base);
#choptest(b,100:lng,base);
#
#user.choptest(b,100000:lng,base);
#user.choptest(b,10000:lng,base);
#user.choptest(b,1000:lng,base);
#user.choptest(b,100:lng,base);
#
function user.main():void;
# analyse the overhead of chopping a table 
# the multiplex code blocks. 
    b := bat.new(:oid,:lng);
    INT_MAX := 2147483647;
    dbgmsk_restore := mdb.getDebug();
    dbgmsk_unset := calc.+(8,8388608);
    dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
    dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
    mdb.setDebug(dbgmsk_set);
    r := mmath.srand(0);
barrier i := 0:lng;
    k := mmath.rand();
    l := calc.lng(k);
    bat.insert(b,nil:oid,l);
    redo i := iterator.next(1:lng,1000000:lng);
exit i;
    mdb.setDebug(dbgmsk_restore);
    t0 := alarm.usec();
barrier doit := true;
    t := algebra.select(b,256000:lng,266000:lng);
exit doit;
    t1 := alarm.usec();
    base := calc.-(t1,t0);
    io.printf("#select direct %d usec\n",base);
    user.choptest(b,100000:lng,base);
    user.choptest(b,10000:lng,base);
    user.choptest(b,1000:lng,base);
    user.choptest(b,100:lng,base);
end main;
#select direct 9156 usec
#BATdescriptor: range error 11
#chopped at 100000 9220 64  at 6.400000 usec
#BATdescriptor: range error 13
#chopped at 10000 10632 1476  at 14.760000 usec
#BATdescriptor: range error 12
#chopped at 1000 18472 9316  at 9.316000 usec
#BATdescriptor: range error 11
#chopped at 100 49521 40365  at 4.036500 usec

# 08:01:41 >  
# 08:01:41 >  Done.
# 08:01:41 >  

