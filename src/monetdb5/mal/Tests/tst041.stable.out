stdout of test 'tst041` in directory 'monetdb5/mal` itself:


# 07:58:44 >  
# 07:58:44 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst041.mal </dev/null
# 07:58:44 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## this sequence tests nil type management 
#b:=nil;	print(b);
#
#a:=23;	io.print(a);
#a:= calc.int(nil);	io.print(a);
#a:= calc.int(nil:int);	io.print(a);
#a:= calc.int(13);	io.print(a);
#a:= calc.int("23");	io.print(a);
#a:= calc.int(43.0:flt);	io.print(a);
#a:= calc.int(63.0:dbl);	io.print(a);
#a:= nil:int; io.print(a);
#
#c:= true;	io.print(c);
#c:= calc.bit(nil);	io.print(c);
#c:= calc.bit(nil:bit);	io.print(c);
#c:= calc.bit(false);	io.print(c);
#c:= calc.bit(1);	io.print(c);
#c:= calc.bit("true");	io.print(c);
#c:= calc.bit(1.0:flt);	io.print(c);
#c:= calc.bit(0.0:dbl);	io.print(c);
#c:= nil:bit; io.print(c);
#
#d:= 3.14:flt;	io.print(d);
#d:= calc.flt(nil);	io.print(d);
#d:= calc.flt(nil:flt);	io.print(c);
#d:= calc.flt(5);	io.print(d);
#d:= calc.flt("7.14");	io.print(d);
#d:= nil:flt; io.print(d);
#
#e:= "hello";	io.print(e);
#e:= calc.str(nil);	io.print(e);
#e:= calc.str("nil");	io.print(e);
#e:= nil:str; io.print(e);
#io.print(nil:str);
#
#f:= 'Z';	io.print(f);
#f:= calc.chr(nil);	io.print(f);
#f:= calc.chr("X");	io.print(f);
#
#o:= nil:blob;
#io.print(o);
#o:= calc.blob(nil:blob);
#io.print(o);
#
#w:= nil:wrd;
#io.print(w);
#
#B:= nil:bte;
#io.print(B);
#
function user.main():void;
# this sequence tests nil type management  
    b := nil;
    io.print(b);
    a := 23;
    io.print(a);
    a := calc.int(nil);
    io.print(a);
    a := calc.int(nil:int);
    io.print(a);
    a := calc.int(13);
    io.print(a);
    a := calc.int("23");
    io.print(a);
    a := calc.int(43:flt);
    io.print(a);
    a := calc.int(63:dbl);
    io.print(a);
    a := nil:int;
    io.print(a);
    c := true;
    io.print(c);
    c := calc.bit(nil);
    io.print(c);
    c := calc.bit(nil:bit);
    io.print(c);
    c := calc.bit(false);
    io.print(c);
    c := calc.bit(1);
    io.print(c);
    c := calc.bit("true");
    io.print(c);
    c := calc.bit(1:flt);
    io.print(c);
    c := calc.bit(0:dbl);
    io.print(c);
    c := nil:bit;
    io.print(c);
    d := 3.1400001:flt;
    io.print(d);
    d := calc.flt(nil);
    io.print(d);
    d := calc.flt(nil:flt);
    io.print(c);
    d := calc.flt(5);
    io.print(d);
    d := calc.flt("7.14");
    io.print(d);
    d := nil:flt;
    io.print(d);
    e := "hello";
    io.print(e);
    e := calc.str(nil);
    io.print(e);
    e := calc.str("nil");
    io.print(e);
    e := nil:str;
    io.print(e);
    io.print(nil:str);
    o := nil:blob;
    io.print(o);
    o := calc.blob(nil:blob);
    io.print(o);
    w := nil:wrd;
    io.print(w);
    B := nil:bte;
    io.print(B);
end main;
[ nil ]
[ 23 ]
[ nil ]
[ nil ]
[ 13 ]
[ 23 ]
[ 43 ]
[ 63 ]
[ nil ]
[ true ]
[ nil ]
[ nil ]
[ false ]
[ true ]
[ true ]
[ true ]
[ false ]
[ nil ]
[ 3.1400001 ]
[ nil ]
[ nil ]
[ 5 ]
[ 7.13999987 ]
[ nil ]
[ "hello" ]
[ nil ]
[ "nil" ]
[ nil ]
[ nil ]
[ nil ]
[ nil ]
[ nil ]
[ nil ]

# 07:58:44 >  
# 07:58:44 >  Done.
# 07:58:44 >  

