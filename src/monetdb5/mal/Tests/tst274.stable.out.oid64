stdout of test 'tst274` in directory 'monetdb5/mal` itself:


# 17:57:28 >  
# 17:57:28 >   mserver5 "--config=/ufs/mk/current//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/current//Linux/lib/MonetDB5:/ufs/mk/current//Linux/lib/MonetDB5/lib:/ufs/mk/current//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/current//Linux/var/MonetDB5/dbfarm"  --set mapi_open=true --set xrpc_open=true --set mapi_port=38637 --set xrpc_port=40729 --set monet_prompt= --set mal_listing=2 --trace  --dbname=mTests_src_mal  tst274.mal
# 17:57:28 >  

# MonetDB server v5.21.0, based on kernel v1.39.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.751 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:38637/
# MonetDB/SQL module v2.39.0 loaded
# MonetDB/GIS module v0.19.0 loaded
function user.main():void;
# the multiplex code blocks. 
#watch out, the random generator on SUN has a limited range. 
    r := mmath.srand(0);
    t0 := alarm.usec();
    b := bat.new(:oid,:lng);
barrier i := 0:lng;
    k := mmath.rand();
    l := calc.lng(k);
    bat.insert(b,nil:oid,l);
    redo i := iterator.next(1:lng,10000:lng);
exit i;
    profiler.activate("ticks");
    profiler.activate("stmt");
    profiler.activate("rbytes");
    profiler.activate("wbytes");
    profiler.setAll();
    profiler.start();
    io.printf("#monitor \n");
    mx := aggr.max(b);
    mx := calc.+(mx,1);
#enforce an empty set later on 
    k1 := algebra.select(b,nil:lng,mx);
    k2 := algebra.select(b,mx,nil:lng);
    d := mmath.sin(0.20000000298023224:dbl);
    profiler.stop();
    stmt := profiler.getTrace("stmt");
#io.print(stmt); 
    c := aggr.count(stmt);
    io.print(c);
    ticks := profiler.getTrace("ticks");
#io.print(ticks); 
    c := aggr.count(ticks);
    io.print(c);
    rdbytes := profiler.getTrace("rbytes");
    io.print(rdbytes);
    wrbytes := profiler.getTrace("wbytes");
    io.print(wrbytes);
    io.print(rdbytes,wrbytes);
end main;
#monitor 
[ 7 ]
[ 7 ]
#-----------------#
# h	t	  # name
# void	lng	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  0	  ]
[ 2@0,	  0	  ]
[ 3@0,	  0	  ]
[ 4@0,	  0	  ]
[ 5@0,	  0	  ]
[ 6@0,	  0	  ]
#-----------------#
# h	t	  # name
# void	lng	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  160000  ]
[ 2@0,	  0	  ]
[ 3@0,	  0	  ]
[ 4@0,	  160000  ]
[ 5@0,	  160000  ]
[ 6@0,	  0	  ]
#-------------------------#
# h	t	t	  # name
# void	lng	lng	  # type
#-------------------------#
[ 0@0,	  0,	  0	  ]
[ 1@0,	  0,	  160000  ]
[ 2@0,	  0,	  0	  ]
[ 3@0,	  0,	  0	  ]
[ 4@0,	  0,	  160000  ]
[ 5@0,	  0,	  160000  ]
[ 6@0,	  0,	  0	  ]

# 17:57:29 >  
# 17:57:29 >  Done.
# 17:57:29 >  

