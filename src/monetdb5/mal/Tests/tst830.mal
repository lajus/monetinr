# a simple functional test for the access control table

	# this should fail, the monetdb user is already there
	pw := clients.backendsum("Pmonetdb");
	id := clients.addUser("monetdb", pw);
catch MALException:str;
	io.printf("%s\n",MALException);
exit MALException;

	# should print 1@0 or something
	id := clients.addUser("test", pw);
	io.print(id);

	# this should work also
	id := clients.addUser("checkpoint", pw);
	io.print(id);

	# do a simple listing of users known
	u := clients.getUsers();
	io.print(u);

	# should work, we're the admin here
	clients.removeUser("checkpoint");

	# do a simple listing of users known
	u := clients.getUsers();
	io.print(u);

	# forcefully set the password of the user test
	clients.setPassword("test", pw);
	# now try to set the password for ourself, should fail
	clients.setPassword("monetdb", pw);
catch InvalidCredentialsException:str;
	io.printf("%s\n", InvalidCredentialsException);
exit InvalidCredentialsException;

	# change our own password
	mypw := clients.backendsum("monetdb");
	clients.changePassword(mypw, pw);
	# try it again, should fail...
	clients.changePassword(mypw, pw);
catch InvalidCredentialsException:str;
	io.printf("%s\n",InvalidCredentialsException);
	InvalidCredentialsException:= nil:str;
exit InvalidCredentialsException;

	# all should fail
	clients.checkPermission("monetdb","Pmonetdb");
catch InvalidCredentialsException:str;
	io.printf("%s\n",InvalidCredentialsException);
	InvalidCredentialsException:= nil:str;
exit InvalidCredentialsException;
	clients.checkPermission("monetdb","x");
catch InvalidCredentialsException:str;
	io.printf("%s\n",InvalidCredentialsException);
	InvalidCredentialsException:= nil:str;
exit InvalidCredentialsException;
	clients.checkPermission("x","Pmonetdb");
catch InvalidCredentialsException:str;
	io.printf("%s\n",InvalidCredentialsException);
	InvalidCredentialsException:= nil:str;
exit InvalidCredentialsException;
