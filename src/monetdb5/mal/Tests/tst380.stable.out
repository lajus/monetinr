stdout of test 'tst380` in directory 'monetdb5/mal` itself:


# 18:09:04 >  
# 18:09:04 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=38549 --set sql_port=46517 --set xquery_port=55807 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst380.mal < /dev/null
# 18:09:04 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2006, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##inspection of the runtime setting
##it uses the dynamic type analysis scheme
#
## type error when the type variable numbers are ignored
#function get(br:bat[:any_1,:any_2],nme:str, title:str):bat[:any_3,:any_4];
#	b:bat[:int,:str] := bbp.nme();
#	z:= algebra.join(br,b);
#	bat.setColumn(z,title);
#	return z;
#end get;
function user.get(br:bat[:any_1,:any_2],nme:str,title:str):bat[:any_3,:any_4];	# 0  dynamic (get:bat[:any_3,:any_4])<-(br:bat[:any_1,:any_2])(nme:str)(title:str)
    b:bat[:int,:str]  := bbp.nme();	# 1  (b:bat[:int,:str])
    z := algebra.join(br,b);	# 2 ALGjoin (z:bat[:any,:str])<-(br:bat[:any_1,:any_2])(b:bat[:int,:str])
    bat.setColumn(z,title);	# 3 BKCsetColumn (_6:void)<-(z:bat[:any,:str])(title:str)
    return z;	# 4  (z:bat[:any,:str])
end get;	# 5  
## Note the type of the variables will be fixed during the first call
#function dir(b:bat[:int,:str]):void;
#	atm:= inspect.getAtomNames();
#	brev:= bat.reverse(b);
#	bm := bat.mirror(brev);
#	b1:bat[:int,:str] := bbp.getHeadType();
#	bHead:= algebra.join(brev,b1);
#	bat.setColumn(bHead,"htype");
#
#	b2:bat[:int,:str] := bbp.getTailType();
#	bTail:= algebra.join(brev,b2);
#	bat.setColumn(bTail,"ttype");
#
#	b8:bat[:int,:lng] := bbp.getCount();
#	bCount:= algebra.join(brev,b8);
#	bat.setColumn(bCount,"count");
#
#	b7:bat[:int,:int] := bbp.getHeat();
#	bHeat:= algebra.join(brev,b7);
#	bat.setColumn(bHeat,"heat");
#
#	b3:bat[:int,:str] := bbp.getDirty();
#	bDirty:= algebra.join(brev,b3);
#	bat.setColumn(bDirty,"dirty");
#
#	b4:bat[:int,:str] := bbp.getStatus();
#	bStatus:= algebra.join(brev,b4);
#	bat.setColumn(bStatus,"status");
#
#	b5:bat[:int,:str] := bbp.getKind();
#	bKind:= algebra.join(brev,b5);
#	bat.setColumn(bKind,"kind");
#
#	b6:bat[:int,:int] := bbp.getRefCount();
#	bRef:= algebra.join(brev,b6);
#	bat.setColumn(bRef,"refCount");
#
#	io.table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef);
#end dir;
function user.dir(b:bat[:int,:str]):void;	# 0  (dir:void)<-(b:bat[:int,:str])
    atm := inspect.getAtomNames();	# 1 INSPECTatom_names (atm:bat[:int,:str])
    brev := bat.reverse(b);	# 2 BKCreverse (brev:bat[:str,:int])<-(b:bat[:int,:str])
    bm := bat.mirror(brev);	# 3 BKCmirror (bm:bat[:str,:str])<-(brev:bat[:str,:int])
    b1:bat[:int,:str]  := bbp.getHeadType();	# 4 CMDbbpHeadType (b1:bat[:int,:str])
    bHead := algebra.join(brev,b1);	# 5 ALGjoin (bHead:bat[:str,:str])<-(brev:bat[:str,:int])(b1:bat[:int,:str])
    bat.setColumn(bHead,"htype");	# 6 BKCsetColumn (_7:void)<-(bHead:bat[:str,:str])(_8:str)
    b2:bat[:int,:str]  := bbp.getTailType();	# 7 CMDbbpTailType (b2:bat[:int,:str])
    bTail := algebra.join(brev,b2);	# 8 ALGjoin (bTail:bat[:str,:str])<-(brev:bat[:str,:int])(b2:bat[:int,:str])
    bat.setColumn(bTail,"ttype");	# 9 BKCsetColumn (_11:void)<-(bTail:bat[:str,:str])(_12:str)
    b8:bat[:int,:lng]  := bbp.getCount();	# 10 CMDbbpCount (b8:bat[:int,:lng])
    bCount := algebra.join(brev,b8);	# 11 ALGjoin (bCount:bat[:str,:lng])<-(brev:bat[:str,:int])(b8:bat[:int,:lng])
    bat.setColumn(bCount,"count");	# 12 BKCsetColumn (_15:void)<-(bCount:bat[:str,:lng])(_16:str)
#debug flag setting dependent 	# 13  (_17:str)
#	b7:bat[:int,:int] := bbp.getHeat(); 	# 14  (_18:str)
#	bHeat:= algebra.join(brev,b7); 	# 15  (_19:str)
#	bat.setColumn(bHeat,"heat"); 	# 16  (_20:str)
#	b3:bat[:int,:str] := bbp.getDirty(); 	# 17  (_21:str)
#	bDirty:= algebra.join(brev,b3); 	# 18  (_22:str)
#	bat.setColumn(bDirty,"dirty"); 	# 19  (_23:str)
#	b4:bat[:int,:str] := bbp.getStatus(); 	# 20  (_24:str)
#	bStatus:= algebra.join(brev,b4); 	# 21  (_25:str)
#	bat.setColumn(bStatus,"status"); 	# 22  (_26:str)
    b5:bat[:int,:str]  := bbp.getKind();	# 23 CMDbbpKind (b5:bat[:int,:str])
    bKind := algebra.join(brev,b5);	# 24 ALGjoin (bKind:bat[:str,:str])<-(brev:bat[:str,:int])(b5:bat[:int,:str])
    bat.setColumn(bKind,"kind");	# 25 BKCsetColumn (_29:void)<-(bKind:bat[:str,:str])(_30:str)
    b6:bat[:int,:int]  := bbp.getRefCount();	# 26 CMDbbpRefCount (b6:bat[:int,:int])
    bRef := algebra.join(brev,b6);	# 27 ALGjoin (bRef:bat[:str,:int])<-(brev:bat[:str,:int])(b6:bat[:int,:int])
    bat.setColumn(bRef,"refCount");	# 28 BKCsetColumn (_33:void)<-(bRef:bat[:str,:int])(_34:str)
#	io.table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef); 	# 29  (_35:str)
    io.table(brev,bm,bHead,bTail,bCount,bKind,bRef);	# 30 IOttable (_36:void)<-(brev:bat[:str,:int])(bm:bat[:str,:str])(bHead:bat[:str,:str])(bTail:bat[:str,:str])(bCount:bat[:str,:lng])(bKind:bat[:str,:str])(bRef:bat[:str,:int])
end dir;	# 31  
#
#function dir(s:str):void;
#	t:= bbp.getNames();
#	tn:= algebra.like(t,s);
#	io.print(tn);
#	user.dir(tn);
#end dir;
function user.dir(s:str):void;	# 0  (dir:void)<-(s:str)
    t := bbp.getNames();	# 1 CMDbbpNames (t:bat[:int,:str])
    tn := algebra.like(t,s);	# 2 ALGlike (tn:bat[:int,:str])<-(t:bat[:int,:str])(s:str)
    io.print(tn);	# 3 IOprint_val (_4:void)<-(tn:bat[:int,:str])
    user.dir(tn);	# 4  (_5:void)<-(tn:bat[:int,:str])
end dir;	# 5  
#b:= bat.new(:int,:int);
#bat.setName(b,"simplemind");
#
#z:= bbp.getNames();
#io.print("Get first directory");
#user.dir(z);
#
#io.print("Get second directory");
#user.dir("simple");
#
#
function user.main():void;	# 0  (main:void)
#inspection of the runtime setting 	# 1  (_1:str)
#it uses the dynamic type analysis scheme 	# 2  (_2:str)
# type error when the type variable numbers are ignored 	# 3  (_3:str)
# Note the type of the variables will be fixed during the first call 	# 4  (_4:str)
    b := bat.new(:int,:int);	# 5 CMDBATnew (b:bat[:int,:int])<-(_6:int)(_6:int)
    bat.setName(b,"simplemind");	# 6 BKCsetName (_7:void)<-(b:bat[:int,:int])(_8:str)
    z := bbp.getNames();	# 7 CMDbbpNames (z:bat[:int,:str])
    io.print("Get first directory");	# 8 IOprint_val (_10:void)<-(_11:str)
    user.dir(z);	# 9  (_12:void)<-(z:bat[:int,:str])
    io.print("Get second directory");	# 10 IOprint_val (_13:void)<-(_14:str)
    user.dir("simple");	# 11  (_15:void)<-(_16:str)
end main;	# 12  
[ "Get first directory" ]
#-------------------------------------------------------------------------------------------------#
# bbp	h			htype	ttype		count	kind		refCount		  # name
# int	str			str	str		lng	str		int		  # type
#-------------------------------------------------------------------------------------------------#
[ 2,	  "M5system_auth_user",	  "oid",  "str",	  1,	  "persistent",	  1		  ]
[ 3,	  "M5system_auth_passwd", "oid",  "str",	  1,	  "persistent",	  1		  ]
[ 4,	  "M5system_auth_scen",	  "oid",  "str",	  0,	  "persistent",	  1		  ]
[ 5,	  "monet_environment",	  "str",  "str",	  40,	  "transient",	  1		  ]
[ 6,	  "monet_unicode_case",	  "int",  "int",	  732,	  "transient",	  1		  ]
[ 7,	  "timezones",		  "str",  "timezone",	  24,	  "transient",	  1		  ]
[ 8,	  "simplemind",		  "int",  "int",	  0,	  "transient",	  0		  ]
[ "Get second directory" ]
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 8,	  "simplemind"	  ]
#---------------------------------------------------------------------------------#
# h	h		htype	ttype	count	kind		refCount		  # name
# int	str		str	str	lng	str		int		  # type
#---------------------------------------------------------------------------------#
[ 8,	  "simplemind",	  "int",  "int",  0,	  "transient",	  0		  ]

# 18:09:04 >  
# 18:09:04 >  Done.
# 18:09:04 >  

