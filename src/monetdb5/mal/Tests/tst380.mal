#inspection of the runtime setting
#it uses the dynamic type analysis scheme

# type error when the type variable numbers are ignored
function get(br:bat[:any_1,:any_2],nme:str, title:str):bat[:any_3,:any_4];
	b:bat[:int,:str] := bbp.nme();
	z:= algebra.join(br,b);
	bat.setColumn(z,title);
	return z;
end get;
# Note the type of the variables will be fixed during the first call
function dir(b:bat[:int,:str]):void;
	atm:= inspect.getAtomNames();
	brev:= bat.reverse(b);
	bm := bat.mirror(brev);
	b1:bat[:int,:str] := bbp.getHeadType();
	bHead:= algebra.join(brev,b1);
	bat.setColumn(bHead,"htype");

	b2:bat[:int,:str] := bbp.getTailType();
	bTail:= algebra.join(brev,b2);
	bat.setColumn(bTail,"ttype");

	b8:bat[:int,:lng] := bbp.getCount();
	bCount:= algebra.join(brev,b8);
	bat.setColumn(bCount,"count");

#debug flag setting dependent
#	b7:bat[:int,:int] := bbp.getHeat();
#	bHeat:= algebra.join(brev,b7);
#	bat.setColumn(bHeat,"heat");

#	b3:bat[:int,:str] := bbp.getDirty();
#	bDirty:= algebra.join(brev,b3);
#	bat.setColumn(bDirty,"dirty");

#	b4:bat[:int,:str] := bbp.getStatus();
#	bStatus:= algebra.join(brev,b4);
#	bat.setColumn(bStatus,"status");

	b5:bat[:int,:str] := bbp.getKind();
	bKind:= algebra.join(brev,b5);
	bat.setColumn(bKind,"kind");

	b6:bat[:int,:int] := bbp.getRefCount();
	bRef:= algebra.join(brev,b6);
	bat.setColumn(bRef,"refCount");

#	io.table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef);
	io.table(brev, bm, bHead,bTail,bCount, bKind,bRef);
end dir;

function dir(s:str):void;
	t:= bbp.getNames();
	tn:= algebra.like(t,s);
	io.print(tn);
	user.dir(tn);
end dir;
b:= bat.new(:int,:int);
bat.setName(b,"simplemind");

z:= bbp.getNames();
io.print("Get first directory");
user.dir(z);

io.print("Get second directory");
user.dir("simple");

