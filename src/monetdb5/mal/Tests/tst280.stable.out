stdout of test 'tst280` in directory 'monetdb5/mal` itself:


# 08:01:12 >  
# 08:01:12 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst280.mal </dev/null
# 08:01:12 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#function pow(i:int,j:int):int;
#	z:= i+j;
#	printf("result %d\n",z);
#	return z;
#end pow;
function user.pow(i:int,j:int):int;
    z := calc.+(i,j);
    io.printf("result %d\n",z);
    return pow := z;
end pow;
#function tst(A2:bat[:oid,:int],A3:bat[:oid,:int]):bat[:oid,:int]; 
#	io.print(A2);
#	resB := bat.new(:oid,:int); 
#	lim:= aggr.count(A2);
#	io.printf("count %d\n",lim);
#	l:= calc.lng(lim);
#barrier (mloop,m):=language.newRange(0:lng);
#	io.printf("loopindex %d\n",m);
#        B2 := algebra.fetch(A2,m);       
#	printf("B2 value %d\n",B2);
#        B3 := algebra.fetch(A3,m);       
#	printf("B3 value %d\n",B3);
#        cr := pow(B2,B3);
#        insert(resB,nil,cr); 
#        redo (mloop,m) :=mal.nextElement(1:lng,l);    
#catch   MALException;  
#exit    MALException; 
#exit    (mloop,m) ;  
#  
#        return resB;    
#end tst;   
function user.tst(A2:bat[:oid,:int],A3:bat[:oid,:int]):bat[:oid,:int];
    io.print(A2);
    resB := bat.new(:oid,:int);
    lim := aggr.count(A2);
    io.printf("count %d\n",lim);
    l := calc.lng(lim);
barrier m := 0:lng;
    io.printf("loopindex %d\n",m);
    B2 := algebra.fetch(A2,m);
    io.printf("B2 value %d\n",B2);
    B3 := algebra.fetch(A3,m);
    io.printf("B3 value %d\n",B3);
    cr := user.pow(B2,B3);
    bat.append(resB,cr);
    redo m := iterator.next(1:lng,l);
catch MALException:str ;
exit MALException:str ;
exit m;
    return tst := resB;
end tst;
#
#
function user.main():void;
    b := bat.new(:oid,:int);
    bat.append(b,1);
    bat.append(b,2);
    e := algebra.fetch(b,1:lng);
    io.print(e);
    io.print(b);
    c := algebra.copy(b);
    z := user.tst(b,c);
    io.print(z);
end main;
[ 2 ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
count 2
loopindex 0
B2 value 1
B3 value 1
result 2
loopindex 1
B2 value 2
B3 value 2
result 4
#-----------------#
# h	tmp_6	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  4	  ]

# 08:01:12 >  
# 08:01:12 >  Done.
# 08:01:12 >  

