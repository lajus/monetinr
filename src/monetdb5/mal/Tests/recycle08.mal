# Test of CREDIT cache policy in limited memory (8 RU)
# Evicts the leaf instruction with smallest credit= cnt*(0.5*ticks + 0.5(wr+rd))

function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
b:= bat.new(:oid,:int);
barrier i:= 0:int;
	bat.append(b,i);
	redo i:= iterator.next(1:int,1000:int);
exit i;
return bind:=b;
end bind;

function qry(low:int, hgh:int);
	b:= user.bind("schema","table","column",0);
	s1:= algebra.select(b,low,hgh);
end qry;

recycle.setAdmPolicy(1);
recycle.setReusePolicy(1);
recycle.setCachePolicy(2,0,8);
optimizer.recycle("user","qry");

io.print("start");
qry(100,150);
qry(200,240);
qry(700,720);
qry(800,900);
qry(700,720);
recycle.dump();
# The next query should evict the cheapest 2 selects(#2 and #4). 
qry(300,800);
recycle.dump();
