stdout of test 'tst901b` in directory 'monetdb5/mal` itself:


# 07:48:36 >  
# 07:48:36 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=36666 --set xrpc_port=40130 --set monet_prompt= --trace --dbname=mTests_src_mal  tst901b.mal
# 07:48:36 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## what is the overhead of MAL in multiplex situations
## using a BATloop !! This is 40x slower as the V4.3 multiplex implementation
##profiler.setAll();
##profiler.setLogFile("/tmp/MonetProfile.xml");
#b:= bat.new(:oid,:lng);
#t0:= alarm.usec();
#barrier (v,i):= language.newRange(0:lng);
#	o:= calc.oid(i);
#	bat.insert(b,o,i);
#	redo (v,i):= language.nextElement(1:lng,1000000:lng);
#exit (v,i);
#t1:= alarm.usec();
#c:= algebra.copy(b);
#t2:= alarm.usec();
#d:= bat.new(:oid,:lng);
#barrier (mloop,h,t):= bat.newIterator(b);
#        zz:= algebra.find(b,h);
#        z:= algebra.find(c,h);
#	cr:= zz+z;
#	bat.insert(d,h,cr);
#catch GDKerror:str;
#	leave mloop;
#exit GDKerror;
#	redo (mloop,h,t):= bat.hasMoreElements(b);
#exit (mloop,h,t);
#t3:= alarm.usec();
##CMD000(b,b);
#t4:= alarm.usec();
#d1:= t1-t0;
#d2:= t3-t2;
#d3:= t4-t3;
#cnt:= aggr.count(d);
#io.printf("cnt %d ",cnt);
#io.printf("make %d ",d1);
#io.printf("multiplex %d\n",d2);
#io.printf("compiled multiplex %d\n",d3);
##profiler.stop();
#
function user.main():void;
# what is the overhead of MAL in multiplex situations 
# using a BATloop !! This is 40x slower as the V4.3 multiplex implementation 
#profiler.setAll(); 
#profiler.setLogFile("/tmp/MonetProfile.xml"); 
    b := bat.new(:oid,:lng);
    INT_MAX := 2147483647;
    dbgmsk_restore := mdb.getDebug();
    dbgmsk_unset := calc.+(8,8388608);
    dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
    dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
    mdb.setDebug(dbgmsk_set);
    t0 := alarm.usec();
barrier i := 0:lng;
    o := calc.oid(i);
    bat.insert(b,o,i);
    redo i := iterator.next(1:lng,1000000:lng);
exit i;
    t1 := alarm.usec();
    mdb.setDebug(dbgmsk_restore);
    c := algebra.copy(b);
    mdb.setDebug(dbgmsk_set);
    t2 := alarm.usec();
    d := bat.new(:oid,:lng);
barrier (h,t) := iterator.new(b);
    zz := algebra.fetch(b,h);
    z := algebra.fetch(c,h);
    cr := calc.+(zz,z);
    bat.insert(d,h,cr);
catch GDKerror:str ;
    leave h;
exit GDKerror:str ;
    redo (h,t) := iterator.next(b);
exit (h,t);
    t3 := alarm.usec();
    mdb.setDebug(dbgmsk_restore);
#CMD000(b,b); 
    t4 := alarm.usec();
    d1 := calc.-(t1,t0);
    d2 := calc.-(t3,t2);
    d3 := calc.-(t4,t3);
    cnt := aggr.count(d);
    io.printf("#cnt %d ",cnt);
    io.printf("#make %d ",d1);
    io.printf("#multiplex %d\n",d2);
    io.printf("#compiled multiplex %d\n",d3);
#profiler.stop(); 
end main;
#cnt 1000000 #make 1821522 #multiplex 3731249
#compiled multiplex 1

# 07:48:39 >  
# 07:48:39 >  Done.
# 07:48:39 >  

