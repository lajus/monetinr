stdout of test 'dataflow01` in directory 'monetdb5/mal` itself:


# 13:57:24 >  
# 13:57:24 >   mserver5 "--config=/ufs/mk/monet5//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=sql_logs"   --set mapi_open=true --set xrpc_open=true --set mapi_port=39545 --set xrpc_port=41905 --set monet_prompt= --trace  --dbname=mTests_src_mal  dataflow01.mal
# 13:57:24 >  

# MonetDB server v5.11.0, based on kernel v1.29.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2009 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:39545/
function user.load():bat[:oid,:lng];
    b := bat.new(:oid,:lng);
    k := 0;
    INT_MAX := 2147483647;
    dbgmsk_restore := mdb.getDebug();
    dbgmsk_unset := calc.+(8,8388608);
    dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
    dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
    mdb.setDebug(dbgmsk_set);
barrier i := 0:lng;
    k := calc.+(k,1);
    l := calc.lng(k);
    bat.insert(b,nil:oid,l);
    redo i := iterator.next(1:lng,1000000:lng);
exit i;
    mdb.setDebug(dbgmsk_restore);
    return load := b;
end load;
function user.qry(z:bat[:oid,:lng],low:int,hgh:int):wrd;
    l := calc.lng(low);
    h := calc.lng(hgh);
    s := algebra.select(z,l,h);
    c := aggr.count(s);
    return qry := c;
end qry;
function user.main():void;
# a simple dataflow test to check call methods. 
    s := user.load();
    t1 := 0:wrd;
    t2 := 0:wrd;
    t3 := 0:wrd;
    t4 := 0:wrd;
    c := 0:wrd;
barrier go := language.dataflow();
    t1 := user.qry(s,1,100);
    t2 := user.qry(s,101,1000);
    t3 := user.qry(s,1001,10000);
    t4 := user.qry(s,10001,100000);
    c1 := calc.+(t1,t3);
    c2 := calc.+(t2,t4);
    c := calc.+(c1,c2);
exit go;
    io.print(c);
    io.print(t1);
    io.print(t2);
    io.print(t3);
    io.print(t4);
end main;
[ 100000 ]
[ 100 ]
[ 900 ]
[ 9000 ]
[ 90000 ]

# 13:57:25 >  
# 13:57:25 >  Done.
# 13:57:25 >  

