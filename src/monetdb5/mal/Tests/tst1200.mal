# Mil compiler Version 1.0)
# Copyright (c) 1993-2001, CWI. All rights reserved.

# Predefined code segment
#
##line 531 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
#module(monettime,alarm);
#
#
#
lzone:= mtime.timezone("GMT+01:00");
mtime.timezone_local(lzone);
##line 535 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## test the various ways to create rules
	rule_jan:= mtime.rule("1st MON from start of JAN@01:15");
#var rule_jan := mtime.rule("1st MON from start of JAN@01:15");
	rule_mar:= mtime.rule("first WEDNE on or after march 10@01:15");
#var rule_mar := mtime.rule("first WEDNE on or after march 10@01:15");
	rule_apr:= mtime.rule("last THU on or before aPr 1@01:15");
#var rule_apr := mtime.rule("last THU on or before aPr 1@01:15");
	rule_may:= mtime.rule("MAY 26@01:15");
#var rule_may := mtime.rule("MAY 26@01:15");
	rule_jun:= mtime.rule("2nd TUE from end of june@01:15");
#var rule_jun := mtime.rule("2nd TUE from end of june@01:15");
	rule_jul:= mtime.rule(7,1,1,75);
#var rule_jul := mtime.rule(7,1,1,75);
	rule_aug:= mtime.rule(8,-1,1,75);
#var rule_aug := mtime.rule(8,-1,1,75);
	rule_sep:= mtime.rule(9,-10,3,75);
#var rule_sep := mtime.rule(9,-10,3,75);
	rule_oct:= mtime.rule(10,31,0,75);
#var rule_oct := mtime.rule(10,31,0,75);
	rule_nov:= mtime.rule(11,-10,-4,75);
#var rule_nov := mtime.rule(11,-10,-4,75);
## nil rules
	rule_dec:= mtime.rule(12,-31,0,75);
#var rule_dec := mtime.rule(12,-31,0,75);
	rule_feb:= mtime.rule("first fRiDaY on or after february 30@01:15");
#var rule_feb := mtime.rule("first fRiDaY on or after february 30@01:15");
# 
	month_bat:= bat.new(:oid,:str,10);
	rule_bat:= bat.new(:oid,:zrule,10);
#var rule_bat := bat.new(str,rule,10);
	bat.append(rule_bat,rule_jan);
	bat.append(rule_bat,rule_feb);
	bat.append(rule_bat,rule_mar);
	bat.append(rule_bat,rule_apr);
#rule_bat.bat.append(rule_apr);
	bat.append(rule_bat,rule_may);
	bat.append(rule_bat,rule_jun);
	bat.append(rule_bat,rule_jul);
	bat.append(rule_bat,rule_aug);
#rule_bat.bat.append(rule_aug);
	bat.append(rule_bat,rule_sep);
	bat.append(rule_bat,rule_oct);
	bat.append(rule_bat,rule_nov);
	bat.append(rule_bat,rule_dec);

	bat.append(month_bat,"jan");
	bat.append(month_bat,"feb");
	bat.append(month_bat,"mar");
	bat.append(month_bat,"apr");
#month_bat.bat.append("jan");
	bat.append(month_bat,"may");
	bat.append(month_bat,"jun");
	bat.append(month_bat,"jul");
	bat.append(month_bat,"aug");
#month_bat.bat.append("may");
	bat.append(month_bat,"sep");
	bat.append(month_bat,"oct");
	bat.append(month_bat,"nov");
	bat.append(month_bat,"dec");
#rule_bat.bat.insert("sep",rule_sep).insert("oct",rule_oct).insert("nov",rule_nov).insert("dec",rule_dec);
#
## test the operations on rules
	ma_a := bat.setColumn(rule_bat,"rule");
#io.print(rule_bat.bat.setColumn("rule"),
	na_a:bat[:oid,:int] := mal.multiplex("mtime","month",rule_bat);
	oa_a := bat.setColumn(na_a,"month");
#      [month](rule_bat).bat.setColumn("month"),
	pa_a:bat[:oid,:int] := mal.multiplex("mtime","weekday",rule_bat);
	qa_a := bat.setColumn(pa_a,"weekday");
#      [weekday](rule_bat).bat.setColumn("weekday"),
	ra_a:bat[:oid,:int] := mal.multiplex("mtime","day",rule_bat);
	sa_a := bat.setColumn(ra_a,"day");
#      [day](rule_bat).bat.setColumn("day"),
	ta_a:bat[:oid,:int] := mal.multiplex("mtime","minutes",rule_bat);
	ua_a := bat.setColumn(ta_a,"minutes");
io.print("rule_bat,na_a,pa_a,ra_a,ta_a");
	va_a := io.print(month_bat,rule_bat,na_a,pa_a,ra_a,ta_a);
#      [minutes](rule_bat).bat.setColumn("minutes"));
#
	bat.setColumn(rule_bat,"rule");
#io.print(rule_bat.bat.setColumn("rule"),
	xa_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,2001);
	ya_a := bat.setColumn(xa_a,"2001");
#      [compute](rule_bat, 2001).bat.setColumn("2001"),
	ab_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,2001);
	bb_a:bat[:oid,:int] := mal.multiplex("mtime","dayofweek",ab_a);
	cb_a:bat[:oid,:str] := mal.multiplex("mtime","dayname",bb_a);
	bat.setColumn(cb_a,"2001");
#      [dayname]([dayofweek]([compute](rule_bat, 2001))).bat.setColumn("2001"),
	eb_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,1999);
	bat.setColumn(eb_a,"1999");
#      [compute](rule_bat, 1999).bat.setColumn("1999"),
	gb_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,1999);
	hb_a:bat[:oid,:int] := mal.multiplex("mtime","dayofweek",gb_a);
	ib_a:bat[:oid,:str] := mal.multiplex("mtime","dayname",hb_a);
	bat.setColumn(ib_a,"1999");
#      [dayname]([dayofweek]([compute](rule_bat, 1999))).bat.setColumn("1999"),
	kb_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,1992);
	bat.setColumn(kb_a,"1992");
#      [compute](rule_bat, 1992).bat.setColumn("1992"),
	mb_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,1992);
	nb_a:bat[:oid,:int] := mal.multiplex("mtime","dayofweek",mb_a);
	ob_a:bat[:oid,:str] := mal.multiplex("mtime","dayname",nb_a);
	bat.setColumn(ob_a,"1992");
io.print("rule_bat,xa_a,cb_a,eb_a,ib_a,kb_a,ob_a");
	qb_a := io.print(rule_bat,xa_a,cb_a,eb_a,ib_a,kb_a,ob_a);
#      [dayname]([dayofweek]([compute](rule_bat, 1992))).bat.setColumn("1992"));
#
	rb_a := bat.setColumn(rule_bat,"rule");
#io.print(rule_bat.bat.setColumn("rule"),
	sb_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,1572);
	tb_a := bat.setColumn(sb_a,"1572");
#      [compute](rule_bat, 1572).bat.setColumn("1572"),
	ub_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,1572);
	vb_a:bat[:oid,:int] := mal.multiplex("mtime","dayofweek",ub_a);
	wb_a:bat[:oid,:str] := mal.multiplex("mtime","dayname",vb_a);
	xb_a := bat.setColumn(wb_a,"1572");
#      [dayname]([dayofweek]([compute](rule_bat, 1572))).bat.setColumn("1572"),
	yb_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,1);
	ac_a := bat.setColumn(yb_a,"1");
#      [compute](rule_bat, 1).bat.setColumn("1"),
	bc_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,1);
	cc_a:bat[:oid,:int] := mal.multiplex("mtime","dayofweek",bc_a);
	dc_a:bat[:oid,:str] := mal.multiplex("mtime","dayname",cc_a);
	ec_a := bat.setColumn(dc_a,"1");
#      [dayname]([dayofweek]([compute](rule_bat, 1))).bat.setColumn("1"),
	fc_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,-2000);
	gc_a := bat.setColumn(fc_a,"-2000");
#      [compute](rule_bat, -2000).bat.setColumn("-2000"),
	hc_a:bat[:oid,:date] := mal.multiplex("mtime","compute",rule_bat,-2000);
	ic_a:bat[:oid,:int] := mal.multiplex("mtime","dayofweek",hc_a);
	jc_a:bat[:oid,:str] := mal.multiplex("mtime","dayname",ic_a);
	kc_a := bat.setColumn(jc_a,"-2000");
io.print("rule_bat,sb_a,wb_a,yb_a,dc_a,fc_a,jc_a");
	lc_a := io.print(month_bat,rule_bat,sb_a,wb_a,yb_a,dc_a,fc_a,jc_a);
#      [dayname]([dayofweek]([compute](rule_bat, -2000))).bat.setColumn("-2000"));
#
#
#
##line 580 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## test the various ways to create timezones, using some of the above created rules
	tzone_00:= mtime.timezone("GMT");
#var tzone_00 := mtime.timezone("GMT");
	tzone_01:= mtime.timezone("GMT+01:00");
#var tzone_01 := mtime.timezone("GMT+01:00");
	tzone_02:= mtime.timezone("GMT+0100");
#var tzone_02 := mtime.timezone("GMT+0100");
	tzone_03:= mtime.timezone(60,rule_oct,rule_mar);
#var tzone_03 := mtime.timezone(60, rule_oct, rule_mar);
	tzone_04:= mtime.timezone(0,rule_jan,rule_aug);
#var tzone_04 := mtime.timezone(0, rule_jan, rule_aug);
	tzone_05:= mtime.timezone(-97,rule_oct,rule_apr);
#var tzone_05 := mtime.timezone(-97, rule_oct, rule_apr);
	tzone_06:= mtime.timezone(-97,rule_may,rule_sep);
#var tzone_06 := mtime.timezone(-97, rule_may, rule_sep);
	mc_a := calc.*(23,60);
	tzone_07:= mtime.timezone(mc_a,rule_apr,rule_nov);
#var tzone_07 := mtime.timezone(23*60, rule_apr, rule_nov);
	nc_a := calc.*(-23,59);
	oc_a := calc.-(nc_a,59);
	tzone_08:= mtime.timezone(oc_a);
#var tzone_08 := mtime.timezone((-23*59) - 59);
	tzone_09:= mtime.timezone(0);
#var tzone_09 := mtime.timezone(0);
	tzone_10:= mtime.timezone(-60);
#var tzone_10 := mtime.timezone(-60);
	pc_a := calc.*(23,60);
	qc_a := calc.+(pc_a,59);
	tzone_11:= mtime.timezone(qc_a);
#var tzone_11 := mtime.timezone((23*60)+59);
	tzone_12:= mtime.timezone(60);
#var tzone_12 := mtime.timezone(60);
## nil tzones
	tzone_13:= mtime.timezone(60,rule_feb,rule_dec);
#var tzone_13 := mtime.timezone(60, rule_feb, rule_dec);
	rc_a := calc.*(24,60);
	tzone_14:= mtime.timezone(rc_a,rule_apr,rule_nov); # to complete it
	tzone_15:= mtime.timezone(rc_a,rule_apr,rule_nov);
#var tzone_15 := mtime.timezone(24*60, rule_apr, rule_nov);
#
#
	tzone_bat:= bat.new(:oid,:timezone);
#var tzone_bat := bat.new(oid,tzone);
	bat.insert(tzone_bat,0@0,tzone_00);
	bat.insert(tzone_bat,1@0,tzone_01);
	bat.insert(tzone_bat,2@0,tzone_02);
#tzone_bat.bat.insert(0@0, tzone_00).insert(1@0, tzone_01).insert(2@0, tzone_02);
	bat.insert(tzone_bat,3@0,tzone_03);
	bat.insert(tzone_bat,4@0,tzone_04);
	bat.insert(tzone_bat,5@0,tzone_05);
#tzone_bat.bat.insert(3@0, tzone_03).insert(4@0, tzone_04).insert(5@0, tzone_05);
	bat.insert(tzone_bat,6@0,tzone_06);
	bat.insert(tzone_bat,7@0,tzone_07);
	bat.insert(tzone_bat,8@0,tzone_08);
#tzone_bat.bat.insert(6@0, tzone_06).insert(7@0, tzone_07).insert(8@0, tzone_08);
	bat.insert(tzone_bat,9@0,tzone_09);
	bat.insert(tzone_bat,10@0,tzone_10);
	bat.insert(tzone_bat,11@0,tzone_11);
#tzone_bat.bat.insert(9@0, tzone_09).insert(10@0, tzone_10).insert(11@0, tzone_11);
	bat.insert(tzone_bat,12@0,tzone_12);
	bat.insert(tzone_bat,13@0,tzone_13);
	bat.insert(tzone_bat,14@0,tzone_15);
	bat.insert(tzone_bat,15@0,tzone_15);
	bat.insert(tzone_bat,16@0,tzone_15);
	bat.insert(tzone_bat,17@0,tzone_15);
	bat.insert(tzone_bat,18@0,tzone_15);
	bat.insert(tzone_bat,19@0,tzone_15);
	bat.insert(tzone_bat,20@0,tzone_15);
#tzone_bat.bat.insert(12@0, tzone_12).insert(13@0, tzone_13).insert(15@0, tzone_15);
#
## test the operations on tzones
	bat.setName(tzone_bat,"timezone");
#io.print(tzone_bat);
#io.print("start error");
	#x:= getRefCount(tzone_bat);
#io.print(x);
	#jd_a := io.print(tzone_bat);
#io.print("end");
#io.print(x);
	#x:= getRefCount(tzone_bat);
io.print("tzone_bat");
	io.print(tzone_bat);
#io.print(tzone_bat.bat.setColumn("tzone"));
	kd_a:bat[:oid,:int] := mal.multiplex("mtime","minutes",tzone_bat);
	bat.setColumn(kd_a,"minutes");
#io.print([minutes](tzone_bat).bat.setColumn("minutes"),
	md_a:bat[:oid,:zrule] := mal.multiplex("mtime","start_dst",tzone_bat);
	bat.setColumn(md_a,"start_dst");
#      [start_dst](tzone_bat).bat.setColumn("start_dst"),
	od_a:bat[:oid,:zrule] := mal.multiplex("mtime","end_dst",tzone_bat);
	bat.setColumn(od_a,"end_dst");
io.print("print(kd_a,md_a,od_a)");
	qd_a := io.print(kd_a,md_a,od_a);
#      [end_dst](tzone_bat).bat.setColumn("end_dst"));
#
#
#
##line 614 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## test the various ways to create dates
	date_00:= mtime.date(2000,01,01);
#var date_00 := date(2000,01,01);
	date_01:= mtime.date("5000-JAN-01");
#var date_01 := date("5000-JAN-01");
	date_02:= mtime.date("1968-FEBR-29");
#var date_02 := date("1968-FEBR-29");
	date_03:= mtime.date("1-MARCH-01");
#var date_03 := date("1-MARCH-01");
	date_04:= mtime.date("-5867411-JAN-1");
#var date_04 := date("-5867411-JAN-1");
	date_05:= mtime.date("-768/octobe/01");
#var date_05 := date("-768/octobe/01");
	date_06:= mtime.date("5000\\novembe\\01");
#var date_06 := date("5000\\novembe\\01");
	date_07:= mtime.date("-1999/jun/01");
#var date_07 := date("-1999/jun/01");
	date_08:= mtime.date("2000-jul-14");
#var date_08 := date("2000-jul-14");
	date_09:= mtime.date("1999-sept-01");
#var date_09 := date("1999-sept-01");
	date_10:= mtime.date("1998-decemBeR-01");
#var date_10 := date("1998-decemBeR-01");
	date_11:= mtime.date("1953 may                01");
#var date_11 := date("1953 may                01");
	date_12:= mtime.date("5867411-DEC-31");
#var date_12 := date("5867411-DEC-31");
## nil dates
	date_13:= mtime.date(1996,13,1);
#var date_13 := date(1996,13,1);
	date_14:= mtime.date("999999999999999999999-01-01");
#var date_14 := date("999999999999999999999-01-01");
	date_15:= mtime.date("1999-JANUARI-01");
#var date_15 := date("1999-JANUARI-01");
	date_16:= mtime.date("1999-FEBR-29");
#var date_16 := date("1999-FEBR-29");
	date_17:= mtime.date("-1-DECEMBER-0");
#var date_17 := date("-1-DECEMBER-0");
	date_18:= mtime.date("5000\novembe\31");
#var date_18 := date("5000\novembe\31");
	date_19:= mtime.date("nil");
#var date_19 := date("nil");
	date_20:= mtime.date("1999-sept-31");
#var date_20 := date("1999-sept-31");
#
	date_bat:= bat.new(:oid,:date);
#var date_bat := bat.new(oid,date);
	bat.insert(date_bat,0@0,date_00);
	bat.insert(date_bat,1@0,date_01);
	bat.insert(date_bat,2@0,date_02);
#date_bat.bat.insert(0@0, date_00).insert(1@0, date_01).insert(2@0, date_02);
	bat.insert(date_bat,3@0,date_03);
	bat.insert(date_bat,4@0,date_04);
	bat.insert(date_bat,5@0,date_05);
#date_bat.bat.insert(3@0, date_03).insert(4@0, date_04).insert(5@0, date_05);
	bat.insert(date_bat,6@0,date_06);
	bat.insert(date_bat,7@0,date_07);
	bat.insert(date_bat,8@0,date_08);
#date_bat.bat.insert(6@0, date_06).insert(7@0, date_07).insert(8@0, date_08);
	bat.insert(date_bat,9@0,date_09);
	bat.insert(date_bat,10@0,date_10);
	bat.insert(date_bat,11@0,date_11);
#date_bat.bat.insert(9@0, date_09).insert(10@0, date_10).insert(11@0, date_11);
	bat.insert(date_bat,12@0,date_12);
	bat.insert(date_bat,13@0,date_13);
	bat.insert(date_bat,14@0,date_14);
#date_bat.bat.insert(12@0, date_12).insert(13@0, date_13).insert(14@0, date_14);
	bat.insert(date_bat,15@0,date_15);
	bat.insert(date_bat,16@0,date_16);
	bat.insert(date_bat,17@0,date_17);
#date_bat.bat.insert(15@0, date_15).insert(16@0, date_16).insert(17@0, date_17);
	bat.insert(date_bat,18@0,date_18);
	bat.insert(date_bat,19@0,date_19);
	bat.insert(date_bat,20@0,date_20);
#date_bat.bat.insert(18@0, date_18).insert(19@0, date_19).insert(20@0, date_20);
#
## test the operations on dates
	ne_a := bat.setColumn(date_bat,"date");
#io.print(date_bat.bat.setColumn("date"),
	oe_a:bat[:oid,:int] := mal.multiplex("mtime","year",date_bat);
	pe_a := bat.setColumn(oe_a,"year");
#      [year](date_bat).bat.setColumn("year"),
	qe_a:bat[:oid,:int] := mal.multiplex("mtime","day",date_bat);
	re_a := bat.setColumn(qe_a,"day");
#      [day](date_bat).bat.setColumn("day"),
	se_a:bat[:oid,:int] := mal.multiplex("mtime","month",date_bat);
	te_a:bat[:oid,:str] := mal.multiplex("mtime","monthname",se_a);
	ue_a := bat.setColumn(te_a,"monthname");
#      [monthname]([month](date_bat)).bat.setColumn("monthname"),
	ve_a:bat[:oid,:int] := mal.multiplex("mtime","month",date_bat);
	we_a:bat[:oid,:str] := mal.multiplex("mtime","monthname",ve_a);
	xe_a:bat[:oid,:int] := mal.multiplex("mtime","monthnum",we_a);
	ye_a := bat.setColumn(xe_a,"monthnum");
	io.print("print(date_bat,oe_a,qe_a,te_a,xe_a)");
	af_a := io.print(date_bat,oe_a,qe_a,te_a,xe_a);
#      [monthnum]([monthname]([month](date_bat))).bat.setColumn("monthnum"));
#
	date_addyears:bat[:oid,:date]:= mal.multiplex("mtime","addyears",date_bat,-100);
#var date_addyears := [addyears](date_bat, -100);
	date_addmonths:bat[:oid,:date]:= mal.multiplex("mtime","addmonths",date_bat,1);
#var date_addmonths := [addmonths](date_bat, 1);
#
	bat.setColumn(date_bat,"date");
#io.print(date_bat.bat.setColumn("date"),
	bat.setColumn(date_addyears,"min100y");
#      date_addyears.bat.setColumn("min100y"),
	df_a:bat[:oid,:int] := mal.multiplex("mtime","diff",date_addyears,date_bat);
	bat.setColumn(df_a,"diff");
	io.print("print(date_bat,date_addyears,df_a)");
	ff_a := io.print(date_bat,date_addyears,df_a);
#      [diff](date_addyears, date_bat).bat.setColumn("diff"));
#
	bat.setColumn(date_bat,"date");
#io.print(date_bat.bat.setColumn("date"),
	bat.setColumn(date_addmonths,"plus1m");
#      date_addmonths.bat.setColumn("plus1m"),
	if_a:bat[:oid,:int] := mal.multiplex("mtime","diff",date_addmonths,date_bat);
	bat.setColumn(if_a,"diff");
	io.print(" print(date_bat,date_addmonths,if_a)");
	kf_a := io.print(date_bat,date_addmonths,if_a);
#      [diff](date_addmonths, date_bat).bat.setColumn("diff"));
#
## test dayofweek and weeknumber using more than two years as consecutive days
	date_seq:= bat.new(:oid,:date);
	date_nr:= bat.new(:oid,:int);
#var date_seq := bat.new(int, date);
	i:= -375;
#var i := -375;
barrier	lf_a:= true;
	i:= i+1;
	of_a := calc.<(i,375);
barrier	mf_a:= of_a;
#while ((i :+= 1) < 375) {
	pf_a := mtime.adddays(date_00,i);
	bat.append(date_seq,pf_a);
	bat.append(date_nr,i);
#	date_seq.bat.insert(i,adddays(date_00,i));
redo	lf_a;
exit	mf_a;
exit	lf_a;
#}
	rf_a := bat.setColumn(date_seq,"date");
#io.print(date_seq.bat.setColumn("date"),
	sf_a:bat[:oid,:int] := mal.multiplex("mtime","weekofyear",date_seq);
	tf_a := bat.setColumn(sf_a,"weekofyear");
#      [weekofyear](date_seq).bat.setColumn("weekofyear"),
	uf_a:bat[:oid,:int] := mal.multiplex("mtime","dayofweek",date_seq);
	vf_a:bat[:oid,:str] := mal.multiplex("mtime","dayname",uf_a);
	wf_a := bat.setColumn(vf_a,"dayofweek");
#      [dayname]([dayofweek](date_seq)).bat.setColumn("dayofweek"),
	xf_a:bat[:oid,:int] := mal.multiplex("mtime","dayofweek",date_seq);
	yf_a:bat[:oid,:str] := mal.multiplex("mtime","dayname",xf_a);
	ag_a:bat[:oid,:int] := mal.multiplex("mtime","daynum",yf_a);
	bg_a := bat.setColumn(ag_a,"num");
#      [daynum]([dayname]([dayofweek](date_seq))).bat.setColumn("num"),
	cg_a:bat[:oid,:int] := mal.multiplex("mtime","dayofyear",date_seq);
	dg_a := bat.setColumn(cg_a,"dayofyear");
io.print("date_seq,sf_a,vf_a,ag_a,cg_a");
	eg_a := io.print(date_nr, date_seq,sf_a,vf_a,ag_a,cg_a);
#      [dayofyear](date_seq).bat.setColumn("dayofyear"));
#
#
#
##line 679 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## test the various ways top create daytimes
	daytime_00:= mtime.daytime(23,59,59,999);
#var daytime_00 := mtime.daytime(23,59,59,999);
	daytime_01:= mtime.daytime("23:59");
#var daytime_01 := mtime.daytime("23:59");
	daytime_02:= mtime.daytime("00:00");
#var daytime_02 := mtime.daytime("00:00");
	daytime_03:= mtime.daytime("23:59:59");
#var daytime_03 := mtime.daytime("23:59:59");
	daytime_04:= mtime.daytime("00:00:00.000");
#var daytime_04 := mtime.daytime("00:00:00.000");
	daytime_05:= mtime.daytime("00:00:00");
#var daytime_05 := mtime.daytime("00:00:00");
	daytime_06:= mtime.daytime("00:00:00:001");
#var daytime_06 := mtime.daytime("00:00:00:001");
	daytime_07:= mtime.daytime("03:49:02.999");
#var daytime_07 := mtime.daytime("03:49:02.999");
	daytime_08:= mtime.daytime("20:48:42:999");
#var daytime_08 := mtime.daytime("20:48:42:999");
	daytime_09:= mtime.daytime("17:53:38:999");
#var daytime_09 := mtime.daytime("17:53:38:999");
	daytime_10:= mtime.daytime("13:15:34:999");
#var daytime_10 := mtime.daytime("13:15:34:999");
	daytime_11:= mtime.daytime("07:34:27.999");
#var daytime_11 := mtime.daytime("07:34:27.999");
	daytime_12:= mtime.daytime("23:59:59:999");
#var daytime_12 := mtime.daytime("23:59:59:999");
	daytime_13:= mtime.daytime("01:00:03.999");
#var daytime_13 := mtime.daytime("01:00:03.999");
	daytime_14:= mtime.daytime("23:59:59.999");
#var daytime_14 := mtime.daytime("23:59:59.999");
## nil daytimes
	daytime_15:= mtime.daytime(24,59,59,999);
#var daytime_15 := mtime.daytime(24,59,59,999);
	daytime_16:= mtime.daytime(23,60,59,999);
#var daytime_16 := mtime.daytime(23,60,59,999);
	daytime_17:= mtime.daytime(23,59,60,999);
#var daytime_17 := mtime.daytime(23,59,60,999);
	daytime_18:= mtime.daytime(23,59,60,1000);
#var daytime_18 := mtime.daytime(23,59,60,1000);
	daytime_19:= mtime.daytime("nil");
#var daytime_19 := mtime.daytime("nil");
	daytime_20:= mtime.daytime("nil");
#
	daytime_bat:= bat.new(:oid,:daytime);
#var daytime_bat := bat.new(oid,daytime);
	bat.insert(daytime_bat,0@0,daytime_00);
	bat.insert(daytime_bat,1@0,daytime_01);
	bat.insert(daytime_bat,2@0,daytime_02);
#daytime_bat.bat.insert(0@0, daytime_00).insert(1@0, daytime_01).insert(2@0, daytime_02);
	bat.insert(daytime_bat,3@0,daytime_03);
	bat.insert(daytime_bat,4@0,daytime_04);
	bat.insert(daytime_bat,5@0,daytime_05);
#daytime_bat.bat.insert(3@0, daytime_03).insert(4@0, daytime_04).insert(5@0, daytime_05);
	bat.insert(daytime_bat,6@0,daytime_06);
	bat.insert(daytime_bat,7@0,daytime_07);
	bat.insert(daytime_bat,8@0,daytime_08);
#daytime_bat.bat.insert(6@0, daytime_06).insert(7@0, daytime_07).insert(8@0, daytime_08);
	bat.insert(daytime_bat,9@0,daytime_09);
	bat.insert(daytime_bat,10@0,daytime_10);
	bat.insert(daytime_bat,11@0,daytime_11);
#daytime_bat.bat.insert(9@0, daytime_09).insert(10@0, daytime_10).insert(11@0, daytime_11);
	bat.insert(daytime_bat,12@0,daytime_12);
	bat.insert(daytime_bat,13@0,daytime_13);
	bat.insert(daytime_bat,14@0,daytime_14);
#daytime_bat.bat.insert(12@0, daytime_12).insert(13@0, daytime_13).insert(14@0, daytime_14);
	bat.insert(daytime_bat,15@0,daytime_15);
	bat.insert(daytime_bat,16@0,daytime_16);
	bat.insert(daytime_bat,17@0,daytime_17);
#daytime_bat.bat.insert(15@0, daytime_15).insert(16@0, daytime_16).insert(17@0, daytime_17);
	bat.insert(daytime_bat,18@0,daytime_18);
	bat.insert(daytime_bat,19@0,daytime_19);
	bat.insert(daytime_bat,20@0,daytime_20);
#daytime_bat.bat.insert(18@0, daytime_18).insert(19@0, daytime_19);
#
	bat.setColumn(daytime_bat,"daytime");
#io.print(daytime_bat.bat.setColumn("daytime"),
	bh_a:bat[:oid,:int] := mal.multiplex("mtime","hours",daytime_bat);
	bat.setColumn(bh_a,"hours");
#      [hours](daytime_bat).bat.setColumn("hours"),
	dh_a:bat[:oid,:int] := mal.multiplex("mtime","minutes",daytime_bat);
	bat.setColumn(dh_a,"minutes");
#      [minutes](daytime_bat).bat.setColumn("minutes"),
	fh_a:bat[:oid,:int] := mal.multiplex("mtime","seconds",daytime_bat);
	bat.setColumn(fh_a,"seconds");
#      [seconds](daytime_bat).bat.setColumn("seconds"),
	hh_a:bat[:oid,:int] := mal.multiplex("mtime","milliseconds",daytime_bat);
	bat.setColumn(hh_a,"milliseconds");
io.print("daytime_bat,bh_a,dh_a,fh_a,hh_a");
	jh_a := io.print(daytime_bat,bh_a,dh_a,fh_a,hh_a);
#      [milliseconds](daytime_bat).bat.setColumn("milliseconds"));
#
#
#
##line 719 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
## create timestamps in bulk from the above bats with dates, daytimes and tzones
# Skipped due to coercion implication
	kh_a:bat[:oid,:timestamp] := mal.multiplex("mtime","timestamp",date_bat,daytime_bat,tzone_bat);
	timestamp_bat:=kh_a; bat.setWriteMode(kh_a);
#var timestamp_bat := [timestamp](date_bat,daytime_bat,tzone_bat).access(BAT_WRITE);
## KILL
## var timestamp_now := timestamp(epoch());
## timestamp_bat.bat.insert(14@0, timestamp_now);
#
## test the timestamp operations
	bat.setColumn(timestamp_bat,"timestamp");
#io.print(timestamp_bat.bat.setColumn("timestamp"),
	mh_a:bat[:oid,:date] := mal.multiplex("mtime","date",timestamp_bat,tzone_bat);
	bat.setColumn(mh_a,"date");
#      [date](timestamp_bat,tzone_bat).bat.setColumn("date"),
	oh_a:bat[:oid,:daytime] := mal.multiplex("mtime","daytime",timestamp_bat,tzone_bat);
	bat.setColumn(oh_a,"daytime");
	io.print("print(timestamp_bat,mh_a,oh_a)");
	io.print(timestamp_bat,mh_a,oh_a);
#      [daytime](timestamp_bat,tzone_bat).bat.setColumn("daytime"));
#
	rh_a := bat.setColumn(timestamp_bat,"timestamp");
#io.print(timestamp_bat.bat.setColumn("timestamp"),
	tzname:bat[:oid,:str]:= bbp.bind("timezone_name");
	tzdef:bat[:oid,:timezone]:= bbp.bind("timezone_def");
	tzn:= bat.reverse(tzname);
	io.print("print(timezones)");
	io.print(tzname,tzdef);
	o:= algebra.find(tzn,"Wake Island");
	sh_a:timezone := algebra.fetch(tzdef,o);
	th_a:bat[:oid,:date] := mal.multiplex("mtime","date",timestamp_bat,sh_a);
	bat.setColumn(th_a,"Wake Island");
#      [date](timestamp_bat,algebra.find(timezones,"Wake Island")).bat.setColumn("Wake Island"),
	o := algebra.find(tzn,"Wake Island");
	vh_a:timezone := algebra.fetch(tzdef,o);
	wh_a:bat[:oid,:daytime] := mal.multiplex("mtime","daytime",timestamp_bat,vh_a);
#      [daytime](timestamp_bat,algebra.find(timezones,"Wake Island")),
	o := algebra.find(tzn,"American Samoa");
	xh_a:timezone := algebra.fetch(tzdef,o);
	yh_a:bat[:oid,:date] := mal.multiplex("mtime","date",timestamp_bat,xh_a);
	ai_a := bat.setColumn(yh_a,"American Samoa");
#      [date](timestamp_bat,algebra.find(timezones,"American Samoa")).bat.setColumn("American Samoa"),
	o := algebra.find(tzn,"American Samoa");
	bi_a:timezone := algebra.fetch(tzdef,o);
	ci_a:bat[:oid,:daytime] := mal.multiplex("mtime","daytime",timestamp_bat,bi_a);
	io.print("print(timestamp_bat,th_a,wh_a,yh_a,ci_a)");
	di_a := io.print(timestamp_bat,th_a,wh_a,yh_a,ci_a);
#      [daytime](timestamp_bat,algebra.find(timezones,"American Samoa")));
#
	ei_a := calc.*(60,1000);
	fi_a := calc.*(60,ei_a);
	gi_a := calc.*(23,fi_a);
	hi_a := calc.lng(gi_a);
	timestamp_plus:bat[:oid,:timestamp] := mal.multiplex("mtime","add",timestamp_bat,hi_a);
#var timestamp_plus := [add](timestamp_bat, calc.lng(23*60*60*1000));
	ii_a := calc.*(-60,1000);
	ji_a := calc.lng(ii_a);
	timestamp_minus:bat[:oid,:timestamp] := mal.multiplex("mtime","add",timestamp_bat,ji_a);
#var timestamp_minus := [add](timestamp_bat, calc.lng(-60*1000));
#
	ki_a := bat.setColumn(timestamp_bat,"timestamp");
#io.print(timestamp_bat.bat.setColumn("timestamp"),
	li_a := bat.setColumn(timestamp_plus,"plus23");
#	timestamp_plus.bat.setColumn("plus23"),
	mi_a := bat.setColumn(timestamp_minus,"min1");
#	timestamp_minus.bat.setColumn("min1"),
	ni_a:bat[:oid,:lng] := mal.multiplex("mtime","diff",timestamp_plus,timestamp_minus);
	oi_a := calc.*(60,1000);
	pi_a := calc.*(60,oi_a);
	qi_a := calc.lng(pi_a);
	ri_a := batcalc./(ni_a,qi_a);
	si_a := bat.setColumn(ri_a,"diff");
	io.print("print(timestamp_bat,timestamp_plus,timestamp_minus,ri_a)");
	ti_a := io.print(timestamp_bat,timestamp_plus,timestamp_minus,ri_a);
#	[/]([diff](timestamp_plus, timestamp_minus),calc.lng(60*60*1000)).bat.setColumn("diff"));
#
	o := algebra.find(tzn,"West/Europe");
	ui_a:timezone := algebra.fetch(tzdef,o);
	timestamp_eur:bat[:oid,:timestamp]:= mal.multiplex("mtime","timestamp",date_seq,daytime_00,ui_a);
#var timestamp_eur := [timestamp](date_seq, daytime_00, algebra.find(timezones,"West/Europe"));
	o := algebra.find(tzn,"Andes/Brazil");
	vi_a:timezone := algebra.fetch(tzdef,o);
	timestamp_bra:bat[:oid,:timestamp]:= mal.multiplex("mtime","timestamp",date_seq,daytime_00,vi_a);
#var timestamp_bra := [timestamp](date_seq, daytime_00, algebra.find(timezones,"Andes/Brazil"));
#
	wi_a := bat.setColumn(date_seq,"date");
#io.print(date_seq.bat.setColumn("date"), 
	xi_a:bat[:oid,:int] := mal.multiplex("mtime","dayofweek",date_seq);
	yi_a:bat[:oid,:str] := mal.multiplex("mtime","dayname",xi_a);
	aj_a := bat.setColumn(yi_a,"day");
#	[dayname]([dayofweek](date_seq)).bat.setColumn("day"),
	bj_a := bat.setColumn(timestamp_eur,"West/Europe");
#	timestamp_eur.bat.setColumn("West/Europe"),
	o := algebra.find(tzn,"West/Europe");
	cj_a:timezone := algebra.find(tzdef,o);
	dj_a:bat[:oid,:bit] := mal.multiplex("mtime","dst",timestamp_eur,cj_a);
	ej_a := bat.setColumn(dj_a,"dst");
#	[dst](timestamp_eur,algebra.find(timezones,"West/Europe")).bat.setColumn("dst"),
	fj_a := bat.setColumn(timestamp_bra,"Andes/Brazil");
#	timestamp_bra.bat.setColumn("Andes/Brazil"),
	o := algebra.find(tzn,"Andes/Brazil");
	gj_a:timezone := algebra.fetch(tzdef,o);
	hj_a:bat[:oid,:bit] := mal.multiplex("mtime","dst",timestamp_bra,gj_a);
	ij_a := bat.setColumn(hj_a,"dst");
	io.print("print(date_seq,yi_a,timestamp_eur,dj_a,timestamp_bra,hj_a)");
	jj_a := io.print(date_seq,yi_a,timestamp_eur,dj_a,timestamp_bra,hj_a);
#	[dst](timestamp_bra,algebra.find(timezones,"Andes/Brazil")).bat.setColumn("dst"));
#
#quit;
#
#
##line 756 "/ufs/mk/monet_5-0/src/modules/atoms/monettime.mx"
#
