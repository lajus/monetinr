stdout of test 'tst901a` in directory 'monetdb5/mal` itself:


# 07:48:33 >  
# 07:48:33 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=36666 --set xrpc_port=40130 --set monet_prompt= --trace --dbname=mTests_src_mal  tst901a.mal
# 07:48:33 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## what is the overhead of MAL in multiplex situations
#profiler.setFilter("*","*");
#b:= bat.new(:oid,:lng);
#t0:= alarm.usec();
#barrier (v,i):= language.newRange(0:lng);
#	o:= calc.oid(i);
#	bat.insert(b,o,i);
#	redo (v,i):= language.nextElement(1:lng,1000000:lng);
#exit (v,i);
#t1:= alarm.usec();
#c:= algebra.copy(b);
#t2:= alarm.usec();
#x:= batcalc.+(b,b,c);
#t3:= alarm.usec();
#d1:= t1-t0;
#d2:= t3-t2;
#xc:= aggr.count(b);
#io.printf("count %d\n",xc);
#io.printf("make %d \n",d1);
#io.printf("multiplex %d\n",d2);
#
function user.main():void;
# what is the overhead of MAL in multiplex situations 
    profiler.setFilter("*","*");
    b := bat.new(:oid,:lng);
    INT_MAX := 2147483647;
    dbgmsk_restore := mdb.getDebug();
    dbgmsk_unset := calc.+(8,8388608);
    dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
    dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
    mdb.setDebug(dbgmsk_set);
    t0 := alarm.usec();
barrier i := 0:lng;
    o := calc.oid(i);
    bat.insert(b,o,i);
    redo i := iterator.next(1:lng,1000000:lng);
exit i;
    t1 := alarm.usec();
    mdb.setDebug(dbgmsk_restore);
    c := algebra.copy(b);
    t2 := alarm.usec();
    x := batcalc.+(b,c);
    t3 := alarm.usec();
    d1 := calc.-(t1,t0);
    d2 := calc.-(t3,t2);
    xc := aggr.count(b);
    io.printf("#count %d\n",xc);
    io.printf("#make %d \n",d1);
    io.printf("#multiplex %d\n",d2);
end main;
#count 1000000
#make 788950 
#multiplex 18410

# 07:48:36 >  
# 07:48:36 >  Done.
# 07:48:36 >  

