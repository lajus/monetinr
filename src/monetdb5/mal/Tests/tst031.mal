# testing the void semantics, both replace and delete fail (void != oid)
b:= bat.new(:oid,:int);
bat.append(b,0);
bat.append(b,1);
bat.append(b,2);
io.print(b);
#k:= 1@0;
#bat.replace(b,k,3);
#io.print(b);
#bat.delete(b,2@0);
#io.print(b);

# The oid cases, they should start as a vid column, both replace and delete work
io.print("oid as a vid column");
c:= bat.new(:oid,:int);
bat.insert(c,0@0,0);
bat.insert(c,1@0,1);
bat.insert(c,2@0,2);
io.print(c);
k:= 1@0;
bat.replace(c,k,3);
io.print(c);
bat.delete(c,2@0);
io.print(c);

# The oid cases using nils should fail on replace /delete
io.print("inserting nil's in a oid column");
d:= bat.new(:oid,:int);
bat.insert(d,nil:oid,0);
bat.insert(d,nil:oid,1);
bat.insert(d,nil:oid,2);
io.print(d);
k:= 1@0;
bat.replace(d,k,3);
io.print(d);
bat.delete(d,2@0);
io.print(d);

# can we handle a vid column starting differently
io.print("double oid as a vid column starting at 3,5");
e:= bat.new(:oid,:oid);
bat.insert(e,3@0,5@0);
bat.append(e,6@0);
io.print(e);

# the void,void bat they still consume space
# shouldn't that be avoided or limited to at most 1 pair?
io.print("void,void bat");
f:= bat.new(:oid,:oid);
bat.insert(f,nil:oid,nil:oid);
bat.insert(f,nil:oid,nil:oid);
io.print(f);

