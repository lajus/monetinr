stdout of test 'venks` in directory 'monetdb5/mal` itself:


# 20:15:09 >  
# 20:15:09 >  Mtimeout -timeout 60  mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//dbfarm" --set "sql_logdir=/ufs/mk/monet5//dblogs/logs/sql" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_open=true --set mapi_port=36566 --set xrpc_port=41437 --set monet_prompt= --trace --dbname=mTests_src_mal  venks.mal
# 20:15:09 >  

# MonetDB Server v5.1.0
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## test an expensive kintersect
## it illustrates weakness of the kintersect routine.
#
#t0:= alarm.usec();
#large:= bat.new(:oid,:sht);
#barrier (go,i):= language.newRange(0:lng);
#	k:= mmath.rand();
#	l:= calc.sht(k);
#	bat.append(large,l);
#	redo (go,i):= language.nextElement(1:lng,1000000:lng);
#exit (go,i);
#
#small:= bat.new(:oid,:sht);
##m:= aggr.min(b);
#m:= mmath.rand();
#l:= calc.sht(m);
#bat.insert(small,1@0,l);
##m:= aggr.max(b);
#m:= mmath.rand();
#l:= calc.sht(m);
#bat.insert(small,4@0,l);
##disturb order
#m:= mmath.rand();
#l:= calc.sht(m);
#bat.insert(small,3@0,l);
#
#largeR:= bat.reverse(large);
#smallR:= bat.reverse(small);
#
#t0:= alarm.usec();
#sj:= algebra.kintersect(largeR,smallR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#kintersect(largeRev,smallRev) %d\n",d0);
#v:= aggr.count(sj);
#io.printf("#count %d\n",v);
##io.print(sj);
#
#t0:= alarm.usec();
#j:= algebra.join(large,smallR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#join(large,smallRev) %d\n",d0);
#v:= aggr.count(j);
#io.printf("#count %d\n",v);
##io.print(j);
#
#t0:= alarm.usec();
#sj2:= algebra.kintersect(smallR,largeR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#kintersect(smallRev,largeRev) %d\n",d0);
#v:= aggr.count(sj2);
#io.printf("#count %d\n",v);
##io.print(sj2);
#
#t0:= alarm.usec();
#j:= algebra.join(small,smallR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#join(small,largeRev) %d\n",d0);
#v:= aggr.count(j);
#io.printf("#count %d\n",v);
##io.print(j);
#
function user.main():void;
# test an expensive kintersect 
# it illustrates weakness of the kintersect routine. 
    t0 := alarm.usec();
    l := 0:int;
    large := bat.new(:oid,:int);
    INT_MAX := 2147483647;
    dbgmsk_restore := mdb.getDebug();
    dbgmsk_unset := calc.+(8,8388608);
    dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
    dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
    mdb.setDebug(dbgmsk_set);
    r := mmath.srand(0:int);
barrier i := 0:lng;
    k := mmath.rand();
    l := calc.int(k);
    bat.append(large,l);
    redo i := iterator.next(1:lng,1000000:lng);
exit i;
    mdb.setDebug(dbgmsk_restore);
    small := bat.new(:oid,:int);
#m:= aggr.min(b); 
    m := mmath.rand();
    l := calc.int(m);
    bat.insert(small,1@0,l);
#m:= aggr.max(b); 
    m := mmath.rand();
    l := calc.int(m);
    bat.insert(small,4@0,l);
#disturb order 
    m := mmath.rand();
    l := calc.int(m);
    bat.insert(small,3@0,l);
    largeR := bat.reverse(large);
    smallR := bat.reverse(small);
    t0 := alarm.usec();
    sj := algebra.kintersect(large,small);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#kintersect(largeRev,smallRev) %d\n",d0);
    v := aggr.count(sj);
    io.printf("#count %d\n",v);
#io.print(sj); 
    t0 := alarm.usec();
    j := algebra.join(large,smallR);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#join(large,smallRev) %d\n",d0);
    v := aggr.count(j);
    io.printf("#count %d\n",v);
#io.print(j); 
    t0 := alarm.usec();
    sj2 := algebra.kintersect(small,large);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#kintersect(smallRev,largeRev) %d\n",d0);
    v := aggr.count(sj2);
    io.printf("#count %d\n",v);
#io.print(sj2); 
    t0 := alarm.usec();
    j := algebra.join(small,smallR);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#join(small,largeRev) %d\n",d0);
    v := aggr.count(j);
    io.printf("#count %d\n",v);
#io.print(j); 
end main;
#kintersect(largeRev,smallRev) 22265
#count 0
#join(large,smallRev) 6566
#count 0
#kintersect(smallRev,largeRev) 15212
#count 0
#join(small,largeRev) 48
#count 0

# 20:15:10 >  
# 20:15:10 >  Done.
# 20:15:10 >  

