stdout of test 'tst201` in directory 'monetdb5/mal` itself:


# 07:59:19 >  
# 07:59:19 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst201.mal </dev/null
# 07:59:19 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Mil compiler Version 1.0)
## Copyright (c) 1993-2001, CWI. All rights reserved.
#
## Predefined code segment
##use "mal/iterator";		CAUSES an ERROR!!
#	_v0:= oid(20000000);
#	_v1:= setoid(_v0);
##setoid(oid(20000000));
###test basic functionality of the BAT library.
###focussed on strings
###it includes insertions,deletions,selections, and joins.
##
#	_v2:= new(:str,:int);
#	b := _v2;
##b:= new(str,int);
#	_v3:= insert(b,"the",1);
##b.insert("the",1);
#	_v4:= insert(b,"quick",2);
##b.insert("quick",2);
#	_v5:= insert(b,"brown",3);
##b.insert("brown",3);
#	_v6:= insert(b,"fox",4);
##b.insert("fox",4);
#	_v7:= insert(b,"jumps",5);
##b.insert("jumps",5);
#	_v8:= insert(b,"over",6);
##b.insert("over",6);
#	_v9:= insert(b,"lazy",7);
##b.insert("lazy",7);
#	_v10:= insert(b,"dog",8);
##b.insert("dog",8);
#	_v11:= str(nil);
#	_v12:= insert(b,_v11,9);
##b.insert(str(nil),9);
#	_v13:= insert(b,".",10);
##b.insert(".",10);
#	_v14:= int(nil);
#	_v15:= insert(b,"",_v14);
##b.insert("",int(nil));
#	_v16:= str(nil);
#	_v17:= int(nil);
#	_v18:= insert(b,_v16,_v17);
##b.insert(str(nil),int(nil));
#	_v19:= print(b);
##b.print;
##
##
### Testing simple retrievals
#	_v20:= find(b,"the");
#	_v21:= print(_v20);
##b.find("the").print;
#	_v22:= find(b,"fox");
#	_v23:= print(_v22);
##b.find("fox").print;
#	_v24:= str(nil);
#	_v25:= find(b,_v24);
#	_v26:= print(_v25);
##b.find(str(nil)).print;
### This should cause an error
#	_v27:= find(b,"cat");
#	_v28:= print(_v27);
#catch MALException;
#	print(MALException);
#exit  MALException;
##b.find("cat").print;
##
### Can we delete them and re-insert them later on
#	_v29:= delete(b,"fox",4);
##b.delete("fox",4);
#	_v30:= delete(b,"the",1);
##b.delete("the",1);
#	_v31:= delete(b,".",10);
##b.delete(".",10);
#	_v32:= print(b);
##b.print;
##
#	_v33:= insert(b,"fox",4);
##b.insert("fox",4);
#	_v34:= insert(b,"the",1);
##b.insert("the",1);
#	_v35:= insert(b,".",10);
##b.insert(".",10);
#	_v36:= count(b);
#	_v37:= print(_v36);
##b.count.print;
##
### Lets cut out a few sections
#	_v38:= select(b,2,4);
#	_v39:= print(_v38);
##b.select(2,4).print;
#	_v40:= int(nil);
#	_v41:= select(b,7,_v40);
#	_v42:= print(_v41);
##b.select(7,int(nil)).print;
#	_v43:= int(nil);
#	_v44:= int(nil);
#	_v45:= select(b,_v43,_v44);
#	_v46:= print(_v45);
##b.select(int(nil),int(nil)).print;
##
### A 2-dimensional cut
#	_v47:= fragment(b,"fox","quick",1,5);
#	bns := _v47;
#	_v48:= print(bns);
##bns:=b.fragment("fox","quick",1,5);bns.print;
#	_v49:= str(nil);
#	_v50:= fragment(b,"fox",_v49,1,5);
#	_v51:= print(_v50);
##b.fragment("fox",str(nil),1,5).print;
#	_v52:= str(nil);
#	_v53:= int(nil);
#	_v54:= int(nil);
#	_v55:= fragment(b,"fox",_v52,_v53,_v54);
#	_v56:= print(_v55);
##b.fragment("fox",str(nil),int(nil),int(nil)).print;
#	_v57:= str(nil);
#	_v58:= int(nil);
#	_v59:= int(nil);
#	_v60:= fragment(b,_v57,"f",_v58,_v59);
#	_v61:= print(_v60);
##b.fragment(str(nil),"f",int(nil),int(nil)).print;
#	_v62:= reverse(b);
#	_v63:= int(nil);
#	_v64:= int(nil);
#	_v65:= str(nil);
#	_v66:= fragment(_v62,_v63,_v64,_v65,"f");
#	_v67:= print(_v66);
##b.reverse.fragment(int(nil),int(nil),str(nil),"f").print;
##
#	_v68:= reverse(bns);
#	_v69:= join(b,_v68);
#	bnj := _v69;
##bnj:= b.join(bns.reverse);
#	_v70:= print(bnj);
##bnj.print;
##
#	_v71:= reverse(bnj);
#	_v72:= semijoin(b,_v71);
#	bnk := _v72;
##bnk:= b.semijoin(bnj.reverse);
#	_v73:= print(bnk);
##bnk.print;
##
### testing the like command
#	_v74:= reverse(b);
#	_v75:= like(_v74,"ox");
#	_v76:= print(_v75);
##b.reverse.like("ox").print;
#	_v77:= reverse(b);
#	_v78:= like(_v77,"fo");
#	_v79:= print(_v78);
##b.reverse.like("fo").print;
#	_v80:= reverse(b);
#	_v81:= like(_v80,"fox");
#	_v82:= print(_v81);
##b.reverse.like("fox").print;
#	_v83:= reverse(b);
#	_v84:= like(_v83," fox");
#	_v85:= print(_v84);
##b.reverse.like(" fox").print;
##quit;
#
function user.main():void;
# Mil compiler Version 1.0) 
# Copyright (c) 1993-2001, CWI. All rights reserved. 
# Predefined code segment 
#use "mal/iterator";		CAUSES an ERROR!! 
    v0 := calc.oid(20000000);
    v1 := calc.setoid(v0);
#setoid(oid(20000000)); 
##test basic functionality of the BAT library. 
##focussed on strings 
##it includes bat.insertions,deletions,selections, and joins. 
    v2 := bat.new(:oid,:str);
    b := v2;
#b:= new(str,int); 
    v3 := bat.append(b,"the");
#b.append("the",1); 
    v4 := bat.append(b,"quick");
#b.append("quick",2); 
    v5 := bat.append(b,"brown");
#b.append("brown",3); 
    v6 := bat.append(b,"fox");
#b.append("fox",4); 
    v7 := bat.append(b,"jumps");
#b.append("jumps",5); 
    v8 := bat.append(b,"over");
#b.append("over",6); 
    v9 := bat.append(b,"lazy");
#b.append("lazy",7); 
    v10 := bat.append(b,"dog");
#b.append("dog",8); 
    v11 := calc.str(nil);
    v12 := bat.append(b,v11);
#b.append(str(nil),9); 
    v13 := bat.append(b,".");
#b.append(".",10); 
    v15 := bat.append(b,"");
#b.append("",int(nil)); 
    v16 := calc.str(nil);
    v18 := bat.append(b,v16);
#b.append(str(nil),int(nil)); 
    v19 := io.print(b);
#b.print; 
## Testing simple retrievals 
    br := bat.reverse(b);
    v20 := algebra.find(br,"the");
    v21 := io.print(v20);
#b.find("the").print; 
    v22 := algebra.find(br,"fox");
    v23 := io.print(v22);
#b.find("fox").print; 
    v24 := calc.str(nil);
    v25 := algebra.find(br,v24);
    v26 := io.print(v25);
#b.find(str(nil)).print; 
## This should cause an error 
    v27 := algebra.find(br,"cat");
    v28 := io.print(v27);
catch MALException:str ;
    io.print(MALException);
exit MALException:str ;
#b.find("cat").print; 
## Can we bat.delete them and re-append them later on 
    v29 := bat.delete(br,"fox");
#b.delete("fox",4); 
    v30 := bat.delete(br,"the");
#b.delete("the",1); 
    v31 := bat.delete(br,".");
#b.delete(".",10); 
    v32 := io.print(br);
#b.print; 
    b := bat.reverse(br);
    v33 := bat.append(b,"fox");
#b.append("fox",4); 
    v34 := bat.append(b,"the");
#b.append("the",1); 
    v35 := bat.append(b,".");
#b.append(".",10); 
    v36 := aggr.count(b);
    v37 := io.print(v36);
#b.count.print; 
## Lets cut out a few sections 
    br := bat.reverse(b);
    v38 := algebra.slice(b,2@0,4@0);
    v39 := io.print(v38);
#b.select(2,4).print; 
    v40 := calc.oid(nil);
    v41 := algebra.slice(b,7@0,v40);
    v42 := io.print(v41);
#b.select(7,int(nil)).print; 
    v43 := calc.oid(nil);
    v44 := calc.oid(nil);
    v45 := algebra.slice(b,v43,v44);
    v46 := io.print(v45);
#b.select(int(nil),int(nil)).print; 
## A 2-dimensional cut 
    v47 := algebra.fragment(b,1@0,5@0,"fox","quick");
    bns := v47;
    v48 := io.print(bns);
#bns:=b.fragment("fox","quick",1,5);bns.print; 
    v49 := calc.str(nil);
    v50 := algebra.fragment(b,1@0,5@0,"fox",v49);
    v51 := io.print(v50);
#b.fragment("fox",str(nil),1,5).print; 
    v52 := calc.str(nil);
    v53 := calc.oid(nil);
    v54 := calc.oid(nil);
    v55 := algebra.fragment(b,v53,v54,"fox",v52);
    v56 := io.print(v55);
#b.fragment("fox",str(nil),int(nil),int(nil)).print; 
    v57 := calc.str(nil);
    v58 := calc.oid(nil);
    v59 := calc.oid(nil);
    v60 := algebra.fragment(b,v58,v59,v57,"f");
    v61 := io.print(v60);
#b.fragment(str(nil),"f",int(nil),int(nil)).print; 
    v62 := bat.reverse(b);
    v63 := calc.oid(nil);
    v64 := calc.oid(nil);
    v65 := calc.str(nil);
    v66 := algebra.fragment(b,v63,v64,v65,"f");
    v67 := io.print(v66);
#b.reverse.fragment(int(nil),int(nil),str(nil),"f").print; 
    brr := bat.reverse(br);
    bnsr := bat.reverse(bns);
    v69 := algebra.join(brr,bnsr);
    bnj := v69;
#bnj:= b.join(bns.reverse); 
    v70 := io.print(bnj);
#bnj.print; 
    v71 := bat.reverse(bnj);
    v72 := algebra.semijoin(brr,v71);
    bnk := v72;
#bnk:= b.semijoin(bnj.reverse); 
    v73 := io.print(bnk);
#bnk.print; 
## testing the algebra.like command 
    v75 := algebra.like(b,"ox");
    v76 := io.print(v75);
#b.reverse.like("ox").print; 
    v78 := algebra.like(b,"fo");
    v79 := io.print(v78);
#b.reverse.like("fo").print; 
    v81 := algebra.like(b,"fox");
    v82 := io.print(v81);
#b.reverse.like("fox").print; 
    v84 := algebra.like(b," fox");
    v85 := io.print(v84);
#b.reverse.like(" fox").print; 
#quit; 
end main;
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ 0@0,	  "the"		  ]
[ 1@0,	  "quick"	  ]
[ 2@0,	  "brown"	  ]
[ 3@0,	  "fox"		  ]
[ 4@0,	  "jumps"	  ]
[ 5@0,	  "over"	  ]
[ 6@0,	  "lazy"	  ]
[ 7@0,	  "dog"		  ]
[ 8@0,	  nil		  ]
[ 9@0,	  "."		  ]
[ 10@0,	  ""		  ]
[ 11@0,	  nil		  ]
[ 0@0 ]
[ 3@0 ]
[ 11@0 ]
[ "MALException:algebra.find:GDK reported error.can not find element" ]
#-------------------------#
# h		tmp_4	  # name
# str		int	  # type
#-------------------------#
[ "",		  10@0	  ]
[ "quick",	  1@0	  ]
[ "brown",	  2@0	  ]
[ nil,		  11@0	  ]
[ "jumps",	  4@0	  ]
[ "over",	  5@0	  ]
[ "lazy",	  6@0	  ]
[ "dog",	  7@0	  ]
[ nil,		  8@0	  ]
[ 12 ]
#-------------------------#
# h		tmp_5	  # name
# str		int	  # type
#-------------------------#
[ 2@0,	  "brown"	  ]
#-----------------#
# h	tmp_6	  # name
# str	int	  # type
#-----------------#
[ 10@0,	  ""	  ]
[ 11@0,	  nil	  ]
[ 7@0,	  "dog"	  ]
[ 8@0,	  nil	  ]
[ 12@0,	  "fox"	  ]
[ 13@0,	  "the"	  ]
[ 14@0,	  "."	  ]
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ 10@0,	  ""		  ]
[ 1@0,	  "quick"	  ]
[ 2@0,	  "brown"	  ]
[ 11@0,	  nil		  ]
[ 4@0,	  "jumps"	  ]
[ 5@0,	  "over"	  ]
[ 6@0,	  "lazy"	  ]
[ 7@0,	  "dog"		  ]
[ 8@0,	  nil		  ]
[ 12@0,	  "fox"		  ]
[ 13@0,	  "the"		  ]
[ 14@0,	  "."		  ]
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ 1@0,	  "quick"	  ]
[ 4@0,	  "jumps"	  ]
[ 5@0,	  "over"	  ]
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ 1@0,	  "quick"	  ]
[ 4@0,	  "jumps"	  ]
[ 5@0,	  "over"	  ]
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ 1@0,	  "quick"	  ]
[ 4@0,	  "jumps"	  ]
[ 5@0,	  "over"	  ]
[ 6@0,	  "lazy"	  ]
[ 12@0,	  "fox"		  ]
[ 13@0,	  "the"		  ]
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ 10@0,	  ""		  ]
[ 2@0,	  "brown"	  ]
[ 11@0,	  nil		  ]
[ 7@0,	  "dog"		  ]
[ 8@0,	  nil		  ]
[ 14@0,	  "."		  ]
#-------------------------#
# h	t		  # name
# oid	str		  # type
#-------------------------#
[ 10@0,	  ""		  ]
[ 2@0,	  "brown"	  ]
[ 11@0,	  nil		  ]
[ 7@0,	  "dog"		  ]
[ 8@0,	  nil		  ]
[ 14@0,	  "."		  ]
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
[ 1@0,	  1@0	  ]
[ 4@0,	  4@0	  ]
[ 5@0,	  5@0	  ]
#-------------------------#
# h		tmp_14	  # name
# str		int	  # type
#-------------------------#
[ 1@0,	  "quick"	  ]
[ 4@0,	  "jumps"	  ]
[ 5@0,	  "over"	  ]
#-----------------#
# h	tmp_15	  # name
# int	str	  # type
#-----------------#
[ 12@0,	  "fox"	  ]
#-----------------#
# h	tmp_16	  # name
# int	str	  # type
#-----------------#
[ 12@0,	  "fox"	  ]
#-----------------#
# h	tmp_17	  # name
# int	str	  # type
#-----------------#
[ 12@0,	  "fox"	  ]
#-----------------#
# h	tmp_18	  # name
# int	str	  # type
#-----------------#

# 07:59:19 >  
# 07:59:19 >  Done.
# 07:59:19 >  

