# the OOM join experiment
# M= number elements in left
# N= number elements in right

# small: 100Mx100M
M:= 100000000:int;
N:= 100000000:int;

## large: 1Gx1G
#M:= 1000000000:int;
#N:= 1000000000:int;

include microbenchmark;
t0:= alarm.usec();
lbase:= microbenchmark.random(0:oid, M, nil:int);
rbase:= microbenchmark.random(0:oid, N, nil:int);
##lbase:= bat.new(:oid,:int);
##barrier (go,i):= language.newRange(0:int);
##	k:= mmath.rand();
##	o:= calc.oid(i);
##	bat.insert(lbase,o,k);
##	redo (go,i):= language.nextElement(1:int,M);
##exit (go,i);
##rbase:= bat.new(:oid,:int);
##barrier (go,i):= language.newRange(0:int);
##	k:= mmath.rand();
##	o:= calc.oid(i);
##	bat.insert(rbase,o,k);
##	redo (go,i):= language.nextElement(1:int,N);
##exit (go,i);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#loop %d\n",d0);
t0:= alarm.usec();
bat.save(lbase);
bat.save(rbase);

#cnt:= aggr.count(lbase);
#io.printf("#left:  %d\n",cnt);
#cnt:= aggr.count(rbase);
#io.printf("#right: %d\n",cnt);

#mdb.setTrace(true);

#get fresh copies for both experiments
t0:= alarm.usec();
lb2:= algebra.copy(lbase);
rb2:= algebra.copy(rbase);
rr2:= bat.reverse(rb2);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#copy %d\n",d0);
bat.save(lb2);
bat.save(rb2);
# the heart of the matter
t0:= alarm.usec();
w := algebra.join(lb2,rr2);
t1:= alarm.usec();
d0:= t1-t0;
d1:= d0;
io.printf("#join %d\n",d0);
cnt:= aggr.count(w);
io.print(cnt);
w  := nil;
rr2:= nil;
rb2:= nil;
lb2:= nil;

#get fresh copies for both experiments
t0:= alarm.usec();
lb2:= algebra.copy(lbase);
rb2:= algebra.copy(rbase);
rr2:= bat.reverse(rb2);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#copy %d\n",d0);
bat.save(lb2);
bat.save(rb2);
# the heart of the matter
t0:= alarm.usec();
w := algebra.partjoin(lb2,rr2);
t1:= alarm.usec();
d0:= t1-t0;
d1:= d0;
io.printf("#partjoin %d\n",d0);
cnt:= aggr.count(w);
io.print(cnt);
w  := nil;
rr2:= nil;
rb2:= nil;
lb2:= nil;

#get fresh copies for both experiments
t0:= alarm.usec();
lb2:= algebra.copy(lbase);
rb2:= algebra.copy(rbase);
rr2:= bat.reverse(rb2);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#copy %d\n",d0);
bat.save(lb2);
bat.save(rb2);
# the heart of the matter
t0:= alarm.usec();
w := algebra.partjoin(lb2,rr2);
t1:= alarm.usec();
d0:= t1-t0;
d1:= d0;
io.printf("#partjoin %d\n",d0);
cnt:= aggr.count(w);
io.print(cnt);
w  := nil;
rr2:= nil;
rb2:= nil;
lb2:= nil;

#
##get fresh copies for both experiments
#t0:= alarm.usec();
#lb2:= algebra.copy(lbase);
#rb2:= algebra.copy(rbase);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#copy %d\n",d0);
#rr2:= bat.reverse(rb2);
#bat.save(lb2);
#bat.save(rb2);
## the heart of the matter
#t0:= alarm.usec();
#w := algebra.blkjoin(lb2,rr2);
#t1:= alarm.usec();
#d0:= t1-t0;
#d1:= d0;
#io.printf("#blkjoin %d\n",d0);
#cnt:= aggr.count(w);
#io.print(cnt);
#w  := nil;
#rr2:= nil;
#rb2:= nil;
#lb2:= nil;
#
##get fresh copies for both experiments
#t0:= alarm.usec();
#lb2:= algebra.copy(lbase);
#rb2:= algebra.copy(rbase);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#copy %d\n",d0);
#bat.save(lb2);
#bat.save(rb2);
## what if you sort first
#t0:= alarm.usec();
#s1 := algebra.sortTail(lb2);
#t1:= alarm.usec();
#d0:= t1-t0;
#d1:= d0;
#io.printf("#sort %d\n",d0);
#lb2 := nil;
#bat.save(s1);
#t0:= alarm.usec();
#s2 := algebra.sortTail(rb2);
#t1:= alarm.usec();
#d0:= t1-t0;
#d1:= d1+d0;
#io.printf("#sort %d\n",d0);
#rb2 := nil;
#ss2:= bat.reverse(s2);
#bat.save(s2); 
#t0:= alarm.usec();
#w := algebra.join(s1,ss2);
#t1:= alarm.usec();
#d0:= t1-t0;
#d1:= d1+d0;
#io.printf("#join %d\n",d0);
#io.printf("#sortmerge join %d\n",d1);
#cnt:= aggr.count(w);
#io.print(cnt);
