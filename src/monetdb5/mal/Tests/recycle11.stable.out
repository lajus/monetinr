stdout of test 'recycle11` in directory 'monetdb5/mal` itself:


# 13:47:51 >  
# 13:47:51 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch1/milena/monet.DBG/var/MonetDB5/dbfarm" --set "sql_logdir=/export/scratch1/milena/monet.DBG/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=35909 --set xrpc_port=47862 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle11.mal
# 13:47:51 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:33756/
##test the basics of the recycler
## testing reuse-cover with different selection instructions
#
#function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
#	b:= bat.new(:oid,:int);
#	bat.insert(b,0@0,0);
#	bat.insert(b,1@0,1);
#	bat.insert(b,2@0,2);
#	bat.insert(b,3@0,3);
#	bat.insert(b,4@0,4);
#	bat.insert(b,5@0,5);
#	bat.insert(b,6@0,6);
#	bat.insert(b,7@0,7);
#	bat.insert(b,8@0,8);
#	bat.insert(b,9@0,9);
#	bat.insert(b,10@0,10);
#	bat.insert(b,11@0,11);
#	return bind:=b;
#end bind;
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
    b := bat.new(:oid,:int);
    bat.insert(b,0@0,0);
    bat.insert(b,1@0,1);
    bat.insert(b,2@0,2);
    bat.insert(b,3@0,3);
    bat.insert(b,4@0,4);
    bat.insert(b,5@0,5);
    bat.insert(b,6@0,6);
    bat.insert(b,7@0,7);
    bat.insert(b,8@0,8);
    bat.insert(b,9@0,9);
    bat.insert(b,10@0,10);
    bat.insert(b,11@0,11);
    return bind := b;
end bind;
#
#function qry(low:int, hgh:int);
#    b:= user.bind("schema","table","column",0);
#    s1:= algebra.select(b,low,hgh,false,false);
#    v:= low + hgh;
#    v1:= v/2;
#    v2:= calc.int(v1);
#    l2:= low +2;
#    h2:= hgh -2;
#    s2:= algebra.select(b,v2);
#    s3:= algebra.select(b,l2,h2);
#    s4:= algebra.select(b,l2,hgh,true,false);
#    io.print(s1);
#    io.print(s2);
#    io.print(s3);
#    io.print(s4);
#end qry;
function user.qry(low:int,hgh:int):void;
    b := user.bind("schema","table","column",0);
    s1 := algebra.select(b,low,hgh,false,false);
    v := calc.+(low,hgh);
    v1 := calc./(v,2);
    v2 := calc.int(v1);
    l2 := calc.+(low,2);
    h2 := calc.-(hgh,2);
    s2 := algebra.select(b,v2);
    s3 := algebra.select(b,l2,h2);
    s4 := algebra.select(b,l2,hgh,true,false);
    io.print(s1);
    io.print(s2);
    io.print(s3);
    io.print(s4);
end qry;
#
#
#recycle.setRetainPolicy(1);
#recycle.setReusePolicy(1);
#optimizer.recycle("user","qry");
#
#qry(1,9);
#
#recycle.dump();
#
function user.main():void;
#test the basics of the recycler 
# testing reuse-cover with different selection instructions 
    recycle.setAdmPolicy(1);
    recycle.setReusePolicy(1);
    user.qry(1,9);
    recycle.dump();
end main;
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 5@0,	  5	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 0 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 3 incache= 5 executed = 69 memory(KB)= 5 PersBat memory=0
#Cache search time= 1(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        1	400914	1	69	1	1	    _1 := user.bind("schema","table","column",0);
#        2	401021	4	49	1	1	    _6 := algebra.select(<tmp_20>,1,9,false,false);
#        3	400993	1	21	1	1	    _10 := algebra.select(<tmp_20>,5);
#        4	401010	1	16	1	1	    _12 := algebra.select(<tmp_20>,3,7);
#        5	401027	1	15	1	1	    _15 := algebra.select(<tmp_20>,3,9,true,false);

# 13:47:51 >  
# 13:47:51 >  Done.
# 13:47:51 >  

