# the bloom filter experiments
# M= number elements in left, N= number elements in right
# S= sample exchange size

N:= 10000000:int;
M:= 10000:int;
S:= 1000:int;

t0:= alarm.usec();
lbase:= bat.new(:oid,:int);
barrier (go,i):= language.newRange(0:int);
	k:= mmath.rand();
	o:= calc.oid(i);
	bat.insert(lbase,o,k);
	redo (go,i):= language.nextElement(1:int,M);
exit (go,i);
rbase:= bat.new(:oid,:int);
barrier (go,i):= language.newRange(0:int);
	k:= mmath.rand();
	o:= calc.oid(i);
	bat.insert(rbase,o,k);
	redo (go,i):= language.nextElement(1:int,N);
exit (go,i);
# share a sample
s1 := algebra.sample(lbase,S);
s2 := algebra.sample(rbase,S);
bat.append(lbase,s2);
bat.append(rbase,s1);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#loop %d\n",d0);
t0:= alarm.usec();

#get fresh copies for both experiments
lb1:= algebra.copy(lbase);
lb2:= algebra.copy(lbase);
rb1:= algebra.copy(rbase);
rb2:= algebra.copy(rbase);
t1:= alarm.usec();
#io.print(b);
#io.print(c);
d0:= t1-t0;
io.printf("#copy %d\n",d0);
t0:= alarm.usec();
cc:= bat.reverse(rb1);
j:= algebra.join(lb1,cc);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#join %d\n",d0);
t0:= alarm.usec();
cc:= bat.reverse(rb1);
j:= algebra.join(lb1,cc);
t1:= alarm.usec();
d0:= t1-t0;
cnt:= aggr.count(j);
io.print(cnt);

# the heart of the matter
t0:= alarm.usec();
(w,y):= algebra.prejoin(lb2,rb2,1);
t1:= alarm.usec();
d0:= t1-t0;
d1:= d0;
io.printf("#prejoin %d\n",d0);
t0:= alarm.usec();
cy:= bat.reverse(y);
h:= algebra.join(w,cy);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#join %d\n",d0);
cnt:= aggr.count(h);
io.print(cnt);
d1:= d1+d0;
io.printf("#join total %d\n",d1);
#io.print(w);
#io.print(y);

t0:= alarm.usec();
(w,y):= algebra.prejoin(lb2,rb2,4);
t1:= alarm.usec();
d0:= t1-t0;
d1:= d0;
io.printf("#prejoin %d\n",d0);
t0:= alarm.usec();
cy:= bat.reverse(y);
h:= algebra.join(w,cy);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#join %d\n",d0);
cnt:= aggr.count(h);
io.print(cnt);
d1:= d1+d0;
io.printf("#join total %d\n",d1);

t0:= alarm.usec();
(w,y):= algebra.prejoin(lb2,rb2,5);
t1:= alarm.usec();
d0:= t1-t0;
d1:= d0;
io.printf("#blockjoin %d\n",d0);
cnt:= aggr.count(w);
io.print(cnt);
io.printf("#join total %d\n",d1);

t0:= alarm.usec();
(w,y):= algebra.prejoin(lb2,rb2,6);
t1:= alarm.usec();
d0:= t1-t0;
d1:= d0;
io.printf("#blockjoin by StM %d\n",d0);
cnt:= aggr.count(w);
io.print(cnt);
io.printf("#join total %d\n",d1);

t0:= alarm.usec();
(w,y):= algebra.prejoin(lb2,rb2,7);
t1:= alarm.usec();
d0:= t1-t0;
d1:= d0;
io.printf("#blockjoin by StM, v2 %d\n",d0);
cnt:= aggr.count(w);
io.print(cnt);
io.printf("#join total %d\n",d1);
