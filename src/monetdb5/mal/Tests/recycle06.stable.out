stdout of test 'recycle06` in directory 'monetdb5/mal` itself:


# 15:54:58 >  
# 15:54:58 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch1/milena/monet.DBG/var/MonetDB5/dbfarm" --set "sql_logdir=/export/scratch1/milena/monet.DBG/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34583 --set xrpc_port=49067 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle06.mal
# 15:54:58 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://modi.ins.cwi.nl:34583/
## Test of LRU cache policy in limited cache (10 lines, 1 is always taken by fake 0)
#
#function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
#b:= bat.new(:oid,:int);
#barrier (go,i):= language.newRange(0:int);
#	bat.append(b,i);
#	redo (go,i):= language.nextElement(1:int,1000:int);
#exit (go,i);
#return bind:=b;
#end bind;
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
    b := bat.new(:oid,:int);
barrier i := 0:int;
    bat.append(b,i);
    redo i := iterator.next(1:int,1000:int);
exit i;
    return bind := b;
end bind;
#
#function qry(low:int, hgh:int);
#	b:= user.bind("schema","table","column",0);
#	s1:= algebra.select(b,low,hgh);
#	m0:= algebra.markT(s1, 0@0);
#	mr:= bat.reverse(m0);
#end qry;
function user.qry(low:int,hgh:int):void;
    b := user.bind("schema","table","column",0);
    s1 := algebra.select(b,low,hgh);
    m0 := algebra.markT(s1,0@0);
    mr := bat.reverse(m0);
end qry;
#
#recycle.setRetainPolicy(1);
#recycle.setReusePolicy(1);
#recycle.setCachePolicy(1,10);
#optimizer.recycle("user","qry");
#
#io.print("start");
#qry(100,120);
#qry(700,710);
#recycle.dump();
## The next query should evict the oldest leaf ( #4 reverse)
#qry(400,700);
#recycle.dump();
#
function user.main():void;
# Test of LRU cache policy in limited cache (10 lines, 1 is always taken by fake 0) 
    recycle.setAdmPolicy(1);
    recycle.setReusePolicy(1);
    recycle.setCachePolicy(1,9);
    io.print("start");
    user.qry(100,120);
    user.qry(700,710);
    recycle.dump();
# The next query should evict the oldest leaf (CL #3 reverse) 
    user.qry(400,700);
    recycle.dump();
end main;
[ "start" ]
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 10 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem= 8388608
#recycled = 1 incache= 7 executed = 13 saved time(ms)=     0.80 memory(KB)= 10
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#    1	860712	2	795	1	4	    _1 := user.bind("schema","table","column",0);
#    2	860682	1	44	4	1	    _6 := algebra.select(<tmp_20>,100,120);
#    3	860700	1	18	1	1	    _9 := algebra.markT(<tmp_21>,0@0);
#    4	860705	1	4	1	1	    _11 := bat.reverse(<tmp_22>);
#    5	860729	1	18	4	1	    _12 := algebra.select(<tmp_20>,700,710);
#    6	860741	1	11	1	1	    _15 := algebra.markT(<tmp_23>,0@0);
#    7	860746	1	5	1	1	    _16 := bat.reverse(<tmp_24>);
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 10 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem= 8388608
#recycled = 2 incache= 9 executed = 22 saved time(ms)=     1.59 memory(KB)= 13
#Cache search time= 1(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#    1	860818	3	795	1	4	    _1 := user.bind("schema","table","column",0);
#    2	860682	1	44	4	1	    _6 := algebra.select(<tmp_20>,100,120);
#    3	860700	1	18	1	1	    _9 := algebra.markT(<tmp_21>,0@0);
#    4	860729	1	18	4	1	    _11 := algebra.select(<tmp_20>,700,710);
#    5	860741	1	11	1	1	    _14 := algebra.markT(<tmp_23>,0@0);
#    6	860746	1	5	1	1	    _15 := bat.reverse(<tmp_24>);
#    7	860852	1	34	4	2	    _16 := algebra.select(<tmp_20>,400,700);
#    8	860864	1	12	2	1	    _18 := algebra.markT(<tmp_25>,0@0);
#    9	860879	1	15	1	1	    _19 := bat.reverse(<tmp_26>);

# 15:54:58 >  
# 15:54:58 >  Done.
# 15:54:58 >  

