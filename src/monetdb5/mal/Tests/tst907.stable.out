stdout of test 'tst907` in directory 'monetdb5/mal` itself:


# 08:01:38 >  
# 08:01:38 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst907.mal </dev/null
# 08:01:38 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#function one(base:int):int;
#	print(base);
#	return base;
#end one;
function user.one(base:int):int;
    io.print(base);
    return one := base;
end one;
#
#function three(base:int,x:int,y:int):int;
#	print(base);
#	return base;
#end three;
function user.three(base:int,x:int,y:int):int;
    io.print(base);
    return three := base;
end three;
#function pow(base:int,raise:int):int;
#        mg_a := calc.dbl(base);
#        ng_a := calc.dbl(raise);
#        og_a := *(mg_a,ng_a);
#        pg_a := calc.int(og_a);
#        return pg_a;
#end pow;
function user.pow(base:int,raise:int):int;
    mg_a := calc.dbl(base);
    ng_a := calc.dbl(raise);
    og_a := calc.*(mg_a,ng_a);
    pg_a := calc.int(og_a);
    return pow := pg_a;
end pow;
#k:= user.one(1);
#l:= user.three(1,2,3);
#p:= user.pow(1,2);
#
#b:=new(:int,:int);
#insert(b,1,1);
#
#print("do multiplex three test");
#z:=multiplex.tactics("three",b,2,3);
#print("do multiplex one test");
#z:=multiplex.tactics("one",b);
#print("do multiplex pow test");
#z:=multiplex.tactics("pow",b,2);
#print(z);
#
function user.main():void;
    k := user.one(1);
    l := user.three(1,2,3);
    p := user.pow(1,2);
    b := bat.new(:oid,:int);
    bat.append(b,1);
    io.print("do multiplex three test");
    X_23 := bat.reverse(b);
    X_25 := bat.new(nil:oid,nil:int);
barrier (X_29,X_30) := iterator.new(b);
    X_32 := user.three(X_30,2,3);
    X_33 := algebra.fetch(X_23,X_29);
    bat.insert(X_25,X_33,X_32);
    redo (X_29,X_30) := iterator.next(b);
exit (X_29,X_30);
    z:bat[:oid,:int]  := X_25;
    io.print("do multiplex one test");
    X_39 := bat.reverse(b);
    X_41 := bat.new(nil:oid,nil:int);
barrier (X_43,X_44) := iterator.new(b);
    X_46 := user.one(X_44);
    X_47 := algebra.fetch(X_39,X_43);
    bat.insert(X_41,X_47,X_46);
    redo (X_43,X_44) := iterator.next(b);
exit (X_43,X_44);
    z:bat[:oid,:int]  := X_41;
    io.print("do multiplex pow test");
    X_53 := bat.reverse(b);
    X_55 := bat.new(nil:oid,nil:int);
barrier (X_57,X_58) := iterator.new(b);
    X_60 := user.pow(X_58,2);
    X_61 := algebra.fetch(X_53,X_57);
    bat.insert(X_55,X_61,X_60);
    redo (X_57,X_58) := iterator.next(b);
exit (X_57,X_58);
    z:bat[:oid,:int]  := X_55;
    io.print(z);
end main;
[ 1 ]
[ 1 ]
[ "do multiplex three test" ]
[ 1 ]
[ "do multiplex one test" ]
[ 1 ]
[ "do multiplex pow test" ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 0@0,	  2	  ]

# 08:01:38 >  
# 08:01:38 >  Done.
# 08:01:38 >  

