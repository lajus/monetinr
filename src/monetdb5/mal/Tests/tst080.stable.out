stdout of test 'tst080` in directory 'monetdb5/mal` itself:


# 10:04:59 >  
# 10:04:59 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=40800 --set sql_port=57169 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst080.mal </dev/null
# 10:04:59 >  

# Monet Database Server V4.7.0
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##variable lifespan fits a block
##some illegal variable declarations
#	print(dummy); #error
#barrier allways:=true;
#	i:= 1;
#exit allways;
#barrier two:=true;
#	z:= i;	# error
#barrier three:=true;
#	z:=2; 	#ok
#	j:=3;
#exit three;
#	a:= j; #error
#barrier three:=true;
#	z:=j; 	#error
#exit three;
#exit two;
#	c:= z; #error
#
#
!ERROR: 'dummy' may not be used before being set in main[1]
!ERROR: 'i' may not be used before being set in main[6]
!ERROR: 'j' may not be used before being set in main[11]
!ERROR: 'j' may not be used before being set in main[13]
!ERROR: 'z' may not be used before being set in main[16]
function user.main():int;	# 0  (main:int)
    io.print(dummy);	# 1 IOprint_val ($1:int)<-(dummy:any)
barrier allways := true;	# 2  (allways:bit)<-($4:bit) jump 4
    i := 1;	# 3  (i:int)<-($6:int)
exit allways;	# 4  (allways:bit)
barrier two := true;	# 5  (two:bit)<-($4:bit) jump 15
    z := i;	# 6  (z:int)<-(i:int)
barrier three := true;	# 7  (three:bit)<-($4:bit) jump 10
    z := 2;	# 8  (z:int)<-($10:int)
    j := 3;	# 9  (j:int)<-($12:int)
exit three;	# 10  (three:bit)
    a := j;	# 11  (a:int)<-(j:int)
barrier three := true;	# 12  (three:bit)<-($4:bit) jump 14
    z := j;	# 13  (z:int)<-(j:int)
exit three;	# 14  (three:bit)
exit two;	# 15  (two:bit)
    c := z;	# 16  (c:int)<-(z:int)
end main;	# 17  

# 10:04:59 >  
# 10:04:59 >  Done.
# 10:04:59 >  

