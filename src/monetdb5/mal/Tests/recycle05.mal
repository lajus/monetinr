# Test of LRU cache policy in limited memory (12 RU)

function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
b:= bat.new(:oid,:int);
barrier i:= 0:int;
	bat.append(b,i);
	redo i:= iterator.next(1:int,1000:int);
exit i;
return bind:=b;
end bind;

function qry(low:int, hgh:int);
	b:= user.bind("schema","table","column",0);
	s1:= algebra.select(b,low,hgh);
	m0:= algebra.markT(s1, 0@0);
	mr:= bat.reverse(m0);
end qry;

recycle.setAdmPolicy(1);
recycle.setReusePolicy(1);
recycle.setCachePolicy(1,10,12);
optimizer.recycle("user","qry");

io.print("start");
qry(100,120);
qry(700,710);
recycle.dump();
# The next query should evict the oldest leaves (#2 mark an #3 reverse)
qry(400,700);
recycle.dump();


