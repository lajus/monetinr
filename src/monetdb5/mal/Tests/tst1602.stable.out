stdout of test 'tst1602` in directory 'monetdb5/mal` itself:


# 07:59:09 >  
# 07:59:09 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1602.mal </dev/null
# 07:59:09 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#	int_1M:= new(:void,:lng,1000000);
#	setSequenceBase(int_1M,0@0);
#
#	i:= 1000000:lng;
#barrier	sj_a:= true;
#	i:= i-1;
#	uj_a := i;
#	vj_a := >=(uj_a,0);
#barrier	tj_a:= vj_a;
#	xj_a := insert(int_1M,nil,i);
#redo	sj_a;
#exit	tj_a;
#exit	sj_a;
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#	M2:= new(:lng,:lng,1000000);
#	i:= 1000000:lng;
#barrier	sj_b:= true;
#	i:= i-1;
#	uj_b := i;
#	vj_b := >=(uj_b,0);
#barrier	tj_b:= vj_b;
#	xj_b := insert(M2,i,i);
#redo	sj_b;
#exit	tj_b;
#exit	sj_b;
#
#        t := alarm.time();
#        ug_b := bat.reverse(M2);
#        vg_b := algebra.join(M2,ug_b);
#        wg_b := aggr.count(vg_b);
#        xg_b := io.printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := calc.-(x,t);
#       ah_b := io.printf("%d ms\n",yg_b);
#
#
#        t := alarm.time();
#        ug_b := bat.reverse(M2);
#        vg_b := algebra.join(M2,ug_b);
#        wg_b := aggr.count(vg_b);
#        xg_b := io.printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := calc.-(x,t);
#       ah_b := io.printf("%d ms\n",yg_b);
#
#        t := alarm.time();
#        ug_b := bat.reverse(M2);
#        vg_b := algebra.join(M2,ug_b);
#        wg_b := aggr.count(vg_b);
#        xg_b := io.printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := calc.-(x,t);
#       ah_b := io.printf("%d ms\n",yg_b);
#
#
#        t := alarm.time();
#        ug_b := bat.reverse(M2);
#        vg_b := algebra.join(M2,ug_b);
#        wg_b := aggr.count(vg_b);
#        xg_b := io.printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := calc.-(x,t);
#      ah_b := io.printf("%d ms\n",yg_b);
#
#
function user.main():void;
    int_1M := bat.new(:oid,:lng,1000000);
    i := 1000000:lng;
    INT_MAX := 2147483647;
    dbgmsk_restore := mdb.getDebug();
    dbgmsk_unset := calc.+(8,8388608);
    dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
    dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
    mdb.setDebug(dbgmsk_set);
barrier sj_a := true;
    i := calc.-(i,1);
    uj_a := i;
    vj_a := calc.>=(uj_a,0);
barrier tj_a := vj_a;
    xj_a := bat.append(int_1M,i);
    redo sj_a;
exit tj_a;
exit sj_a;
    mdb.setDebug(dbgmsk_restore);
    t := alarm.time();
    ug_a := bat.reverse(int_1M);
    vg_a := algebra.join(int_1M,ug_a);
    wg_a := aggr.count(vg_a);
    xg_a := io.printf("#count %d = ",wg_a);
    x := alarm.time();
    yg_a := calc.-(x,t);
    ah_a := io.printf("%d ms\n",yg_a);
    t := alarm.time();
    ug_a := bat.reverse(int_1M);
    vg_a := algebra.join(int_1M,ug_a);
    wg_a := aggr.count(vg_a);
    xg_a := io.printf("#count %d = ",wg_a);
    x := alarm.time();
    yg_a := calc.-(x,t);
    ah_a := io.printf("%d ms\n",yg_a);
    t := alarm.time();
    ug_a := bat.reverse(int_1M);
    vg_a := algebra.join(int_1M,ug_a);
    wg_a := aggr.count(vg_a);
    xg_a := io.printf("#count %d = ",wg_a);
    x := alarm.time();
    yg_a := calc.-(x,t);
    ah_a := io.printf("%d ms\n",yg_a);
    t := alarm.time();
    ug_a := bat.reverse(int_1M);
    vg_a := algebra.join(int_1M,ug_a);
    wg_a := aggr.count(vg_a);
    xg_a := io.printf("#count %d = ",wg_a);
    x := alarm.time();
    yg_a := calc.-(x,t);
    ah_a := io.printf("%d ms\n",yg_a);
    M2 := bat.new(:oid,:lng,1000000);
    i := 1000000:lng;
    mdb.setDebug(dbgmsk_set);
barrier sj_b := true;
    i := calc.-(i,1);
    uj_b := i;
    vj_b := calc.>=(uj_b,0);
barrier tj_b := vj_b;
    xj_b := bat.append(M2,i);
    redo sj_b;
exit tj_b;
exit sj_b;
    mdb.setDebug(dbgmsk_restore);
    t := alarm.time();
    ug_b := bat.reverse(M2);
    vg_b := algebra.join(M2,ug_b);
    wg_b := aggr.count(vg_b);
    xg_b := io.printf("#count %d = ",wg_b);
    x := alarm.time();
    yg_b := calc.-(x,t);
    ah_b := io.printf("%d ms\n",yg_b);
    t := alarm.time();
    ug_b := bat.reverse(M2);
    vg_b := algebra.join(M2,ug_b);
    wg_b := aggr.count(vg_b);
    xg_b := io.printf("#count %d = ",wg_b);
    x := alarm.time();
    yg_b := calc.-(x,t);
    ah_b := io.printf("%d ms\n",yg_b);
    t := alarm.time();
    ug_b := bat.reverse(M2);
    vg_b := algebra.join(M2,ug_b);
    wg_b := aggr.count(vg_b);
    xg_b := io.printf("#count %d = ",wg_b);
    x := alarm.time();
    yg_b := calc.-(x,t);
    ah_b := io.printf("%d ms\n",yg_b);
    t := alarm.time();
    ug_b := bat.reverse(M2);
    vg_b := algebra.join(M2,ug_b);
    wg_b := aggr.count(vg_b);
    xg_b := io.printf("#count %d = ",wg_b);
    x := alarm.time();
    yg_b := calc.-(x,t);
    ah_b := io.printf("%d ms\n",yg_b);
end main;
#count 1000000 = 188 ms
#count 1000000 = 133 ms
#count 1000000 = 125 ms
#count 1000000 = 122 ms
#count 1000000 = 258 ms
#count 1000000 = 223 ms
#count 1000000 = 200 ms
#count 1000000 = 210 ms

# 07:59:13 >  
# 07:59:13 >  Done.
# 07:59:13 >  

