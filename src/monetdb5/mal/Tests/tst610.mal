#this test is used to monitor reference count setting
#create a persistent bat and destroy it in test 612
function refs():void;
    g:=bbp.getNames();
	gs:= algebra.sort(g);
    gr:=bbp.getRefCount();
    gl:=bbp.getLRefCount();
    io.table(gs,gr,gl);
end refs;

b:= bat.new(:oid,:int);
#refs();
bat.append(b,32);
#refs();
bat.setName(b,"tasks");
#refs();
bat.setPersistent(b,true);
#refs();
# it is committed 
io.print("open box");
bbp.open();
#user.refs();
t:bat[:oid,:int]:= bbp.bind("tasks");
io.print(t);
bbp.release(t);
#user.refs();
io.print(t);
catch MALException:str;
io.print("BAT was released");
exit MALException;
# the bat is still visible, because the destroy only
# marks it for deletion at the end of session or
# when the reference counters drop to zero
t:bat[:oid,:int]:= bbp.bind("tasks");
#user.refs();
# to really remove, we get rid of the current
# references as well
bbp.destroy(t,true);
#user.refs();
io.print(t);
catch MALException:str;
io.print("BAT was destroyed");
exit MALException;
z:bat[:oid,:any_2]:= bbp.bind("tasks");
io.print(z);
#it is not in the box anymore either
catch MALException:str;
io.print("BAT was removed from the box");
exit MALException;
