stdout of test 'tst4620` in directory 'monetdb5/optimizer` itself:


# 19:36:05 >  
# 19:36:05 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31892 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4620.mal < /dev/null
# 19:36:05 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function algebra.joinPath(a:bat[:any_1,:any_2],b:bat[:any_2,:any_3],c:bat[:any_3,:any_4]):bat[:any_1,:any_4];
    z := algebra.join(a,b);
    zz := algebra.join(z,c);
    return joinPath := zz;
end joinPath;
function user.main():void;
#some join operations 
    b := bat.new(:oid,:oid);
barrier v := 0@0:oid;
    bat.append(b,v);
    redo v := iterator.next(1@0:oid,100@0:oid);
exit v;
    i := aggr.count(b);
    io.print(i);
    c := algebra.select(b,0@0:oid,9@0:oid);
    i := aggr.count(c);
    io.print(i);
    d := algebra.select(b,0@0:oid,49@0:oid);
    i := aggr.count(d);
    io.print(i);
#to be detected by join inversion 
    zz := algebra.joinPath(b,c,d);
    i := aggr.count(zz);
    io.print(i);
    mdb.List();
[ 100 ]
[ 10 ]
[ 50 ]
[ 10 ]
function user.main():void;              #  0 main:void := user.main() {G}
#some join operations 
    b := bat.new(:oid,:oid);            #  2 b:bat[:oid,:oid] := CMDBATnew(_3:oid, _3:oid) {G}
barrier v := 0@0:oid;                   #  3 v:oid := _5:oid {J6}
    bat.append(b,v);                    #  4 _6:bat[:oid,:oid] := BKCappend_val_wrap(b:bat[:oid,:oid], v:oid) {G}
    redo v := iterator.next(1@0:oid,100@0:oid);#  5 v:oid := ITRnext_oid(_7:oid, _8:oid) {J4}
exit v;                                 #  6 v:oid 
    i := aggr.count(b);                 #  7 i:wrd := ALGcount_bat(b:bat[:oid,:oid]) {G}
    io.print(i);                        #  8 _10:void := IOprint_val(i:wrd) 
    c := algebra.select(b,0@0:oid,9@0:oid);#  9 c:bat[:oid,:oid] := ALGselect(b:bat[:oid,:oid], _5:oid, _12:oid) {G}
    i := aggr.count(c);                 # 10 i:wrd := ALGcount_bat(c:bat[:oid,:oid]) {G}
    io.print(i);                        # 11 _13:void := IOprint_val(i:wrd) 
    d := algebra.select(b,0@0:oid,49@0:oid);# 12 d:bat[:oid,:oid] := ALGselect(b:bat[:oid,:oid], _5:oid, _15:oid) {G}
    i := aggr.count(d);                 # 13 i:wrd := ALGcount_bat(d:bat[:oid,:oid]) {G}
    io.print(i);                        # 14 _16:void := IOprint_val(i:wrd) 
#to be detected by join inversion 
    zz := algebra.joinPath(b,c,d);      # 16 zz:bat[:oid,:oid] := algebra.joinPath(b:bat[:oid,:oid], c:bat[:oid,:oid], d:bat[:oid,:oid]) {PG}
    i := aggr.count(zz);                # 17 i:wrd := ALGcount_bat(zz:bat[:oid,:oid]) {G}
    io.print(i);                        # 18 _23:void := IOprint_val(i:wrd) 
    mdb.List();                         # 19 _24:void := MDBlistDetail() 

# 19:36:05 >  
# 19:36:05 >  Done.
# 19:36:05 >  

