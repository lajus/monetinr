stdout of test 'tst4800` in directory 'monetdb5/optimizer` itself:


# 23:53:00 >  
# 23:53:00 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4800.mal </dev/null
# 23:53:00 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_src_optimizer', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.f3():void;
    t1:bat[:oid,:int]  := bbp.bind("A_bat");
    t3 := array.grid(4096,64,1,0);
    t2 := array.grid(64,64,64,0);
    t4 := batcalc.*(64,t3);
    t5 := batcalc.+(t2,t4);
    t6 := batcalc.oid(t5);
    t7 := algebra.join(t6,t1);
    t8:bat[:oid,:int]  := bbp.bind("B_bat");
    t9 := array.grid(4096,64,1,0);
    t10 := array.grid(1,64,4096,0);
    t11 := batcalc.*(64,t10);
    t12 := batcalc.+(t9,t11);
    t13 := batcalc.oid(t12);
    t14 := algebra.join(t13,t8);
    t15 := batcalc.*(t7,t14);
    t16 := array.grid(64,64,64,0);
    t17 := array.grid(1,64,4096,0);
    t18 := batcalc.*(64,t17);
    t19 := batcalc.+(t16,t18);
    t20 := batcalc.oid(t19);
    t21 := array.grid(1,4096,1,0);
    t22 := aggr.sum(t15,t20,t21);
    top := t22;
    bat_0 := array.grid(64,64,1,0);
    bat_1 := array.grid(1,64,64,0);
    io.table(bat_0,bat_1,top);
#		io.table(bat_0,bat_1,top);
end f3;
function user.main():void;
# testing the optimization of the pocket calculator 
    mdb.List("user","f3");
end main;
function user.f3():void;                #  0 f3:void := user.f3() {G}
    t1:bat[:oid,:int]  := bbp.bind("A_bat");#  1 t1:bat[:oid,:int] := CMDbbpbind(_2:str) {G}
    t3 := array.grid(4096,64,1,0);      #  2 t3:bat[:oid,:int] := ARRAYgrid_int(_4:int, _5:int, _6:int, _7:int) {G}
    t2 := array.grid(64,64,64,0);       #  3 t2:bat[:oid,:int] := ARRAYgrid_int(_5:int, _5:int, _5:int, _7:int) {G}
    t4 := batcalc.*(64,t3);             #  4 t4:bat[:oid,:int] := CMDbatMULsignal(_5:int, t3:bat[:oid,:int]) {G}
    t5 := batcalc.+(t2,t4);             #  5 t5:bat[:oid,:int] := CMDbatADDsignal(t2:bat[:oid,:int], t4:bat[:oid,:int]) {G}
    t6 := batcalc.oid(t5);              #  6 t6:bat[:oid,:oid] := CMDconvertsignal_oid(t5:bat[:oid,:int]) {G}
    t7 := algebra.join(t6,t1);          #  7 t7:bat[:oid,:int] := ALGjoin(t6:bat[:oid,:oid], t1:bat[:oid,:int]) {G}
    t8:bat[:oid,:int]  := bbp.bind("B_bat");#  8 t8:bat[:oid,:int] := CMDbbpbind(_14:str) {G}
    t9 := array.grid(4096,64,1,0);      #  9 t9:bat[:oid,:int] := ARRAYgrid_int(_4:int, _5:int, _6:int, _7:int) {G}
    t10 := array.grid(1,64,4096,0);     # 10 t10:bat[:oid,:int] := ARRAYgrid_int(_6:int, _5:int, _4:int, _7:int) {G}
    t11 := batcalc.*(64,t10);           # 11 t11:bat[:oid,:int] := CMDbatMULsignal(_5:int, t10:bat[:oid,:int]) {G}
    t12 := batcalc.+(t9,t11);           # 12 t12:bat[:oid,:int] := CMDbatADDsignal(t9:bat[:oid,:int], t11:bat[:oid,:int]) {G}
    t13 := batcalc.oid(t12);            # 13 t13:bat[:oid,:oid] := CMDconvertsignal_oid(t12:bat[:oid,:int]) {G}
    t14 := algebra.join(t13,t8);        # 14 t14:bat[:oid,:int] := ALGjoin(t13:bat[:oid,:oid], t8:bat[:oid,:int]) {G}
    t15 := batcalc.*(t7,t14);           # 15 t15:bat[:oid,:int] := CMDbatMULsignal(t7:bat[:oid,:int], t14:bat[:oid,:int]) {G}
    t16 := array.grid(64,64,64,0);      # 16 t16:bat[:oid,:int] := ARRAYgrid_int(_5:int, _5:int, _5:int, _7:int) {G}
    t17 := array.grid(1,64,4096,0);     # 17 t17:bat[:oid,:int] := ARRAYgrid_int(_6:int, _5:int, _4:int, _7:int) {G}
    t18 := batcalc.*(64,t17);           # 18 t18:bat[:oid,:int] := CMDbatMULsignal(_5:int, t17:bat[:oid,:int]) {G}
    t19 := batcalc.+(t16,t18);          # 19 t19:bat[:oid,:int] := CMDbatADDsignal(t16:bat[:oid,:int], t18:bat[:oid,:int]) {G}
    t20 := batcalc.oid(t19);            # 20 t20:bat[:oid,:oid] := CMDconvertsignal_oid(t19:bat[:oid,:int]) {G}
    t21 := array.grid(1,4096,1,0);      # 21 t21:bat[:oid,:int] := ARRAYgrid_int(_6:int, _4:int, _6:int, _7:int) {G}
    t22 := aggr.sum(t15,t20,t21);       # 22 t22:bat[:oid,:lng] := AGGRsum3_lng(t15:bat[:oid,:int], t20:bat[:oid,:oid], t21:bat[:oid,:int]) {G}
    top := t22;                         # 23 top:bat[:oid,:lng] := t22:bat[:oid,:lng] {G}
    bat_0 := array.grid(64,64,1,0);     # 24 bat_0:bat[:oid,:int] := ARRAYgrid_int(_5:int, _5:int, _6:int, _7:int) {G}
    bat_1 := array.grid(1,64,64,0);     # 25 bat_1:bat[:oid,:int] := ARRAYgrid_int(_6:int, _5:int, _5:int, _7:int) {G}
    io.table(bat_0,bat_1,top);          # 26 _32:void := IOttable(bat_0:bat[:oid,:int], bat_1:bat[:oid,:int], top:bat[:oid,:lng]) {G}
#       io.table(bat_0,bat_1,top); 
end f3;                                 # 28  

# 23:53:00 >  
# 23:53:00 >  Done.
# 23:53:00 >  

