stdout of test 'inline02` in directory 'monetdb5/optimizer` itself:


# 18:00:43 >  
# 18:00:43 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34223 --set xrpc_port=43286 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline02.mal
# 18:00:43 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.foo{inline}(a:int,b:int):int;
    c := calc.+(a,b);
    return foo := c;
end foo;
function user.qry():void;
    b := bat.new(:oid,:int);
    bat.insert(b,0@0,1);
    zz := user.foo(1,2);
# base line test for inlining 
    z:bat[:oid,:int]  := mal.multiplex("user","foo",b,b);
    z:bat[:oid,:int]  := mal.multiplex("user","foo",b,2);
end qry;
function user.main():void;
# remapping inline functions 
# inspired by SQL module 
    mdb.List("user","qry");
end main;
function user.qry():void;               #  0 qry:void := user.qry() {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.insert(b,0@0,1);                #  2 _4:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _5:oid, _6:int) {G}
    X_16 := calc.+(1,2);                #  3 _16:int := CMDvarADDsignal(_6:int, _8:int) 
    zz := X_16;                         #  4 zz:int := _16:int 
# base line test for inlining 
    X_20 := batcalc.+(b,b);             #  6 _20:bat[:oid,:int] := CMDbatADDsignal(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    z:bat[:oid,:int] {inline} := X_20;  #  7 z:bat[:oid,:int] := _20:bat[:oid,:int] {G}
    X_24 := batcalc.+(b,2);             #  8 _24:bat[:oid,:int] := CMDbatADDsignal(b:bat[:oid,:int], _8:int) {G}
    z:bat[:oid,:int] {inline} := X_24;  #  9 z:bat[:oid,:int] := _24:bat[:oid,:int] {G}
end qry;                                # 10  

# 18:00:43 >  
# 18:00:43 >  Done.
# 18:00:43 >  

