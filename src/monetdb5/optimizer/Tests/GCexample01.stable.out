stdout of test 'GCexample01` in directory 'monetdb5/optimizer` itself:


# 23:17:49 >  
# 23:17:49 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=33385 --set xrpc_port=42531 --set monet_prompt= --trace --dbname=mTests_src_optimizer  GCexample01.mal
# 23:17:49 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.qry():void;
    b := bat.new(:oid,:int);
    c := bat.new(:oid,:int);
    d := bat.new(:oid,:int);
    bat.append(b,1);
barrier (x,z) := iterator.new(b);
    io.print(x);
exit (x,z);
barrier (x,z) := iterator.new(c);
    io.print(x);
    redo (x,z) := iterator.next(c);
exit (x,z);
# do not close d, it may be reused 
barrier go := true;
    io.print(d);
    redo go := true;
exit go;
end qry;
function user.main():void;
#checking proper handling of scopes for the garbage collector 
    mdb.List("user","qry");
end main;
function user.qry():void;               #  0 qry:void := user.qry() {G}
    b:bat[:oid,:int]  := bat.new(:oid,:int);#  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    c:bat[:oid,:int]  := bat.new(:oid,:int);#  2 c:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    d:bat[:oid,:int]  := bat.new(:oid,:int);#  3 d:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.append(b,1);                    #  4 _6:bat[:oid,:int] := BKCappend_val_wrap(b:bat[:oid,:int], _7:int) {G}
barrier (x,z) := iterator.new(b);       #  5 (x:oid, z:int) := ITRbunIterator(b:bat[:oid,:int]) {GJ7}
    io.print(x);                        #  6 _10:void := IOprint_val(x:oid) 
exit (x,z);                             #  7 (x:oid, z:int) 
    b:bat[:oid,:int]  := nil:bat[:oid,:int];#  8 b:bat[:oid,:int] := _17:bat[:oid,:int] {G}
barrier (x,z) := iterator.new(c);       #  9 (x:oid, z:int) := ITRbunIterator(c:bat[:oid,:int]) {GJ12}
    io.print(x);                        # 10 _11:void := IOprint_val(x:oid) 
    redo (x,z) := iterator.next(c);     # 11 (x:oid, z:int) := ITRbunNext(c:bat[:oid,:int]) {GJ10}
exit (x,z);                             # 12 (x:oid, z:int) 
    c:bat[:oid,:int]  := nil:bat[:oid,:int];# 13 c:bat[:oid,:int] := _19:bat[:oid,:int] {G}
# do not close d, it may be reused 
barrier go := true;                     # 15 go:bit := _14:bit {J18}
    io.print(d);                        # 16 _15:void := IOprint_val(d:bat[:oid,:int]) {G}
    redo go := true;                    # 17 go:bit := _14:bit {J16}
exit go;                                # 18 go:bit 
    d:bat[:oid,:int]  := nil:bat[:oid,:int];# 19 d:bat[:oid,:int] := _21:bat[:oid,:int] {G}
end qry;                                # 20  

# 23:17:49 >  
# 23:17:49 >  Done.
# 23:17:49 >  

