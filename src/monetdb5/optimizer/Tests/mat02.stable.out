stdout of test 'mat02` in directory 'monetdb5/optimizer` itself:


# 23:56:30 >  
# 23:56:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=35317 --set sql_port=48831 --set xquery_port=50010 --set monet_prompt= --trace --dbname=mTests_src_optimizer  mat02.mal < /dev/null
# 23:56:30 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
#
## select count(name) from tables
#include sql;
#mdb.list();
## simulate the SQL behavior
##   v2:bat[:void,:int]  := sql.bind("sys","ptables","id",0);
##   v60:bat[:void,:str]  := sql.bind("sys","ptables","name",0);
#    v2v0:= bat.new(:void,:int);
#    bat.insert(v2v0,0@0,0);
#    v2v1:= bat.new(:void,:int);
#    bat.insert(v2v1,1@0,1);
#    v2v2:= bat.new(:void,:int);
#	bat.setSequenceBase(v2v2,2@0);
#    bat.insert(v2v2,nil,2);
#    v2 := mat.new(v2v0,v2v1,v2v2);
#io.print(v2v2);
#	v60a := bat.new(:void,:str);
#	bat.insert(v60a,0@0,"first");
#	v60b := bat.new(:void,:str);
#	bat.insert(v60b,1@0,"second");
#	v60:= mat.new(v60a,v60b);
#
##   v23:bat[:void,:int]  := sql.bindvdbat("sys","ptables",0);
#    v23:= bat.new(:void,:int);
##   v68:bat[:void,:str]  := sql.bind("sys","ptables","name",0);
#	v68:= bat.new(:void,:str);
#
##   v8:bat[:void,:oid]  := sql.bindvdbat("sys","ptables",0);
#    v8:= bat.new(:void,:oid);
#    v10 := bat.reverse(v8);
#    v12 := algebra.kdifference(v2,v10);
#    v17 := algebra.markT(v12,0@0);
#    v19 := bat.reverse(v17);
#    v21 := algebra.join(v19,v2);
##   v26:bat[:void,:oid]  := sql.bindvdbat("sys","ttables",0);
#    v26:= bat.new(:void,:oid);
#    v28 := bat.reverse(v26);
#    v30 := algebra.kdifference(v23,v28);
#    v34 := algebra.markT(v30,0@0);
#    v36 := bat.reverse(v34);
#    v38 := algebra.join(v36,v23);
#    v40 := bat.setAccess(v21,"w");
#    bat.append(v40,v38);
#    v47 := algebra.markT(v40,0@0);
#    v49 := bat.reverse(v47);
#    v51 := algebra.join(v49,v40);
#    v56 := algebra.markT(v51,0@0);
#    v58 := bat.reverse(v56);
#    v66 := algebra.join(v19,v60);
#    v71 := algebra.join(v36,v68);
#    v73 := bat.setAccess(v66,"w");
#    bat.append(v73,v71);
#    v77 := algebra.join(v49,v73);
#    v79 := algebra.join(v58,v77);
##   v81 := sql.resultSet(1,3,v79);
##   sql.rsColumn(v81,"tables","name","varchar",1024,0,v79);
#    io.print(v79);
#
#optimizer.multitable();
#
#
function user.main():void;	# 0  (main:void)
# select count(name) from tables 	# 1  (_1:str)
    mdb.list();	# 2 MDBlist (_2:void)
# simulate the SQL behavior 	# 3  (_3:str)
#   v2:bat[:void,:int]  := sql.bind("sys","ptables","id",0); 	# 4  (_4:str)
#   v60:bat[:void,:str]  := sql.bind("sys","ptables","name",0); 	# 5  (_5:str)
    v2v0 := bat.new(:void,:int);	# 6 CMDBATnew (v2v0:bat[:void,:int])<-(_7:void)(_8:int)
    bat.insert(v2v0,0@0,0);	# 7 BKCinsert_bun_oid_any (_9:void)<-(v2v0:bat[:void,:int])(_10:oid)(_11:int)
    v2v1 := bat.new(:void,:int);	# 8 CMDBATnew (v2v1:bat[:void,:int])<-(_7:void)(_8:int)
    bat.insert(v2v1,1@0,1);	# 9 BKCinsert_bun_oid_any (_13:void)<-(v2v1:bat[:void,:int])(_14:oid)(_15:int)
    v2v2 := bat.new(:void,:int);	# 10 CMDBATnew (v2v2:bat[:void,:int])<-(_7:void)(_8:int)
    bat.setSequenceBase(v2v2,2@0);	# 11 BKCsetSequenceBase (_17:bat[:void,:int])<-(v2v2:bat[:void,:int])(_18:oid)
    bat.insert(v2v2,nil,2);	# 12 BKCinsert_bun (_19:void)<-(v2v2:bat[:void,:int])(_20:void)(_21:int)
    v2 := mat.new(v2v0,v2v1,v2v2);	# 13 MATnew (v2:bat[:void,:int])<-(v2v0:bat[:void,:int])(v2v1:bat[:void,:int])(v2v2:bat[:void,:int])
    io.print(v2v2);	# 14 IOprint_val (_23:int)<-(v2v2:bat[:void,:int])
    v60a := bat.new(:void,:str);	# 15 CMDBATnew (v60a:bat[:void,:str])<-(_7:void)(_25:str)
    bat.insert(v60a,0@0,"first");	# 16 BKCinsert_bun_oid_str (_26:void)<-(v60a:bat[:void,:str])(_10:oid)(_27:str)
    v60b := bat.new(:void,:str);	# 17 CMDBATnew (v60b:bat[:void,:str])<-(_7:void)(_29:str)
    bat.insert(v60b,1@0,"second");	# 18 BKCinsert_bun_oid_str (_30:void)<-(v60b:bat[:void,:str])(_14:oid)(_31:str)
    v60 := mat.new(v60a,v60b);	# 19 MATnew (v60:bat[:void,:str])<-(v60a:bat[:void,:str])(v60b:bat[:void,:str])
#   v23:bat[:void,:int]  := sql.bindvdbat("sys","ptables",0); 	# 20  (_33:str)
    v23 := bat.new(:void,:int);	# 21 CMDBATnew (v23:bat[:void,:int])<-(_7:void)(_8:int)
#   v68:bat[:void,:str]  := sql.bind("sys","ptables","name",0); 	# 22  (_35:str)
    v68 := bat.new(:void,:str);	# 23 CMDBATnew (v68:bat[:void,:str])<-(_7:void)(_37:str)
#   v8:bat[:void,:oid]  := sql.bindvdbat("sys","ptables",0); 	# 24  (_38:str)
    v8 := bat.new(:void,:oid);	# 25 CMDBATnew (v8:bat[:void,:oid])<-(_7:void)(_40:oid)
    v10 := bat.reverse(v8);	# 26 BKCreverse (v10:bat[:oid,:void])<-(v8:bat[:void,:oid])
    _73 := algebra.kdifference(v2v0,v10);	# 27 ALGkdiff (_73:bat[:oid,:int])<-(v2v0:bat[:void,:int])(v10:bat[:oid,:void])
    _74 := algebra.kdifference(v2v1,v10);	# 28 ALGkdiff (_74:bat[:oid,:int])<-(v2v1:bat[:void,:int])(v10:bat[:oid,:void])
    _75 := algebra.kdifference(v2v2,v10);	# 29 ALGkdiff (_75:bat[:oid,:int])<-(v2v2:bat[:void,:int])(v10:bat[:oid,:void])
    v12 := mat.new(_73,_74,_75);	# 30 MATnew (v12:bat[:oid,:int])<-(_73:bat[:oid,:int])(_74:bat[:oid,:int])(_75:bat[:oid,:int])
    _76 := algebra.markT(_73,0@0);	# 31 ALGtmark (_76:bat[:oid,:void])<-(_73:bat[:oid,:int])(_10:oid)
    _77 := algebra.markT(_74,0@0);	# 32 ALGtmark (_77:bat[:oid,:void])<-(_74:bat[:oid,:int])(_10:oid)
    _78 := algebra.markT(_75,0@0);	# 33 ALGtmark (_78:bat[:oid,:void])<-(_75:bat[:oid,:int])(_10:oid)
    v17 := mat.new(_76,_77,_78);	# 34 MATnew (v17:bat[:oid,:void])<-(_76:bat[:oid,:void])(_77:bat[:oid,:void])(_78:bat[:oid,:void])
    _79 := bat.reverse(_76);	# 35 BKCreverse (_79:bat[:void,:oid])<-(_76:bat[:oid,:void])
    _80 := bat.reverse(_77);	# 36 BKCreverse (_80:bat[:void,:oid])<-(_77:bat[:oid,:void])
    _81 := bat.reverse(_78);	# 37 BKCreverse (_81:bat[:void,:oid])<-(_78:bat[:oid,:void])
    v19 := mat.new(_79,_80,_81);	# 38 MATnew (v19:bat[:void,:oid])<-(_79:bat[:void,:oid])(_80:bat[:void,:oid])(_81:bat[:void,:oid])
    v19 := mat.pack(_79,_80,_81);	# 39 MATpack (v19:bat[:void,:oid])<-(_79:bat[:void,:oid])(_80:bat[:void,:oid])(_81:bat[:void,:oid])
    _82 := algebra.join(v19,v2v0);	# 40 ALGjoin (_82:bat[:void,:int])<-(v19:bat[:void,:oid])(v2v0:bat[:void,:int])
    _83 := algebra.join(v19,v2v1);	# 41 ALGjoin (_83:bat[:void,:int])<-(v19:bat[:void,:oid])(v2v1:bat[:void,:int])
    _84 := algebra.join(v19,v2v2);	# 42 ALGjoin (_84:bat[:void,:int])<-(v19:bat[:void,:oid])(v2v2:bat[:void,:int])
    v21 := mat.new(_82,_83,_84);	# 43 MATnew (v21:bat[:void,:int])<-(_82:bat[:void,:int])(_83:bat[:void,:int])(_84:bat[:void,:int])
#   v26:bat[:void,:oid]  := sql.bindvdbat("sys","ttables",0); 	# 44  (_46:str)
    v26 := bat.new(:void,:oid);	# 45 CMDBATnew (v26:bat[:void,:oid])<-(_7:void)(_48:oid)
    v28 := bat.reverse(v26);	# 46 BKCreverse (v28:bat[:oid,:void])<-(v26:bat[:void,:oid])
    v30 := algebra.kdifference(v23,v28);	# 47 ALGkdiff (v30:bat[:oid,:int])<-(v23:bat[:void,:int])(v28:bat[:oid,:void])
    v34 := algebra.markT(v30,0@0);	# 48 ALGtmark (v34:bat[:oid,:void])<-(v30:bat[:oid,:int])(_52:oid)
    v36 := bat.reverse(v34);	# 49 BKCreverse (v36:bat[:void,:oid])<-(v34:bat[:oid,:void])
    v38 := algebra.join(v36,v23);	# 50 ALGjoin (v38:bat[:void,:int])<-(v36:bat[:void,:oid])(v23:bat[:void,:int])
    _85 := bat.setAccess(_82,"w");	# 51 BKCsetAccess (_85:bat[:void,:int])<-(_82:bat[:void,:int])(_56:str)
    _86 := bat.setAccess(_83,"w");	# 52 BKCsetAccess (_86:bat[:void,:int])<-(_83:bat[:void,:int])(_56:str)
    _87 := bat.setAccess(_84,"w");	# 53 BKCsetAccess (_87:bat[:void,:int])<-(_84:bat[:void,:int])(_56:str)
    v40 := mat.new(_85,_86,_87);	# 54 MATnew (v40:bat[:void,:int])<-(_85:bat[:void,:int])(_86:bat[:void,:int])(_87:bat[:void,:int])
    bat.append(_87,v38);	# 55 BKCbat_append_void_bat_wrap (_88:void)<-(_87:bat[:void,:int])(v38:bat[:void,:int])
    _89 := algebra.markT(_85,0@0);	# 56 ALGtmark (_89:bat[:oid,:void])<-(_85:bat[:void,:int])(_52:oid)
    _90 := algebra.markT(_86,0@0);	# 57 ALGtmark (_90:bat[:oid,:void])<-(_86:bat[:void,:int])(_52:oid)
    _91 := algebra.markT(_87,0@0);	# 58 ALGtmark (_91:bat[:oid,:void])<-(_87:bat[:void,:int])(_52:oid)
    v47 := mat.new(_89,_90,_91);	# 59 MATnew (v47:bat[:oid,:void])<-(_89:bat[:oid,:void])(_90:bat[:oid,:void])(_91:bat[:oid,:void])
    _92 := bat.reverse(_89);	# 60 BKCreverse (_92:bat[:void,:oid])<-(_89:bat[:oid,:void])
    _93 := bat.reverse(_90);	# 61 BKCreverse (_93:bat[:void,:oid])<-(_90:bat[:oid,:void])
    _94 := bat.reverse(_91);	# 62 BKCreverse (_94:bat[:void,:oid])<-(_91:bat[:oid,:void])
    v49 := mat.new(_92,_93,_94);	# 63 MATnew (v49:bat[:void,:oid])<-(_92:bat[:void,:oid])(_93:bat[:void,:oid])(_94:bat[:void,:oid])
    v49 := mat.pack(_92,_93,_94);	# 64 MATpack (v49:bat[:void,:oid])<-(_92:bat[:void,:oid])(_93:bat[:void,:oid])(_94:bat[:void,:oid])
    _95 := algebra.join(v49,_85);	# 65 ALGjoin (_95:bat[:void,:int])<-(v49:bat[:void,:oid])(_85:bat[:void,:int])
    _96 := algebra.join(v49,_86);	# 66 ALGjoin (_96:bat[:void,:int])<-(v49:bat[:void,:oid])(_86:bat[:void,:int])
    _97 := algebra.join(v49,_87);	# 67 ALGjoin (_97:bat[:void,:int])<-(v49:bat[:void,:oid])(_87:bat[:void,:int])
    v51 := mat.new(_95,_96,_97);	# 68 MATnew (v51:bat[:void,:int])<-(_95:bat[:void,:int])(_96:bat[:void,:int])(_97:bat[:void,:int])
    _98 := algebra.markT(_95,0@0);	# 69 ALGtmark (_98:bat[:oid,:void])<-(_95:bat[:void,:int])(_52:oid)
    _99 := algebra.markT(_96,0@0);	# 70 ALGtmark (_99:bat[:oid,:void])<-(_96:bat[:void,:int])(_52:oid)
    _100 := algebra.markT(_97,0@0);	# 71 ALGtmark (_100:bat[:oid,:void])<-(_97:bat[:void,:int])(_52:oid)
    v56 := mat.new(_98,_99,_100);	# 72 MATnew (v56:bat[:oid,:void])<-(_98:bat[:oid,:void])(_99:bat[:oid,:void])(_100:bat[:oid,:void])
    _101 := bat.reverse(_98);	# 73 BKCreverse (_101:bat[:void,:oid])<-(_98:bat[:oid,:void])
    _102 := bat.reverse(_99);	# 74 BKCreverse (_102:bat[:void,:oid])<-(_99:bat[:oid,:void])
    _103 := bat.reverse(_100);	# 75 BKCreverse (_103:bat[:void,:oid])<-(_100:bat[:oid,:void])
    v58 := mat.new(_101,_102,_103);	# 76 MATnew (v58:bat[:void,:oid])<-(_101:bat[:void,:oid])(_102:bat[:void,:oid])(_103:bat[:void,:oid])
    _104 := algebra.join(v19,v60a);	# 77 ALGjoin (_104:bat[:void,:str])<-(v19:bat[:void,:oid])(v60a:bat[:void,:str])
    _105 := algebra.join(v19,v60b);	# 78 ALGjoin (_105:bat[:void,:str])<-(v19:bat[:void,:oid])(v60b:bat[:void,:str])
    v66 := mat.new(_104,_105);	# 79 MATnew (v66:bat[:void,:str])<-(_104:bat[:void,:str])(_105:bat[:void,:str])
    v71 := algebra.join(v36,v68);	# 80 ALGjoin (v71:bat[:void,:str])<-(v36:bat[:void,:oid])(v68:bat[:void,:str])
    _106 := bat.setAccess(_104,"w");	# 81 BKCsetAccess (_106:bat[:void,:str])<-(_104:bat[:void,:str])(_56:str)
    _107 := bat.setAccess(_105,"w");	# 82 BKCsetAccess (_107:bat[:void,:str])<-(_105:bat[:void,:str])(_56:str)
    v73 := mat.new(_106,_107);	# 83 MATnew (v73:bat[:void,:str])<-(_106:bat[:void,:str])(_107:bat[:void,:str])
    bat.append(_107,v71);	# 84 BKCbat_append_void_bat_wrap (_108:void)<-(_107:bat[:void,:str])(v71:bat[:void,:str])
    _109 := algebra.join(v49,_106);	# 85 ALGjoin (_109:bat[:void,:str])<-(v49:bat[:void,:oid])(_106:bat[:void,:str])
    _110 := algebra.join(v49,_107);	# 86 ALGjoin (_110:bat[:void,:str])<-(v49:bat[:void,:oid])(_107:bat[:void,:str])
    v77 := mat.new(_109,_110);	# 87 MATnew (v77:bat[:void,:str])<-(_109:bat[:void,:str])(_110:bat[:void,:str])
    v58 := mat.pack(_101,_102,_103);	# 88 MATpack (v58:bat[:void,:oid])<-(_101:bat[:void,:oid])(_102:bat[:void,:oid])(_103:bat[:void,:oid])
    _111 := algebra.join(v58,_109);	# 89 ALGjoin (_111:bat[:void,:str])<-(v58:bat[:void,:oid])(_109:bat[:void,:str])
    _112 := algebra.join(v58,_110);	# 90 ALGjoin (_112:bat[:void,:str])<-(v58:bat[:void,:oid])(_110:bat[:void,:str])
    v79 := mat.new(_111,_112);	# 91 MATnew (v79:bat[:void,:str])<-(_111:bat[:void,:str])(_112:bat[:void,:str])
#   v81 := sql.resultSet(1,3,v79); 	# 92  (_69:str)
#   sql.rsColumn(v81,"tables","name","varchar",1024,0,v79); 	# 93  (_70:str)
    v79 := mat.pack(_111,_112);	# 94 MATpack (v79:bat[:void,:str])<-(_111:bat[:void,:str])(_112:bat[:void,:str])
    io.print(v79);	# 95 IOprint_val (_71:int)<-(v79:bat[:void,:str])
end main;	# 96  
function user.main():void;
    mdb.list();
# simulate the SQL behavior 
#   v2:bat[:void,:int]  := sql.bind("sys","ptables","id",0); 
#   v60:bat[:void,:str]  := sql.bind("sys","ptables","name",0); 
    v2v0 := bat.new(:void,:int);
    bat.insert(v2v0,0@0,0);
    v2v1 := bat.new(:void,:int);
    bat.insert(v2v1,1@0,1);
    v2v2 := bat.new(:void,:int);
    bat.setSequenceBase(v2v2,2@0);
    bat.insert(v2v2,nil,2);
    v2 := mat.new(v2v0,v2v1,v2v2);
    io.print(v2v2);
    v60a := bat.new(:void,:str);
    bat.insert(v60a,0@0,"first");
    v60b := bat.new(:void,:str);
    bat.insert(v60b,1@0,"second");
    v60 := mat.new(v60a,v60b);
#   v23:bat[:void,:int]  := sql.bindvdbat("sys","ptables",0); 
    v23 := bat.new(:void,:int);
#   v68:bat[:void,:str]  := sql.bind("sys","ptables","name",0); 
    v68 := bat.new(:void,:str);
#   v8:bat[:void,:oid]  := sql.bindvdbat("sys","ptables",0); 
    v8 := bat.new(:void,:oid);
    v10 := bat.reverse(v8);
    _73 := algebra.kdifference(v2v0,v10);
    _74 := algebra.kdifference(v2v1,v10);
    _75 := algebra.kdifference(v2v2,v10);
    v12 := mat.new(_73,_74,_75);
    _76 := algebra.markT(_73,0@0);
    _77 := algebra.markT(_74,0@0);
    _78 := algebra.markT(_75,0@0);
    v17 := mat.new(_76,_77,_78);
    _79 := bat.reverse(_76);
    _80 := bat.reverse(_77);
    _81 := bat.reverse(_78);
    v19 := mat.new(_79,_80,_81);
    v19 := mat.pack(_79,_80,_81);
    _82 := algebra.join(v19,v2v0);
    _83 := algebra.join(v19,v2v1);
    _84 := algebra.join(v19,v2v2);
    v21 := mat.new(_82,_83,_84);
#   v26:bat[:void,:oid]  := sql.bindvdbat("sys","ttables",0); 
    v26 := bat.new(:void,:oid);
    v28 := bat.reverse(v26);
    v30 := algebra.kdifference(v23,v28);
    v34 := algebra.markT(v30,0@0);
    v36 := bat.reverse(v34);
    v38 := algebra.join(v36,v23);
    _85 := bat.setAccess(_82,"w");
    _86 := bat.setAccess(_83,"w");
    _87 := bat.setAccess(_84,"w");
    v40 := mat.new(_85,_86,_87);
    bat.append(_87,v38);
    _89 := algebra.markT(_85,0@0);
    _90 := algebra.markT(_86,0@0);
    _91 := algebra.markT(_87,0@0);
    v47 := mat.new(_89,_90,_91);
    _92 := bat.reverse(_89);
    _93 := bat.reverse(_90);
    _94 := bat.reverse(_91);
    v49 := mat.new(_92,_93,_94);
    v49 := mat.pack(_92,_93,_94);
    _95 := algebra.join(v49,_85);
    _96 := algebra.join(v49,_86);
    _97 := algebra.join(v49,_87);
    v51 := mat.new(_95,_96,_97);
    _98 := algebra.markT(_95,0@0);
    _99 := algebra.markT(_96,0@0);
    _100 := algebra.markT(_97,0@0);
    v56 := mat.new(_98,_99,_100);
    _101 := bat.reverse(_98);
    _102 := bat.reverse(_99);
    _103 := bat.reverse(_100);
    v58 := mat.new(_101,_102,_103);
    _104 := algebra.join(v19,v60a);
    _105 := algebra.join(v19,v60b);
    v66 := mat.new(_104,_105);
    v71 := algebra.join(v36,v68);
    _106 := bat.setAccess(_104,"w");
    _107 := bat.setAccess(_105,"w");
    v73 := mat.new(_106,_107);
    bat.append(_107,v71);
    _109 := algebra.join(v49,_106);
    _110 := algebra.join(v49,_107);
    v77 := mat.new(_109,_110);
    v58 := mat.pack(_101,_102,_103);
    _111 := algebra.join(v58,_109);
    _112 := algebra.join(v58,_110);
    v79 := mat.new(_111,_112);
#   v81 := sql.resultSet(1,3,v79); 
#   sql.rsColumn(v81,"tables","name","varchar",1024,0,v79); 
    v79 := mat.pack(_111,_112);
    io.print(v79);
end main;
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 2@0,	  2	  ]

# 23:56:30 >  
# 23:56:30 >  Done.
# 23:56:30 >  

