function my_case{inline}(Av:int):int;
    X3 := calc.==(Av,1);
	res := 0;
barrier X4 := X3;
    X6 := calc.int(100);
    res:int  := X6;
exit X4;
barrier X7 := calc.not(X3);
    X9 := calc.==(Av,2);
barrier X10 := X9;
    X12 := calc.int(200:sht);
    res:int  := X12;
exit X10;
barrier X13 := calc.not(X9);
    X14 := calc.-(1);
    X15 := calc.int(X14);
    res:int  := X15;
exit X13;
exit X7;
    return my_case:int := res;
end my_case;

function tst();
	z:= my_case(1);
end tst;
optimizer.inline("user","tst");
io.printf("#result of inline\n");
mdb.list("user","tst");
optimizer.remap("user","tst");
optimizer.costModel("user","tst");
optimizer.coercions("user","tst");
optimizer.evaluate("user","tst");
