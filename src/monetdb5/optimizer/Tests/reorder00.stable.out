stdout of test 'reorder00` in directory 'monetdb5/optimizer` itself:


# 22:42:02 >  
# 22:42:02 >   mserver5 "--config=/ufs/mk/monet5//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"   --set mapi_open=true --set xrpc_open=true --set mapi_port=30576 --set xrpc_port=44361 --set xrpc_docroot=/ufs/mk/monet5/package/MonetDB5 --set monet_prompt= --trace  --dbname=mTests_src_optimizer  reorder00.mal
# 22:42:02 >  

# MonetDB server v5.11.0, based on kernel v1.29.0
# Serving database 'mTests_src_optimizer', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30576/
function user.tst903():void;
    t0 := alarm.usec();
    b := bat.new(:oid,:lng);
barrier i := 0:lng;
    k := mmath.rand();
    l := calc.lng(k);
    bat.insert(b,nil:oid,l);
    redo i := iterator.next(1:lng,1000000:lng);
exit i;
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#loop %d",d0);
#setReadMode(b); 
    mx := aggr.max(b);
#io.printf("max %d",mx); 
    mi := aggr.min(b);
#io.printf(" min %d\n",mi); 
    t0 := alarm.usec();
    c := algebra.copy(b);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#copy %d",d0);
    cnt := aggr.count(c);
    io.printf("#count %d\n",cnt);
    t0 := alarm.usec();
    z := algebra.select(b,25:lng,25:lng);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select none %d",d0);
    cnt := aggr.count(z);
    io.printf(" count %d\n",cnt);
    t0 := alarm.usec();
    z2 := algebra.select(b,mi,mx);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select all %d",d0);
    cnt := aggr.count(z2);
    io.printf(" count %d\n",cnt);
    rng := calc.-(mx,mi);
    r2 := calc./(rng,20);
    r3 := calc.+(mi,r2);
    t0 := alarm.usec();
    z3 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.05 %d",d0);
    cnt := aggr.count(z3);
    io.printf(" count %d\n",cnt);
    r2 := calc./(rng,10);
    r3 := calc.+(mi,r2);
    t0 := alarm.usec();
    z4 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.1 %d",d0);
    cnt := aggr.count(z4);
    io.printf(" count %d\n",cnt);
    r2 := calc./(rng,5);
    r3 := calc.+(mi,r2);
    t0 := alarm.usec();
    z5 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.2 %d",d0);
    cnt := aggr.count(z5);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z6 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.4 %d",d0);
    cnt := aggr.count(z6);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z7 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.6 %d",d0);
    cnt := aggr.count(z7);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z8 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.8 %d",d0);
    cnt := aggr.count(z8);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z9 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 1.0 %d",d0);
    cnt := aggr.count(z9);
    io.printf(" count %d\n",cnt);
    t0 := alarm.usec();
    s := algebra.sort(b);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#tail sort %d",d0);
end tst903;
function user.main():void;
# The first MAL compiler test 
# the result is retained in MCCtst903.c 
# which can be compiled and linked with the system. 
    mdb.list("user","tst903");
end main;
function user.tst903():void;
    t0 := alarm.usec();
    b := bat.new(:oid,:lng);
barrier i := 0:lng;
    k := mmath.rand();
    l := calc.lng(k);
    bat.insert(b,nil:oid,l);
    redo i := iterator.next(1:lng,1000000:lng);
exit i;
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#loop %d",d0);
#io.printf(" min %d\n",mi); 
    mx := aggr.max(b);
#io.printf("max %d",mx); 
    mi := aggr.min(b);
#io.printf(" min %d\n",mi); 
    t0 := alarm.usec();
    c := algebra.copy(b);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#copy %d",d0);
    cnt := aggr.count(c);
    io.printf("#count %d\n",cnt);
    t0 := alarm.usec();
    z := algebra.select(b,25:lng,25:lng);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select none %d",d0);
    cnt := aggr.count(z);
    io.printf(" count %d\n",cnt);
    t0 := alarm.usec();
    z2 := algebra.select(b,mi,mx);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select all %d",d0);
    cnt := aggr.count(z2);
    io.printf(" count %d\n",cnt);
    rng := calc.-(mx,mi);
    r2 := calc./(rng,20);
    r3 := calc.+(mi,r2);
    t0 := alarm.usec();
    z3 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.05 %d",d0);
    cnt := aggr.count(z3);
    io.printf(" count %d\n",cnt);
    r2 := calc./(rng,10);
    r3 := calc.+(mi,r2);
    t0 := alarm.usec();
    z4 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.1 %d",d0);
    cnt := aggr.count(z4);
    io.printf(" count %d\n",cnt);
    r2 := calc./(rng,5);
    r3 := calc.+(mi,r2);
    t0 := alarm.usec();
    z5 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.2 %d",d0);
    cnt := aggr.count(z5);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z6 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.4 %d",d0);
    cnt := aggr.count(z6);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z7 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.6 %d",d0);
    cnt := aggr.count(z7);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z8 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 0.8 %d",d0);
    cnt := aggr.count(z8);
    io.printf(" count %d\n",cnt);
    r3 := calc.+(r3,r2);
    t0 := alarm.usec();
    z9 := algebra.select(b,mi,r3);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#select 1.0 %d",d0);
    cnt := aggr.count(z9);
    io.printf(" count %d\n",cnt);
    t0 := alarm.usec();
    s := algebra.sort(b);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#tail sort %d",d0);
end tst903;

# 22:42:02 >  
# 22:42:02 >  Done.
# 22:42:02 >  

