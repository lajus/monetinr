stdout of test 'emptyset01` in directory 'monetdb5/optimizer` itself:


# 08:05:29 >  
# 08:05:29 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=38505 --set xrpc_port=43491 --set monet_prompt= --trace --dbname=mTests_src_optimizer  emptyset01.mal
# 08:05:29 >  

# MonetDB 5 server v11.12.0
# This is an unreleased version
# Serving database 'mTests_optimizer', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.629 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:35292/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded
# MonetDB/DataCell loaded
function user.do{inline}(V1:bat[:oid,:oid]):void;
barrier (x,z) := iterator.new(V1);
    io.print("loop");
catch MALException:str ;
    io.print(MALException);
exit MALException:str ;
exit (x,z);
end do;
function user.tst():void;
    V1 := bat.new(:oid,:oid);
    V7 := bat.new(:oid,:oid);
    V10 := bat.new(:oid,:oid);
    V11 := bat.reverse(V10);
    V12 := algebra.kdifference(V7,V11);
    V16 := algebra.markT(V12);
    V17 := algebra.join(V16,V7);
    bat.append(V1,V17);
    user.do(V1);
    io.print("done");
end tst;
function user.main():void;
#beware that the ESoptimizer does not remove the type of MALException 
    mdb.List("user","tst");
end main;
function user.tst():void;               #  0 tst:void := user.tst() {G}
    V1 := bat.new(:oid,:oid);           #  1 V1:bat[:oid,:oid] := CMDBATnew(_2:oid, _2:oid) {G}
    V7 := bat.new(:oid,:oid);           #  2 V7:bat[:oid,:oid] := CMDBATnew(_2:oid, _2:oid) {G}
    V10{rows=0:lng} := bat.new(:oid,:oid);#  3 V10:bat[:oid,:oid] := CMDBATnew(_2:oid, _2:oid) {G}
    V11{rows=0} := bat.reverse(V10{rows=0:lng});#  4 V11:bat[:oid,:oid] := BKCreverse(V10:bat[:oid,:oid]) {G}
    V12 := V7;                          #  5 V12:bat[:oid,:oid] := V7:bat[:oid,:oid] {G}
    V16 := algebra.markT(V12);          #  6 V16:bat[:oid,:oid] := ALGtmark_default(V12:bat[:oid,:oid]) {G}
    V17 := algebra.join(V16,V7);        #  7 V17:bat[:oid,:oid] := ALGjoin(V16:bat[:oid,:oid], V7:bat[:oid,:oid]) {G}
    bat.append(V1,V17);                 #  8 _10:bat[:oid,:oid] := BKCappend_wrap(V1:bat[:oid,:oid], V17:bat[:oid,:oid]) {G}
barrier (X_16,X_17) := iterator.new(V1);#  9 (_16:oid, _17:oid) := ITRbunIterator(V1:bat[:oid,:oid]) {GJ14}
    io.print("loop");                   # 10 _18:void := IOprint_val(_19:str) {G}
catch MALException:str ;                # 11 MALException:str {J13}
    io.print(MALException);             # 12 _21:void := IOprint_val(MALException:str) {G}
exit MALException:str ;                 # 13 MALException:str 
exit (X_16,X_17);                       # 14 (_16:oid, _17:oid) 
    io.print("done");                   # 15 _12:void := IOprint_val(_13:str) {G}
end tst;	# 16  

# 08:05:29 >  
# 08:05:29 >  Done.
# 08:05:29 >  

