stdout of test 'tst4810` in directory 'monetdb5/optimizer` itself:


# 23:53:01 >  
# 23:53:01 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4810.mal </dev/null
# 23:53:01 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
#time:=alarm.usec();
#function f1():void;
#	t1 := array.grid(500,500,1,0);
#	top := t1;
#	bat.setName(top,"A_bat");
#	bat.persists(top,true);
#	transaction.commit();
#end f1;
function user.f1():void;	# 0  (f1:void)
    t1 := array.grid(500,500,1,0);	# 1 ARRAYgrid_int (t1:bat[:void,:int])<-(_2:int)(_2:int)(_3:int)(_4:int)
    top := t1;	# 2  (top:bat[:void,:int])<-(t1:bat[:void,:int])
    bat.setName(top,"A_bat");	# 3 BKCsetName (_6:void)<-(top:bat[:void,:int])(_7:str)
    bat.persists(top,true);	# 4  unknown (_8:any)<-(top:bat[:void,:int])(_9:bit)
    transaction.commit();	# 5 TRNglobal_commit (_10:void)
end f1;	# 6  
!ERROR: 'bat.persists' undefined in user.f1[4]
#	optimizer.expressionAccumulation("user","f1");
#	optimizer.garbageCollector("user","f1");
#	#f1();
#
#function f2():void;
#	t1:bat[:void,:int] := bbp.bind("A_bat");
#	t2 := array.grid(1,500,500,0);
#	t3 := array.grid(500,500,1,0);
#	t4 := batcalc.*(500,t3);
#	t5 := batcalc.+(t2,t4);
#	t6 := batcalc.oid(t5);
#	t7 := algebra.join(t6,t1);
#	top := t7;
#	bat.setName(top,"B_bat");
#	bat.persists(top,true);
#	transaction.commit();
#end f2;
function user.f2():void;	# 0  (f2:void)
    t1:bat[:void,:int]  := bbp.bind("A_bat");	# 1 CMDbbpbind (t1:bat[:void,:int])<-(_2:str)
    t2 := array.grid(1,500,500,0);	# 2 ARRAYgrid_int (t2:bat[:void,:int])<-(_4:int)(_5:int)(_5:int)(_6:int)
    t3 := array.grid(500,500,1,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_5:int)(_5:int)(_4:int)(_6:int)
    t4 := batcalc.*(500,t3);	# 4 CMDcstMULbat_int_int_int (t4:bat[:void,:int])<-(_5:int)(t3:bat[:void,:int])
    t5 := batcalc.+(t2,t4);	# 5 CMDbatADD_int_int_int (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 6 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 7 ALGjoin (t7:bat[:void,:int])<-(t6:bat[:void,:oid])(t1:bat[:void,:int])
    top := t7;	# 8  (top:bat[:void,:int])<-(t7:bat[:void,:int])
    bat.setName(top,"B_bat");	# 9 BKCsetName (_13:void)<-(top:bat[:void,:int])(_14:str)
    bat.persists(top,true);	# 10  unknown (_15:any)<-(top:bat[:void,:int])(_16:bit)
    transaction.commit();	# 11 TRNglobal_commit (_17:void)
end f2;	# 12  
!ERROR: 'bat.persists' undefined in user.f2[10]
#	optimizer.expressionAccumulation("user","f2");
#	optimizer.garbageCollector("user","f2");
#	#f2();
#
#function f3():void;
#	i1 := 0;
#	t2:bat[:void,:int] := bbp.bind("B_bat");
#	t3 := array.grid(1,500,1,0);
#	t5 := calc.int(i1);
#	t6 := batcalc.init(t3,t5);
#	t7 := batcalc.*(500,t6);
#	t8 := batcalc.+(t3,t7);
#	t9 := batcalc.oid(t8);
#	t10 := algebra.join(t9,t2);
#	t11 := array.grid(500,500,1,0);
#	t12 := batcalc.oid(t11);
#	t13 := algebra.join(t12,t10);
#	t14:bat[:void,:int] := bbp.bind("A_bat");
#	t19 := batcalc.*(500,t3);
#	t20 := batcalc.+(t6,t19);
#	t21 := batcalc.oid(t20);
#	t22 := algebra.join(t21,t14);
#	t23 := array.grid(1,500,500,0);
#	t24 := batcalc.oid(t23);
#	t25 := algebra.join(t24,t22);
#	t26 := batcalc.*(t13,t25);
#	a_i1 := t26;
#barrier (go,i1) := mal.newRange(1:int);
#	t27:bat[:void,:int] := bbp.bind("B_bat");
#	t28 := array.grid(1,500,1,0);
#	t30 := calc.int(i1);
#	t31 := batcalc.init(t28,t30);
#	t32 := batcalc.*(500,t31);
#	t33 := batcalc.+(t28,t32);
#	t34 := batcalc.oid(t33);
#	t35 := algebra.join(t34,t27);
#	t36 := array.grid(500,500,1,0);
#	t37 := batcalc.oid(t36);
#	t38 := algebra.join(t37,t35);
#	t39:bat[:void,:int] := bbp.bind("A_bat");
#	t44 := batcalc.*(500,t28);
#	t45 := batcalc.+(t31,t44);
#	t46 := batcalc.oid(t45);
#	t47 := algebra.join(t46,t39);
#	t48 := array.grid(1,500,500,0);
#	t49 := batcalc.oid(t48);
#	t50 := algebra.join(t49,t47);
#	t51 := batcalc.*(t38,t50);
#	a_i1 := batcalc.+(a_i1,t51);
#	#redo (go,i1) := mal.nextElement(1:int,500:int);
#	redo (go,i1) := mal.nextElement(1:int,3:int);
#exit (go,i1);
#	t52 := a_i1;
#	top := t52;
#	bat.setName(top,"SIM_bat");
#	bat.persists(top,true);
#	transaction.commit();
#end f3;
function user.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-(_2:int)
    t2:bat[:void,:int]  := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-(_4:str)
    t3 := array.grid(1:int,500,1:int,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t5 := calc.int(i1);	# 4 CALCint2int (t5:int)<-(i1:int)
    t6 := batcalc.init(t3,t5);	# 5 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(t5:int)
    t7 := batcalc.*(500,t6);	# 6 CMDcstMULbat_int_int_int (t7:bat[:void,:int])<-(_7:int)(t6:bat[:void,:int])
    t8 := batcalc.+(t3,t7);	# 7 CMDbatADD_int_int_int (t8:bat[:void,:int])<-(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t8);	# 8 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t8:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 9 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1:int,0);	# 10 ARRAYgrid_int (t11:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_2:int)
    t12 := batcalc.oid(t11);	# 11 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 12 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14:bat[:void,:int]  := bbp.bind("A_bat");	# 13 CMDbbpbind (t14:bat[:void,:int])<-(_18:str)
    t19 := batcalc.*(500,t3);	# 14 CMDcstMULbat_int_int_int (t19:bat[:void,:int])<-(_7:int)(t3:bat[:void,:int])
    t20 := batcalc.+(t6,t19);	# 15 CMDbatADD_int_int_int (t20:bat[:void,:int])<-(t6:bat[:void,:int])(t19:bat[:void,:int])
    t21 := batcalc.oid(t20);	# 16 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t20:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 17 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1:int,500,500,0);	# 18 ARRAYgrid_int (t23:bat[:void,:int])<-(_6:int)(_7:int)(_7:int)(_2:int)
    t24 := batcalc.oid(t23);	# 19 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 20 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t26 := batcalc.*(t13,t25);	# 21 CMDbatMUL_int_int_int (t26:bat[:void,:int])<-(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t26;	# 22  (a_i1:bat[:void,:int])<-(t26:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 23 RNGnewRange_int (go:bit)(i1:int)<-(_6:int) jump 46
    t27:bat[:void,:int]  := bbp.bind("B_bat");	# 24 CMDbbpbind (t27:bat[:void,:int])<-(_4:str)
    t28 := array.grid(1:int,500,1:int,0);	# 25 ARRAYgrid_int (t28:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t30 := calc.int(i1);	# 26 CALCint2int (t30:int)<-(i1:int)
    t31 := batcalc.init(t28,t30);	# 27 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(t30:int)
    t32 := batcalc.*(500,t31);	# 28 CMDcstMULbat_int_int_int (t32:bat[:void,:int])<-(_7:int)(t31:bat[:void,:int])
    t33 := batcalc.+(t28,t32);	# 29 CMDbatADD_int_int_int (t33:bat[:void,:int])<-(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t33);	# 30 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t33:bat[:void,:int])
    t35 := algebra.join(t34,t27);	# 31 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t27:bat[:void,:int])
    t36 := array.grid(500,500,1:int,0);	# 32 ARRAYgrid_int (t36:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_38:int)
    t37 := batcalc.oid(t36);	# 33 CMDconvertvoid_int_oid (t37:bat[:void,:oid])<-(t36:bat[:void,:int])
    t38 := algebra.join(t37,t35);	# 34 ALGjoin (t38:bat[:void,:int])<-(t37:bat[:void,:oid])(t35:bat[:void,:int])
    t39:bat[:void,:int]  := bbp.bind("A_bat");	# 35 CMDbbpbind (t39:bat[:void,:int])<-(_18:str)
    t44 := batcalc.*(500,t28);	# 36 CMDcstMULbat_int_int_int (t44:bat[:void,:int])<-(_43:int)(t28:bat[:void,:int])
    t45 := batcalc.+(t31,t44);	# 37 CMDbatADD_int_int_int (t45:bat[:void,:int])<-(t31:bat[:void,:int])(t44:bat[:void,:int])
    t46 := batcalc.oid(t45);	# 38 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t45:bat[:void,:int])
    t47 := algebra.join(t46,t39);	# 39 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t39:bat[:void,:int])
    t48 := array.grid(1:int,500,500,0);	# 40 ARRAYgrid_int (t48:bat[:void,:int])<-(_48:int)(_43:int)(_43:int)(_38:int)
    t49 := batcalc.oid(t48);	# 41 CMDconvertvoid_int_oid (t49:bat[:void,:oid])<-(t48:bat[:void,:int])
    t50 := algebra.join(t49,t47);	# 42 ALGjoin (t50:bat[:void,:int])<-(t49:bat[:void,:oid])(t47:bat[:void,:int])
    t51 := batcalc.*(t38,t50);	# 43 CMDbatMUL_int_int_int (t51:bat[:void,:int])<-(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,t51);	# 44 CMDbatADD_int_int_int (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(t51:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 45 RNGnextElement_int (go:bit)(i1:int)<-(_48:int)(_52:int) jump 24
exit (go,i1);	# 46  (go:bit)(i1:int)
    t52 := a_i1;	# 47  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 48  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 49 BKCsetName (_55:void)<-(top:bat[:void,:int])(_56:str)
    bat.persists(top,true);	# 50  unknown (_57:any)<-(top:bat[:void,:int])(_58:bit)
    transaction.commit();	# 51 TRNglobal_commit (_59:void)
end f3;	# 52  
!ERROR: 'bat.persists' undefined in user.f3[50]
#	optimizer.expressionAccumulation("user","f3");
#	optimizer.commonExpressionRemoval("user","f3");
#	optimizer.strengthReduction("user","f3");
#	optimizer.garbageCollector("user","f3");
#	mdb.list("user","f3");
#	#f3();
#
#function f4():void;
#	SIM_bat := bbp.bind("SIM_bat");
#	bat.persists(SIM_bat,false);
#	transaction.commit();
#end f4;
function user.f4():void;	# 0  (f4:void)
    SIM_bat := bbp.bind("SIM_bat");	# 1 CMDbbpbind (SIM_bat:bat[:any,:any])<-(_2:str)
    bat.persists(SIM_bat,false);	# 2  unknown (_3:any)<-(SIM_bat:bat[:any,:any])(_4:bit)
    transaction.commit();	# 3 TRNglobal_commit (_5:void)
end f4;	# 4  
!ERROR: 'bat.persists' undefined in user.f4[2]
#	optimizer.expressionAccumulation("user","f4");
#	optimizer.garbageCollector("user","f4");
##	f4();
#
#function f5():void;
#	B_bat := bbp.bind("B_bat");
#	bat.persists(B_bat,false);
#	transaction.commit();
#end f5;
function user.f5():void;	# 0  (f5:void)
    B_bat := bbp.bind("B_bat");	# 1 CMDbbpbind (B_bat:bat[:any,:any])<-(_2:str)
    bat.persists(B_bat,false);	# 2  unknown (_3:any)<-(B_bat:bat[:any,:any])(_4:bit)
    transaction.commit();	# 3 TRNglobal_commit (_5:void)
end f5;	# 4  
!ERROR: 'bat.persists' undefined in user.f5[2]
#	optimizer.expressionAccumulation("user","f5");
#	optimizer.garbageCollector("user","f5");
#	#f5();
#
#function f6():void;
#	A_bat := bbp.bind("A_bat");
#	bat.persists(A_bat,false);
#	transaction.commit();
#end f6;
function user.f6():void;	# 0  (f6:void)
    A_bat := bbp.bind("A_bat");	# 1 CMDbbpbind (A_bat:bat[:any,:any])<-(_2:str)
    bat.persists(A_bat,false);	# 2  unknown (_3:any)<-(A_bat:bat[:any,:any])(_4:bit)
    transaction.commit();	# 3 TRNglobal_commit (_5:void)
end f6;	# 4  
!ERROR: 'bat.persists' undefined in user.f6[2]
#	optimizer.expressionAccumulation("user","f6");
#	optimizer.garbageCollector("user","f6");
##	f6();
#
##f1();f2();f3();
#time2:=alarm.usec();
#
#diff := time2 - time;
#secs := diff / 1000000;
#decs := diff % 1000000;
#io.printf("#TIME %d.",secs);
#io.printf("%06d sec\n", decs);
##quit();
#
!ERROR: 'bat.persists' undefined in user.f1[4]
Optimizer expressionAccumulation failed
function user.f1():void;	# 0  (f1:void)
    t1 := array.grid(500,500,1,0);	# 1 ARRAYgrid_int (t1:bat[:void,:int])<-(_2:int)(_2:int)(_3:int)(_4:int)
    top := t1;	# 2  (top:bat[:void,:int])<-(t1:bat[:void,:int])
    bat.setName(top,"A_bat");	# 3 BKCsetName (_6:void)<-(top:bat[:void,:int])(_7:str)
    bat.persists(top,true);	# 4  unknown (_8:any)<-(top:bat[:void,:int])(_9:bit)
    transaction.commit();	# 5 TRNglobal_commit (_10:void)
end f1;	# 6  
!ERROR: 'bat.persists' undefined in user.f1[4]
Optimizer expressionAccumulation optimizer failed
function user.f1():void;	# 0  (f1:void)
    t1 := array.grid(500,500,1,0);	# 1 ARRAYgrid_int (t1:bat[:void,:int])<-(_2:int)(_2:int)(_3:int)(_4:int)
    top := t1;	# 2  (top:bat[:void,:int])<-(t1:bat[:void,:int])
    bat.setName(top,"A_bat");	# 3 BKCsetName (_6:void)<-(top:bat[:void,:int])(_7:str)
    bat.persists(top,true);	# 4  unknown (_8:any)<-(top:bat[:void,:int])(_9:bit)
    transaction.commit();	# 5 TRNglobal_commit (_10:void)
end f1;	# 6  
!ERROR: 'bat.persists' undefined in user.f1[5]
Optimizer garbageCollector failed
function user.f1():void;	# 0  (f1:void)
    t1 := array.grid(500,500,1,0);	# 1 ARRAYgrid_int (t1:bat[:void,:int])<-(_2:int)(_2:int)(_3:int)(_4:int)
    top := t1;	# 2  (top:bat[:void,:int])<-(t1:bat[:void,:int])
    bat.setGarbage(t1);	# 3 CMDbbpgarbage (_11:void)<-(t1:bat[:void,:int])
    bat.setName(top,"A_bat");	# 4 BKCsetName (_6:void)<-(top:bat[:void,:int])(_7:str)
    bat.persists(top,true);	# 5  unknown (_8:any)<-(top:bat[:void,:int])(_9:bit)
    bat.setGarbage(top);	# 6 CMDbbpgarbage (_12:void)<-(top:bat[:void,:int])
    transaction.commit();	# 7 TRNglobal_commit (_10:void)
end f1;	# 8  
!ERROR: 'bat.persists' undefined in user.f1[5]
Optimizer garbageCollector optimizer failed
function user.f1():void;	# 0  (f1:void)
    t1 := array.grid(500,500,1,0);	# 1 ARRAYgrid_int (t1:bat[:void,:int])<-(_2:int)(_2:int)(_3:int)(_4:int)
    top := t1;	# 2  (top:bat[:void,:int])<-(t1:bat[:void,:int])
    bat.setGarbage(t1);	# 3 CMDbbpgarbage (_11:void)<-(t1:bat[:void,:int])
    bat.setName(top,"A_bat");	# 4 BKCsetName (_6:void)<-(top:bat[:void,:int])(_7:str)
    bat.persists(top,true);	# 5  unknown (_8:any)<-(top:bat[:void,:int])(_9:bit)
    bat.setGarbage(top);	# 6 CMDbbpgarbage (_12:void)<-(top:bat[:void,:int])
    transaction.commit();	# 7 TRNglobal_commit (_10:void)
end f1;	# 8  
!ERROR: 'bat.persists' undefined in user.f2[10]
Optimizer expressionAccumulation failed
function user.f2():void;	# 0  (f2:void)
    t1:bat[:void,:int]  := bbp.bind("A_bat");	# 1 CMDbbpbind (t1:bat[:void,:int])<-(_2:str)
    t2 := array.grid(1,500,500,0);	# 2 ARRAYgrid_int (t2:bat[:void,:int])<-(_4:int)(_5:int)(_5:int)(_6:int)
    t3 := array.grid(500,500,1,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_5:int)(_5:int)(_4:int)(_6:int)
    t4 := batcalc.*(500,t3);	# 4 CMDcstMULbat_int_int_int (t4:bat[:void,:int])<-(_5:int)(t3:bat[:void,:int])
    t5 := batcalc.+(t2,t4);	# 5 CMDbatADD_int_int_int (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 6 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 7 ALGjoin (t7:bat[:void,:int])<-(t6:bat[:void,:oid])(t1:bat[:void,:int])
    top := t7;	# 8  (top:bat[:void,:int])<-(t7:bat[:void,:int])
    bat.setName(top,"B_bat");	# 9 BKCsetName (_13:void)<-(top:bat[:void,:int])(_14:str)
    bat.persists(top,true);	# 10  unknown (_15:any)<-(top:bat[:void,:int])(_16:bit)
    transaction.commit();	# 11 TRNglobal_commit (_17:void)
end f2;	# 12  
!ERROR: 'bat.persists' undefined in user.f2[10]
Optimizer expressionAccumulation optimizer failed
function user.f2():void;	# 0  (f2:void)
    t1:bat[:void,:int]  := bbp.bind("A_bat");	# 1 CMDbbpbind (t1:bat[:void,:int])<-(_2:str)
    t2 := array.grid(1,500,500,0);	# 2 ARRAYgrid_int (t2:bat[:void,:int])<-(_4:int)(_5:int)(_5:int)(_6:int)
    t3 := array.grid(500,500,1,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_5:int)(_5:int)(_4:int)(_6:int)
    t4 := batcalc.*(500,t3);	# 4 CMDcstMULbat_int_int_int (t4:bat[:void,:int])<-(_5:int)(t3:bat[:void,:int])
    t5 := batcalc.+(t2,t4);	# 5 CMDbatADD_int_int_int (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 6 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 7 ALGjoin (t7:bat[:void,:int])<-(t6:bat[:void,:oid])(t1:bat[:void,:int])
    top := t7;	# 8  (top:bat[:void,:int])<-(t7:bat[:void,:int])
    bat.setName(top,"B_bat");	# 9 BKCsetName (_13:void)<-(top:bat[:void,:int])(_14:str)
    bat.persists(top,true);	# 10  unknown (_15:any)<-(top:bat[:void,:int])(_16:bit)
    transaction.commit();	# 11 TRNglobal_commit (_17:void)
end f2;	# 12  
!ERROR: 'bat.persists' undefined in user.f2[17]
Optimizer garbageCollector failed
function user.f2():void;	# 0  (f2:void)
    t1:bat[:void,:int]  := bbp.bind("A_bat");	# 1 CMDbbpbind (t1:bat[:void,:int])<-(_2:str)
    t2 := array.grid(1,500,500,0);	# 2 ARRAYgrid_int (t2:bat[:void,:int])<-(_4:int)(_5:int)(_5:int)(_6:int)
    t3 := array.grid(500,500,1,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_5:int)(_5:int)(_4:int)(_6:int)
    t4 := batcalc.*(500,t3);	# 4 CMDcstMULbat_int_int_int (t4:bat[:void,:int])<-(_5:int)(t3:bat[:void,:int])
    bat.setGarbage(t3);	# 5 CMDbbpgarbage (_18:void)<-(t3:bat[:void,:int])
    t5 := batcalc.+(t2,t4);	# 6 CMDbatADD_int_int_int (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    bat.setGarbage(t2);	# 7 CMDbbpgarbage (_19:void)<-(t2:bat[:void,:int])
    bat.setGarbage(t4);	# 8 CMDbbpgarbage (_20:void)<-(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 9 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    bat.setGarbage(t5);	# 10 CMDbbpgarbage (_21:void)<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 11 ALGjoin (t7:bat[:void,:int])<-(t6:bat[:void,:oid])(t1:bat[:void,:int])
    bat.setGarbage(t6);	# 12 CMDbbpgarbage (_22:void)<-(t6:bat[:void,:oid])
    bat.setGarbage(t1);	# 13 CMDbbpgarbage (_23:void)<-(t1:bat[:void,:int])
    top := t7;	# 14  (top:bat[:void,:int])<-(t7:bat[:void,:int])
    bat.setGarbage(t7);	# 15 CMDbbpgarbage (_24:void)<-(t7:bat[:void,:int])
    bat.setName(top,"B_bat");	# 16 BKCsetName (_13:void)<-(top:bat[:void,:int])(_14:str)
    bat.persists(top,true);	# 17  unknown (_15:any)<-(top:bat[:void,:int])(_16:bit)
    bat.setGarbage(top);	# 18 CMDbbpgarbage (_25:void)<-(top:bat[:void,:int])
    transaction.commit();	# 19 TRNglobal_commit (_17:void)
end f2;	# 20  
!ERROR: 'bat.persists' undefined in user.f2[17]
Optimizer garbageCollector optimizer failed
function user.f2():void;	# 0  (f2:void)
    t1:bat[:void,:int]  := bbp.bind("A_bat");	# 1 CMDbbpbind (t1:bat[:void,:int])<-(_2:str)
    t2 := array.grid(1,500,500,0);	# 2 ARRAYgrid_int (t2:bat[:void,:int])<-(_4:int)(_5:int)(_5:int)(_6:int)
    t3 := array.grid(500,500,1,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_5:int)(_5:int)(_4:int)(_6:int)
    t4 := batcalc.*(500,t3);	# 4 CMDcstMULbat_int_int_int (t4:bat[:void,:int])<-(_5:int)(t3:bat[:void,:int])
    bat.setGarbage(t3);	# 5 CMDbbpgarbage (_18:void)<-(t3:bat[:void,:int])
    t5 := batcalc.+(t2,t4);	# 6 CMDbatADD_int_int_int (t5:bat[:void,:int])<-(t2:bat[:void,:int])(t4:bat[:void,:int])
    bat.setGarbage(t2);	# 7 CMDbbpgarbage (_19:void)<-(t2:bat[:void,:int])
    bat.setGarbage(t4);	# 8 CMDbbpgarbage (_20:void)<-(t4:bat[:void,:int])
    t6 := batcalc.oid(t5);	# 9 CMDconvertvoid_int_oid (t6:bat[:void,:oid])<-(t5:bat[:void,:int])
    bat.setGarbage(t5);	# 10 CMDbbpgarbage (_21:void)<-(t5:bat[:void,:int])
    t7 := algebra.join(t6,t1);	# 11 ALGjoin (t7:bat[:void,:int])<-(t6:bat[:void,:oid])(t1:bat[:void,:int])
    bat.setGarbage(t6);	# 12 CMDbbpgarbage (_22:void)<-(t6:bat[:void,:oid])
    bat.setGarbage(t1);	# 13 CMDbbpgarbage (_23:void)<-(t1:bat[:void,:int])
    top := t7;	# 14  (top:bat[:void,:int])<-(t7:bat[:void,:int])
    bat.setGarbage(t7);	# 15 CMDbbpgarbage (_24:void)<-(t7:bat[:void,:int])
    bat.setName(top,"B_bat");	# 16 BKCsetName (_13:void)<-(top:bat[:void,:int])(_14:str)
    bat.persists(top,true);	# 17  unknown (_15:any)<-(top:bat[:void,:int])(_16:bit)
    bat.setGarbage(top);	# 18 CMDbbpgarbage (_25:void)<-(top:bat[:void,:int])
    transaction.commit();	# 19 TRNglobal_commit (_17:void)
end f2;	# 20  
!ERROR: MALresolve:user.f3[42]:type mismatch bat[:void,:int] := void
!ERROR: 'batcalc.+' undefined in user.f3[42]
!ERROR: 'bat.persists' undefined in user.f3[48]
Optimizer expressionAccumulation failed
function user.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-(_2:int)
    t2:bat[:void,:int]  := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-(_4:str)
    t3 := array.grid(1:int,500,1:int,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat_int_int_int (t7:bat[:void,:int])<-(_7:int)(t6:bat[:void,:int])
    t8 := batcalc.+(t3,t7);	# 6 CMDbatADD_int_int_int (t8:bat[:void,:int])<-(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t8);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t8:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1:int,0);	# 9 ARRAYgrid_int (t11:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14:bat[:void,:int]  := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-(_18:str)
    t19 := batcalc.*(500,t3);	# 13 CMDcstMULbat_int_int_int (t19:bat[:void,:int])<-(_7:int)(t3:bat[:void,:int])
    t20 := batcalc.+(t6,t19);	# 14 CMDbatADD_int_int_int (t20:bat[:void,:int])<-(t6:bat[:void,:int])(t19:bat[:void,:int])
    t21 := batcalc.oid(t20);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t20:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1:int,500,500,0);	# 17 ARRAYgrid_int (t23:bat[:void,:int])<-(_6:int)(_7:int)(_7:int)(_2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t26 := batcalc.*(t13,t25);	# 20 CMDbatMUL_int_int_int (t26:bat[:void,:int])<-(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t26;	# 21  (a_i1:bat[:void,:int])<-(t26:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-(_6:int) jump 44
    t27:bat[:void,:int]  := bbp.bind("B_bat");	# 23 CMDbbpbind (t27:bat[:void,:int])<-(_4:str)
    t28 := array.grid(1:int,500,1:int,0);	# 24 ARRAYgrid_int (t28:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t31 := batcalc.init(t28,i1);	# 25 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 26 CMDcstMULbat_int_int_int (t32:bat[:void,:int])<-(_7:int)(t31:bat[:void,:int])
    t33 := batcalc.+(t28,t32);	# 27 CMDbatADD_int_int_int (t33:bat[:void,:int])<-(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t33);	# 28 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t33:bat[:void,:int])
    t35 := algebra.join(t34,t27);	# 29 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t27:bat[:void,:int])
    t36 := array.grid(500,500,1:int,0);	# 30 ARRAYgrid_int (t36:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_38:int)
    t37 := batcalc.oid(t36);	# 31 CMDconvertvoid_int_oid (t37:bat[:void,:oid])<-(t36:bat[:void,:int])
    t38 := algebra.join(t37,t35);	# 32 ALGjoin (t38:bat[:void,:int])<-(t37:bat[:void,:oid])(t35:bat[:void,:int])
    t39:bat[:void,:int]  := bbp.bind("A_bat");	# 33 CMDbbpbind (t39:bat[:void,:int])<-(_18:str)
    t44 := batcalc.*(500,t28);	# 34 CMDcstMULbat_int_int_int (t44:bat[:void,:int])<-(_43:int)(t28:bat[:void,:int])
    t45 := batcalc.+(t31,t44);	# 35 CMDbatADD_int_int_int (t45:bat[:void,:int])<-(t31:bat[:void,:int])(t44:bat[:void,:int])
    t46 := batcalc.oid(t45);	# 36 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t45:bat[:void,:int])
    t47 := algebra.join(t46,t39);	# 37 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t39:bat[:void,:int])
    t48 := array.grid(1:int,500,500,0);	# 38 ARRAYgrid_int (t48:bat[:void,:int])<-(_48:int)(_43:int)(_43:int)(_38:int)
    t49 := batcalc.oid(t48);	# 39 CMDconvertvoid_int_oid (t49:bat[:void,:oid])<-(t48:bat[:void,:int])
    t50 := algebra.join(t49,t47);	# 40 ALGjoin (t50:bat[:void,:int])<-(t49:bat[:void,:oid])(t47:bat[:void,:int])
    t51 := batcalc.*(t38,t50);	# 41 CMDbatMUL_int_int_int (t51:bat[:void,:int])<-(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t51);	# 42  unknown (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t51:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 43 RNGnextElement_int (go:bit)(i1:int)<-(_48:int)(_52:int) jump 23
exit (go,i1);	# 44  (go:bit)(i1:int)
    t52 := a_i1;	# 45  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 46  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 47 BKCsetName (_55:void)<-(top:bat[:void,:int])(_56:str)
    bat.persists(top,true);	# 48  unknown (_57:any)<-(top:bat[:void,:int])(_58:bit)
    transaction.commit();	# 49 TRNglobal_commit (_59:void)
end f3;	# 50  
!ERROR: MALresolve:user.f3[42]:type mismatch bat[:void,:int] := void
!ERROR: 'batcalc.+' undefined in user.f3[42]
!ERROR: 'bat.persists' undefined in user.f3[48]
Optimizer expressionAccumulation optimizer failed
function user.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-(_2:int)
    t2:bat[:void,:int]  := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-(_4:str)
    t3 := array.grid(1:int,500,1:int,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat_int_int_int (t7:bat[:void,:int])<-(_7:int)(t6:bat[:void,:int])
    t8 := batcalc.+(t3,t7);	# 6 CMDbatADD_int_int_int (t8:bat[:void,:int])<-(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t8);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t8:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1:int,0);	# 9 ARRAYgrid_int (t11:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14:bat[:void,:int]  := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-(_18:str)
    t19 := batcalc.*(500,t3);	# 13 CMDcstMULbat_int_int_int (t19:bat[:void,:int])<-(_7:int)(t3:bat[:void,:int])
    t20 := batcalc.+(t6,t19);	# 14 CMDbatADD_int_int_int (t20:bat[:void,:int])<-(t6:bat[:void,:int])(t19:bat[:void,:int])
    t21 := batcalc.oid(t20);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t20:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1:int,500,500,0);	# 17 ARRAYgrid_int (t23:bat[:void,:int])<-(_6:int)(_7:int)(_7:int)(_2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t26 := batcalc.*(t13,t25);	# 20 CMDbatMUL_int_int_int (t26:bat[:void,:int])<-(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t26;	# 21  (a_i1:bat[:void,:int])<-(t26:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-(_6:int) jump 44
    t27:bat[:void,:int]  := bbp.bind("B_bat");	# 23 CMDbbpbind (t27:bat[:void,:int])<-(_4:str)
    t28 := array.grid(1:int,500,1:int,0);	# 24 ARRAYgrid_int (t28:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t31 := batcalc.init(t28,i1);	# 25 CMDbatintinit (t31:bat[:void,:int])<-(t28:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 26 CMDcstMULbat_int_int_int (t32:bat[:void,:int])<-(_7:int)(t31:bat[:void,:int])
    t33 := batcalc.+(t28,t32);	# 27 CMDbatADD_int_int_int (t33:bat[:void,:int])<-(t28:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t33);	# 28 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t33:bat[:void,:int])
    t35 := algebra.join(t34,t27);	# 29 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t27:bat[:void,:int])
    t36 := array.grid(500,500,1:int,0);	# 30 ARRAYgrid_int (t36:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_38:int)
    t37 := batcalc.oid(t36);	# 31 CMDconvertvoid_int_oid (t37:bat[:void,:oid])<-(t36:bat[:void,:int])
    t38 := algebra.join(t37,t35);	# 32 ALGjoin (t38:bat[:void,:int])<-(t37:bat[:void,:oid])(t35:bat[:void,:int])
    t39:bat[:void,:int]  := bbp.bind("A_bat");	# 33 CMDbbpbind (t39:bat[:void,:int])<-(_18:str)
    t44 := batcalc.*(500,t28);	# 34 CMDcstMULbat_int_int_int (t44:bat[:void,:int])<-(_43:int)(t28:bat[:void,:int])
    t45 := batcalc.+(t31,t44);	# 35 CMDbatADD_int_int_int (t45:bat[:void,:int])<-(t31:bat[:void,:int])(t44:bat[:void,:int])
    t46 := batcalc.oid(t45);	# 36 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t45:bat[:void,:int])
    t47 := algebra.join(t46,t39);	# 37 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t39:bat[:void,:int])
    t48 := array.grid(1:int,500,500,0);	# 38 ARRAYgrid_int (t48:bat[:void,:int])<-(_48:int)(_43:int)(_43:int)(_38:int)
    t49 := batcalc.oid(t48);	# 39 CMDconvertvoid_int_oid (t49:bat[:void,:oid])<-(t48:bat[:void,:int])
    t50 := algebra.join(t49,t47);	# 40 ALGjoin (t50:bat[:void,:int])<-(t49:bat[:void,:oid])(t47:bat[:void,:int])
    t51 := batcalc.*(t38,t50);	# 41 CMDbatMUL_int_int_int (t51:bat[:void,:int])<-(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t51);	# 42  unknown (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t51:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 43 RNGnextElement_int (go:bit)(i1:int)<-(_48:int)(_52:int) jump 23
exit (go,i1);	# 44  (go:bit)(i1:int)
    t52 := a_i1;	# 45  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 46  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 47 BKCsetName (_55:void)<-(top:bat[:void,:int])(_56:str)
    bat.persists(top,true);	# 48  unknown (_57:any)<-(top:bat[:void,:int])(_58:bit)
    transaction.commit();	# 49 TRNglobal_commit (_59:void)
end f3;	# 50  
!ERROR: MALresolve:user.f3[34]:type mismatch bat[:void,:int] := void
!ERROR: 'batcalc.+' undefined in user.f3[34]
!ERROR: 'bat.persists' undefined in user.f3[40]
Optimizer commonExpressions failed
function user.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-(_2:int)
    t2:bat[:void,:int]  := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-(_4:str)
    t3 := array.grid(1:int,500,1:int,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat_int_int_int (t7:bat[:void,:int])<-(_7:int)(t6:bat[:void,:int])
    t8 := batcalc.+(t3,t7);	# 6 CMDbatADD_int_int_int (t8:bat[:void,:int])<-(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t8);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t8:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1:int,0);	# 9 ARRAYgrid_int (t11:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14:bat[:void,:int]  := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-(_18:str)
    t19 := batcalc.*(500,t3);	# 13 CMDcstMULbat_int_int_int (t19:bat[:void,:int])<-(_7:int)(t3:bat[:void,:int])
    t20 := batcalc.+(t6,t19);	# 14 CMDbatADD_int_int_int (t20:bat[:void,:int])<-(t6:bat[:void,:int])(t19:bat[:void,:int])
    t21 := batcalc.oid(t20);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t20:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1:int,500,500,0);	# 17 ARRAYgrid_int (t23:bat[:void,:int])<-(_6:int)(_7:int)(_7:int)(_2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t26 := batcalc.*(t13,t25);	# 20 CMDbatMUL_int_int_int (t26:bat[:void,:int])<-(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t26;	# 21  (a_i1:bat[:void,:int])<-(t26:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-(_6:int) jump 36
    t31 := batcalc.init(t3,i1);	# 23 CMDbatintinit (t31:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 24 CMDcstMULbat_int_int_int (t32:bat[:void,:int])<-(_7:int)(t31:bat[:void,:int])
    t33 := batcalc.+(t3,t32);	# 25 CMDbatADD_int_int_int (t33:bat[:void,:int])<-(t3:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t33);	# 26 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t33:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 27 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    t38 := algebra.join(t12,t35);	# 28 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    t45 := batcalc.+(t31,t19);	# 29 CMDbatADD_int_int_int (t45:bat[:void,:int])<-(t31:bat[:void,:int])(t19:bat[:void,:int])
    t46 := batcalc.oid(t45);	# 30 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t45:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 31 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    t50 := algebra.join(t24,t47);	# 32 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    t51 := batcalc.*(t38,t50);	# 33 CMDbatMUL_int_int_int (t51:bat[:void,:int])<-(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t51);	# 34  unknown (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t51:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 35 RNGnextElement_int (go:bit)(i1:int)<-(_48:int)(_52:int) jump 23
exit (go,i1);	# 36  (go:bit)(i1:int)
    t52 := a_i1;	# 37  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 38  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 39 BKCsetName (_55:void)<-(top:bat[:void,:int])(_56:str)
    bat.persists(top,true);	# 40  unknown (_57:any)<-(top:bat[:void,:int])(_58:bit)
    transaction.commit();	# 41 TRNglobal_commit (_59:void)
end f3;	# 42  
!ERROR: MALresolve:user.f3[34]:type mismatch bat[:void,:int] := void
!ERROR: 'batcalc.+' undefined in user.f3[34]
!ERROR: 'bat.persists' undefined in user.f3[40]
Optimizer commonExpressionRemoval optimizer failed
function user.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-(_2:int)
    t2:bat[:void,:int]  := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-(_4:str)
    t3 := array.grid(1:int,500,1:int,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat_int_int_int (t7:bat[:void,:int])<-(_7:int)(t6:bat[:void,:int])
    t8 := batcalc.+(t3,t7);	# 6 CMDbatADD_int_int_int (t8:bat[:void,:int])<-(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t8);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t8:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1:int,0);	# 9 ARRAYgrid_int (t11:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14:bat[:void,:int]  := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-(_18:str)
    t19 := batcalc.*(500,t3);	# 13 CMDcstMULbat_int_int_int (t19:bat[:void,:int])<-(_7:int)(t3:bat[:void,:int])
    t20 := batcalc.+(t6,t19);	# 14 CMDbatADD_int_int_int (t20:bat[:void,:int])<-(t6:bat[:void,:int])(t19:bat[:void,:int])
    t21 := batcalc.oid(t20);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t20:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1:int,500,500,0);	# 17 ARRAYgrid_int (t23:bat[:void,:int])<-(_6:int)(_7:int)(_7:int)(_2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t26 := batcalc.*(t13,t25);	# 20 CMDbatMUL_int_int_int (t26:bat[:void,:int])<-(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t26;	# 21  (a_i1:bat[:void,:int])<-(t26:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-(_6:int) jump 36
    t31 := batcalc.init(t3,i1);	# 23 CMDbatintinit (t31:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 24 CMDcstMULbat_int_int_int (t32:bat[:void,:int])<-(_7:int)(t31:bat[:void,:int])
    t33 := batcalc.+(t3,t32);	# 25 CMDbatADD_int_int_int (t33:bat[:void,:int])<-(t3:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t33);	# 26 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t33:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 27 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    t38 := algebra.join(t12,t35);	# 28 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    t45 := batcalc.+(t31,t19);	# 29 CMDbatADD_int_int_int (t45:bat[:void,:int])<-(t31:bat[:void,:int])(t19:bat[:void,:int])
    t46 := batcalc.oid(t45);	# 30 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t45:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 31 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    t50 := algebra.join(t24,t47);	# 32 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    t51 := batcalc.*(t38,t50);	# 33 CMDbatMUL_int_int_int (t51:bat[:void,:int])<-(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t51);	# 34  unknown (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t51:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 35 RNGnextElement_int (go:bit)(i1:int)<-(_48:int)(_52:int) jump 23
exit (go,i1);	# 36  (go:bit)(i1:int)
    t52 := a_i1;	# 37  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 38  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 39 BKCsetName (_55:void)<-(top:bat[:void,:int])(_56:str)
    bat.persists(top,true);	# 40  unknown (_57:any)<-(top:bat[:void,:int])(_58:bit)
    transaction.commit();	# 41 TRNglobal_commit (_59:void)
end f3;	# 42  
!ERROR: MALresolve:user.f3[34]:type mismatch bat[:void,:int] := void
!ERROR: 'batcalc.+' undefined in user.f3[34]
!ERROR: 'bat.persists' undefined in user.f3[40]
Optimizer strengthReduction failed
function user.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-(_2:int)
    t2:bat[:void,:int]  := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-(_4:str)
    t3 := array.grid(1:int,500,1:int,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat_int_int_int (t7:bat[:void,:int])<-(_7:int)(t6:bat[:void,:int])
    t8 := batcalc.+(t3,t7);	# 6 CMDbatADD_int_int_int (t8:bat[:void,:int])<-(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t8);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t8:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1:int,0);	# 9 ARRAYgrid_int (t11:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14:bat[:void,:int]  := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-(_18:str)
    t19 := batcalc.*(500,t3);	# 13 CMDcstMULbat_int_int_int (t19:bat[:void,:int])<-(_7:int)(t3:bat[:void,:int])
    t20 := batcalc.+(t6,t19);	# 14 CMDbatADD_int_int_int (t20:bat[:void,:int])<-(t6:bat[:void,:int])(t19:bat[:void,:int])
    t21 := batcalc.oid(t20);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t20:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1:int,500,500,0);	# 17 ARRAYgrid_int (t23:bat[:void,:int])<-(_6:int)(_7:int)(_7:int)(_2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t26 := batcalc.*(t13,t25);	# 20 CMDbatMUL_int_int_int (t26:bat[:void,:int])<-(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t26;	# 21  (a_i1:bat[:void,:int])<-(t26:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-(_6:int) jump 36
    t31 := batcalc.init(t3,i1);	# 23 CMDbatintinit (t31:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 24 CMDcstMULbat_int_int_int (t32:bat[:void,:int])<-(_7:int)(t31:bat[:void,:int])
    t33 := batcalc.+(t3,t32);	# 25 CMDbatADD_int_int_int (t33:bat[:void,:int])<-(t3:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t33);	# 26 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t33:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 27 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    t38 := algebra.join(t12,t35);	# 28 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    t45 := batcalc.+(t31,t19);	# 29 CMDbatADD_int_int_int (t45:bat[:void,:int])<-(t31:bat[:void,:int])(t19:bat[:void,:int])
    t46 := batcalc.oid(t45);	# 30 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t45:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 31 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    t50 := algebra.join(t24,t47);	# 32 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    t51 := batcalc.*(t38,t50);	# 33 CMDbatMUL_int_int_int (t51:bat[:void,:int])<-(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t51);	# 34  unknown (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t51:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 35 RNGnextElement_int (go:bit)(i1:int)<-(_48:int)(_52:int) jump 23
exit (go,i1);	# 36  (go:bit)(i1:int)
    t52 := a_i1;	# 37  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 38  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 39 BKCsetName (_55:void)<-(top:bat[:void,:int])(_56:str)
    bat.persists(top,true);	# 40  unknown (_57:any)<-(top:bat[:void,:int])(_58:bit)
    transaction.commit();	# 41 TRNglobal_commit (_59:void)
end f3;	# 42  
!ERROR: MALresolve:user.f3[34]:type mismatch bat[:void,:int] := void
!ERROR: 'batcalc.+' undefined in user.f3[34]
!ERROR: 'bat.persists' undefined in user.f3[40]
Optimizer strengthReduction optimizer failed
function user.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-(_2:int)
    t2:bat[:void,:int]  := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-(_4:str)
    t3 := array.grid(1:int,500,1:int,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat_int_int_int (t7:bat[:void,:int])<-(_7:int)(t6:bat[:void,:int])
    t8 := batcalc.+(t3,t7);	# 6 CMDbatADD_int_int_int (t8:bat[:void,:int])<-(t3:bat[:void,:int])(t7:bat[:void,:int])
    t9 := batcalc.oid(t8);	# 7 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t8:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 8 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    t11 := array.grid(500,500,1:int,0);	# 9 ARRAYgrid_int (t11:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_2:int)
    t12 := batcalc.oid(t11);	# 10 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 11 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    t14:bat[:void,:int]  := bbp.bind("A_bat");	# 12 CMDbbpbind (t14:bat[:void,:int])<-(_18:str)
    t19 := batcalc.*(500,t3);	# 13 CMDcstMULbat_int_int_int (t19:bat[:void,:int])<-(_7:int)(t3:bat[:void,:int])
    t20 := batcalc.+(t6,t19);	# 14 CMDbatADD_int_int_int (t20:bat[:void,:int])<-(t6:bat[:void,:int])(t19:bat[:void,:int])
    t21 := batcalc.oid(t20);	# 15 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t20:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 16 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    t23 := array.grid(1:int,500,500,0);	# 17 ARRAYgrid_int (t23:bat[:void,:int])<-(_6:int)(_7:int)(_7:int)(_2:int)
    t24 := batcalc.oid(t23);	# 18 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 19 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    t26 := batcalc.*(t13,t25);	# 20 CMDbatMUL_int_int_int (t26:bat[:void,:int])<-(t13:bat[:void,:int])(t25:bat[:void,:int])
    a_i1 := t26;	# 21  (a_i1:bat[:void,:int])<-(t26:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 22 RNGnewRange_int (go:bit)(i1:int)<-(_6:int) jump 36
    t31 := batcalc.init(t3,i1);	# 23 CMDbatintinit (t31:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 24 CMDcstMULbat_int_int_int (t32:bat[:void,:int])<-(_7:int)(t31:bat[:void,:int])
    t33 := batcalc.+(t3,t32);	# 25 CMDbatADD_int_int_int (t33:bat[:void,:int])<-(t3:bat[:void,:int])(t32:bat[:void,:int])
    t34 := batcalc.oid(t33);	# 26 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t33:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 27 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    t38 := algebra.join(t12,t35);	# 28 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    t45 := batcalc.+(t31,t19);	# 29 CMDbatADD_int_int_int (t45:bat[:void,:int])<-(t31:bat[:void,:int])(t19:bat[:void,:int])
    t46 := batcalc.oid(t45);	# 30 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t45:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 31 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    t50 := algebra.join(t24,t47);	# 32 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    t51 := batcalc.*(t38,t50);	# 33 CMDbatMUL_int_int_int (t51:bat[:void,:int])<-(t38:bat[:void,:int])(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t51);	# 34  unknown (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t51:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 35 RNGnextElement_int (go:bit)(i1:int)<-(_48:int)(_52:int) jump 23
exit (go,i1);	# 36  (go:bit)(i1:int)
    t52 := a_i1;	# 37  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 38  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 39 BKCsetName (_55:void)<-(top:bat[:void,:int])(_56:str)
    bat.persists(top,true);	# 40  unknown (_57:any)<-(top:bat[:void,:int])(_58:bit)
    transaction.commit();	# 41 TRNglobal_commit (_59:void)
end f3;	# 42  
!ERROR: MALresolve:user.f3[57]:type mismatch bat[:void,:int] := void
!ERROR: 'batcalc.+' undefined in user.f3[57]
!ERROR: 'bat.persists' undefined in user.f3[64]
Optimizer garbageCollector failed
function user.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-(_2:int)
    t2:bat[:void,:int]  := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-(_4:str)
    t3 := array.grid(1:int,500,1:int,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat_int_int_int (t7:bat[:void,:int])<-(_7:int)(t6:bat[:void,:int])
    t8 := batcalc.+(t3,t7);	# 6 CMDbatADD_int_int_int (t8:bat[:void,:int])<-(t3:bat[:void,:int])(t7:bat[:void,:int])
    bat.setGarbage(t7);	# 7 CMDbbpgarbage (_60:void)<-(t7:bat[:void,:int])
    t9 := batcalc.oid(t8);	# 8 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t8:bat[:void,:int])
    bat.setGarbage(t8);	# 9 CMDbbpgarbage (_61:void)<-(t8:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 10 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    bat.setGarbage(t9);	# 11 CMDbbpgarbage (_62:void)<-(t9:bat[:void,:oid])
    t11 := array.grid(500,500,1:int,0);	# 12 ARRAYgrid_int (t11:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_2:int)
    t12 := batcalc.oid(t11);	# 13 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    bat.setGarbage(t11);	# 14 CMDbbpgarbage (_63:void)<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 15 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    bat.setGarbage(t10);	# 16 CMDbbpgarbage (_64:void)<-(t10:bat[:void,:int])
    t14:bat[:void,:int]  := bbp.bind("A_bat");	# 17 CMDbbpbind (t14:bat[:void,:int])<-(_18:str)
    t19 := batcalc.*(500,t3);	# 18 CMDcstMULbat_int_int_int (t19:bat[:void,:int])<-(_7:int)(t3:bat[:void,:int])
    t20 := batcalc.+(t6,t19);	# 19 CMDbatADD_int_int_int (t20:bat[:void,:int])<-(t6:bat[:void,:int])(t19:bat[:void,:int])
    bat.setGarbage(t6);	# 20 CMDbbpgarbage (_65:void)<-(t6:bat[:void,:int])
    t21 := batcalc.oid(t20);	# 21 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t20:bat[:void,:int])
    bat.setGarbage(t20);	# 22 CMDbbpgarbage (_66:void)<-(t20:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 23 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    bat.setGarbage(t21);	# 24 CMDbbpgarbage (_67:void)<-(t21:bat[:void,:oid])
    t23 := array.grid(1:int,500,500,0);	# 25 ARRAYgrid_int (t23:bat[:void,:int])<-(_6:int)(_7:int)(_7:int)(_2:int)
    t24 := batcalc.oid(t23);	# 26 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    bat.setGarbage(t23);	# 27 CMDbbpgarbage (_68:void)<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 28 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    bat.setGarbage(t22);	# 29 CMDbbpgarbage (_69:void)<-(t22:bat[:void,:int])
    t26 := batcalc.*(t13,t25);	# 30 CMDbatMUL_int_int_int (t26:bat[:void,:int])<-(t13:bat[:void,:int])(t25:bat[:void,:int])
    bat.setGarbage(t13);	# 31 CMDbbpgarbage (_70:void)<-(t13:bat[:void,:int])
    bat.setGarbage(t25);	# 32 CMDbbpgarbage (_71:void)<-(t25:bat[:void,:int])
    a_i1 := t26;	# 33  (a_i1:bat[:void,:int])<-(t26:bat[:void,:int])
    bat.setGarbage(t26);	# 34 CMDbbpgarbage (_72:void)<-(t26:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 35 RNGnewRange_int (go:bit)(i1:int)<-(_6:int) jump 60
    t31 := batcalc.init(t3,i1);	# 36 CMDbatintinit (t31:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 37 CMDcstMULbat_int_int_int (t32:bat[:void,:int])<-(_7:int)(t31:bat[:void,:int])
    t33 := batcalc.+(t3,t32);	# 38 CMDbatADD_int_int_int (t33:bat[:void,:int])<-(t3:bat[:void,:int])(t32:bat[:void,:int])
    bat.setGarbage(t32);	# 39 CMDbbpgarbage (_73:void)<-(t32:bat[:void,:int])
    t34 := batcalc.oid(t33);	# 40 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t33:bat[:void,:int])
    bat.setGarbage(t33);	# 41 CMDbbpgarbage (_74:void)<-(t33:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 42 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    bat.setGarbage(t34);	# 43 CMDbbpgarbage (_75:void)<-(t34:bat[:void,:oid])
    t38 := algebra.join(t12,t35);	# 44 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    bat.setGarbage(t35);	# 45 CMDbbpgarbage (_76:void)<-(t35:bat[:void,:int])
    t45 := batcalc.+(t31,t19);	# 46 CMDbatADD_int_int_int (t45:bat[:void,:int])<-(t31:bat[:void,:int])(t19:bat[:void,:int])
    bat.setGarbage(t31);	# 47 CMDbbpgarbage (_77:void)<-(t31:bat[:void,:int])
    t46 := batcalc.oid(t45);	# 48 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t45:bat[:void,:int])
    bat.setGarbage(t45);	# 49 CMDbbpgarbage (_78:void)<-(t45:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 50 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    bat.setGarbage(t46);	# 51 CMDbbpgarbage (_79:void)<-(t46:bat[:void,:oid])
    t50 := algebra.join(t24,t47);	# 52 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    bat.setGarbage(t47);	# 53 CMDbbpgarbage (_80:void)<-(t47:bat[:void,:int])
    t51 := batcalc.*(t38,t50);	# 54 CMDbatMUL_int_int_int (t51:bat[:void,:int])<-(t38:bat[:void,:int])(t50:bat[:void,:int])
    bat.setGarbage(t38);	# 55 CMDbbpgarbage (_81:void)<-(t38:bat[:void,:int])
    bat.setGarbage(t50);	# 56 CMDbbpgarbage (_82:void)<-(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t51);	# 57  unknown (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t51:bat[:void,:int])
    bat.setGarbage(t51);	# 58 CMDbbpgarbage (_83:void)<-(t51:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 59 RNGnextElement_int (go:bit)(i1:int)<-(_48:int)(_52:int) jump 36
exit (go,i1);	# 60  (go:bit)(i1:int)
    t52 := a_i1;	# 61  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 62  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 63 BKCsetName (_55:void)<-(top:bat[:void,:int])(_56:str)
    bat.persists(top,true);	# 64  unknown (_57:any)<-(top:bat[:void,:int])(_58:bit)
    transaction.commit();	# 65 TRNglobal_commit (_59:void)
end f3;	# 66  
!ERROR: MALresolve:user.f3[57]:type mismatch bat[:void,:int] := void
!ERROR: 'batcalc.+' undefined in user.f3[57]
!ERROR: 'bat.persists' undefined in user.f3[64]
Optimizer garbageCollector optimizer failed
function user.f3():void;	# 0  (f3:void)
    i1 := 0;	# 1  (i1:int)<-(_2:int)
    t2:bat[:void,:int]  := bbp.bind("B_bat");	# 2 CMDbbpbind (t2:bat[:void,:int])<-(_4:str)
    t3 := array.grid(1:int,500,1:int,0);	# 3 ARRAYgrid_int (t3:bat[:void,:int])<-(_6:int)(_7:int)(_6:int)(_2:int)
    t6 := batcalc.init(t3,i1);	# 4 CMDbatintinit (t6:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t7 := batcalc.*(500,t6);	# 5 CMDcstMULbat_int_int_int (t7:bat[:void,:int])<-(_7:int)(t6:bat[:void,:int])
    t8 := batcalc.+(t3,t7);	# 6 CMDbatADD_int_int_int (t8:bat[:void,:int])<-(t3:bat[:void,:int])(t7:bat[:void,:int])
    bat.setGarbage(t7);	# 7 CMDbbpgarbage (_60:void)<-(t7:bat[:void,:int])
    t9 := batcalc.oid(t8);	# 8 CMDconvertvoid_int_oid (t9:bat[:void,:oid])<-(t8:bat[:void,:int])
    bat.setGarbage(t8);	# 9 CMDbbpgarbage (_61:void)<-(t8:bat[:void,:int])
    t10 := algebra.join(t9,t2);	# 10 ALGjoin (t10:bat[:void,:int])<-(t9:bat[:void,:oid])(t2:bat[:void,:int])
    bat.setGarbage(t9);	# 11 CMDbbpgarbage (_62:void)<-(t9:bat[:void,:oid])
    t11 := array.grid(500,500,1:int,0);	# 12 ARRAYgrid_int (t11:bat[:void,:int])<-(_7:int)(_7:int)(_6:int)(_2:int)
    t12 := batcalc.oid(t11);	# 13 CMDconvertvoid_int_oid (t12:bat[:void,:oid])<-(t11:bat[:void,:int])
    bat.setGarbage(t11);	# 14 CMDbbpgarbage (_63:void)<-(t11:bat[:void,:int])
    t13 := algebra.join(t12,t10);	# 15 ALGjoin (t13:bat[:void,:int])<-(t12:bat[:void,:oid])(t10:bat[:void,:int])
    bat.setGarbage(t10);	# 16 CMDbbpgarbage (_64:void)<-(t10:bat[:void,:int])
    t14:bat[:void,:int]  := bbp.bind("A_bat");	# 17 CMDbbpbind (t14:bat[:void,:int])<-(_18:str)
    t19 := batcalc.*(500,t3);	# 18 CMDcstMULbat_int_int_int (t19:bat[:void,:int])<-(_7:int)(t3:bat[:void,:int])
    t20 := batcalc.+(t6,t19);	# 19 CMDbatADD_int_int_int (t20:bat[:void,:int])<-(t6:bat[:void,:int])(t19:bat[:void,:int])
    bat.setGarbage(t6);	# 20 CMDbbpgarbage (_65:void)<-(t6:bat[:void,:int])
    t21 := batcalc.oid(t20);	# 21 CMDconvertvoid_int_oid (t21:bat[:void,:oid])<-(t20:bat[:void,:int])
    bat.setGarbage(t20);	# 22 CMDbbpgarbage (_66:void)<-(t20:bat[:void,:int])
    t22 := algebra.join(t21,t14);	# 23 ALGjoin (t22:bat[:void,:int])<-(t21:bat[:void,:oid])(t14:bat[:void,:int])
    bat.setGarbage(t21);	# 24 CMDbbpgarbage (_67:void)<-(t21:bat[:void,:oid])
    t23 := array.grid(1:int,500,500,0);	# 25 ARRAYgrid_int (t23:bat[:void,:int])<-(_6:int)(_7:int)(_7:int)(_2:int)
    t24 := batcalc.oid(t23);	# 26 CMDconvertvoid_int_oid (t24:bat[:void,:oid])<-(t23:bat[:void,:int])
    bat.setGarbage(t23);	# 27 CMDbbpgarbage (_68:void)<-(t23:bat[:void,:int])
    t25 := algebra.join(t24,t22);	# 28 ALGjoin (t25:bat[:void,:int])<-(t24:bat[:void,:oid])(t22:bat[:void,:int])
    bat.setGarbage(t22);	# 29 CMDbbpgarbage (_69:void)<-(t22:bat[:void,:int])
    t26 := batcalc.*(t13,t25);	# 30 CMDbatMUL_int_int_int (t26:bat[:void,:int])<-(t13:bat[:void,:int])(t25:bat[:void,:int])
    bat.setGarbage(t13);	# 31 CMDbbpgarbage (_70:void)<-(t13:bat[:void,:int])
    bat.setGarbage(t25);	# 32 CMDbbpgarbage (_71:void)<-(t25:bat[:void,:int])
    a_i1 := t26;	# 33  (a_i1:bat[:void,:int])<-(t26:bat[:void,:int])
    bat.setGarbage(t26);	# 34 CMDbbpgarbage (_72:void)<-(t26:bat[:void,:int])
barrier (go,i1):= mal.newRange(1:int);	# 35 RNGnewRange_int (go:bit)(i1:int)<-(_6:int) jump 60
    t31 := batcalc.init(t3,i1);	# 36 CMDbatintinit (t31:bat[:void,:int])<-(t3:bat[:void,:int])(i1:int)
    t32 := batcalc.*(500,t31);	# 37 CMDcstMULbat_int_int_int (t32:bat[:void,:int])<-(_7:int)(t31:bat[:void,:int])
    t33 := batcalc.+(t3,t32);	# 38 CMDbatADD_int_int_int (t33:bat[:void,:int])<-(t3:bat[:void,:int])(t32:bat[:void,:int])
    bat.setGarbage(t32);	# 39 CMDbbpgarbage (_73:void)<-(t32:bat[:void,:int])
    t34 := batcalc.oid(t33);	# 40 CMDconvertvoid_int_oid (t34:bat[:void,:oid])<-(t33:bat[:void,:int])
    bat.setGarbage(t33);	# 41 CMDbbpgarbage (_74:void)<-(t33:bat[:void,:int])
    t35 := algebra.join(t34,t2);	# 42 ALGjoin (t35:bat[:void,:int])<-(t34:bat[:void,:oid])(t2:bat[:void,:int])
    bat.setGarbage(t34);	# 43 CMDbbpgarbage (_75:void)<-(t34:bat[:void,:oid])
    t38 := algebra.join(t12,t35);	# 44 ALGjoin (t38:bat[:void,:int])<-(t12:bat[:void,:oid])(t35:bat[:void,:int])
    bat.setGarbage(t35);	# 45 CMDbbpgarbage (_76:void)<-(t35:bat[:void,:int])
    t45 := batcalc.+(t31,t19);	# 46 CMDbatADD_int_int_int (t45:bat[:void,:int])<-(t31:bat[:void,:int])(t19:bat[:void,:int])
    bat.setGarbage(t31);	# 47 CMDbbpgarbage (_77:void)<-(t31:bat[:void,:int])
    t46 := batcalc.oid(t45);	# 48 CMDconvertvoid_int_oid (t46:bat[:void,:oid])<-(t45:bat[:void,:int])
    bat.setGarbage(t45);	# 49 CMDbbpgarbage (_78:void)<-(t45:bat[:void,:int])
    t47 := algebra.join(t46,t14);	# 50 ALGjoin (t47:bat[:void,:int])<-(t46:bat[:void,:oid])(t14:bat[:void,:int])
    bat.setGarbage(t46);	# 51 CMDbbpgarbage (_79:void)<-(t46:bat[:void,:oid])
    t50 := algebra.join(t24,t47);	# 52 ALGjoin (t50:bat[:void,:int])<-(t24:bat[:void,:oid])(t47:bat[:void,:int])
    bat.setGarbage(t47);	# 53 CMDbbpgarbage (_80:void)<-(t47:bat[:void,:int])
    t51 := batcalc.*(t38,t50);	# 54 CMDbatMUL_int_int_int (t51:bat[:void,:int])<-(t38:bat[:void,:int])(t50:bat[:void,:int])
    bat.setGarbage(t38);	# 55 CMDbbpgarbage (_81:void)<-(t38:bat[:void,:int])
    bat.setGarbage(t50);	# 56 CMDbbpgarbage (_82:void)<-(t50:bat[:void,:int])
    a_i1 := batcalc.+(a_i1,a_i1,t51);	# 57  unknown (a_i1:bat[:void,:int])<-(a_i1:bat[:void,:int])(a_i1:bat[:void,:int])(t51:bat[:void,:int])
    bat.setGarbage(t51);	# 58 CMDbbpgarbage (_83:void)<-(t51:bat[:void,:int])
    redo (go,i1):= mal.nextElement(1:int,3:int);	# 59 RNGnextElement_int (go:bit)(i1:int)<-(_48:int)(_52:int) jump 36
exit (go,i1);	# 60  (go:bit)(i1:int)
    t52 := a_i1;	# 61  (t52:bat[:void,:int])<-(a_i1:bat[:void,:int])
    top := t52;	# 62  (top:bat[:void,:int])<-(t52:bat[:void,:int])
    bat.setName(top,"SIM_bat");	# 63 BKCsetName (_55:void)<-(top:bat[:void,:int])(_56:str)
    bat.persists(top,true);	# 64  unknown (_57:any)<-(top:bat[:void,:int])(_58:bit)
    transaction.commit();	# 65 TRNglobal_commit (_59:void)
end f3;	# 66  
!ERROR: 'bat.persists' undefined in user.f4[2]
Optimizer expressionAccumulation failed
function user.f4():void;	# 0  (f4:void)
    SIM_bat := bbp.bind("SIM_bat");	# 1 CMDbbpbind (SIM_bat:bat[:any,:any])<-(_2:str)
    bat.persists(SIM_bat,false);	# 2  unknown (_3:any)<-(SIM_bat:bat[:any,:any])(_4:bit)
    transaction.commit();	# 3 TRNglobal_commit (_5:void)
end f4;	# 4  
!ERROR: 'bat.persists' undefined in user.f4[2]
Optimizer expressionAccumulation optimizer failed
function user.f4():void;	# 0  (f4:void)
    SIM_bat := bbp.bind("SIM_bat");	# 1 CMDbbpbind (SIM_bat:bat[:any,:any])<-(_2:str)
    bat.persists(SIM_bat,false);	# 2  unknown (_3:any)<-(SIM_bat:bat[:any,:any])(_4:bit)
    transaction.commit();	# 3 TRNglobal_commit (_5:void)
end f4;	# 4  
!ERROR: 'bat.persists' undefined in user.f4[2]
Optimizer garbageCollector failed
function user.f4():void;	# 0  (f4:void)
    SIM_bat := bbp.bind("SIM_bat");	# 1 CMDbbpbind (SIM_bat:bat[:any,:any])<-(_2:str)
    bat.persists(SIM_bat,false);	# 2  unknown (_3:any)<-(SIM_bat:bat[:any,:any])(_4:bit)
    bat.setGarbage(SIM_bat);	# 3 CMDbbpgarbage (_6:void)<-(SIM_bat:bat[:any,:any])
    transaction.commit();	# 4 TRNglobal_commit (_5:void)
end f4;	# 5  
!ERROR: 'bat.persists' undefined in user.f4[2]
Optimizer garbageCollector optimizer failed
function user.f4():void;	# 0  (f4:void)
    SIM_bat := bbp.bind("SIM_bat");	# 1 CMDbbpbind (SIM_bat:bat[:any,:any])<-(_2:str)
    bat.persists(SIM_bat,false);	# 2  unknown (_3:any)<-(SIM_bat:bat[:any,:any])(_4:bit)
    bat.setGarbage(SIM_bat);	# 3 CMDbbpgarbage (_6:void)<-(SIM_bat:bat[:any,:any])
    transaction.commit();	# 4 TRNglobal_commit (_5:void)
end f4;	# 5  
!ERROR: 'bat.persists' undefined in user.f5[2]
Optimizer expressionAccumulation failed
function user.f5():void;	# 0  (f5:void)
    B_bat := bbp.bind("B_bat");	# 1 CMDbbpbind (B_bat:bat[:any,:any])<-(_2:str)
    bat.persists(B_bat,false);	# 2  unknown (_3:any)<-(B_bat:bat[:any,:any])(_4:bit)
    transaction.commit();	# 3 TRNglobal_commit (_5:void)
end f5;	# 4  
!ERROR: 'bat.persists' undefined in user.f5[2]
Optimizer expressionAccumulation optimizer failed
function user.f5():void;	# 0  (f5:void)
    B_bat := bbp.bind("B_bat");	# 1 CMDbbpbind (B_bat:bat[:any,:any])<-(_2:str)
    bat.persists(B_bat,false);	# 2  unknown (_3:any)<-(B_bat:bat[:any,:any])(_4:bit)
    transaction.commit();	# 3 TRNglobal_commit (_5:void)
end f5;	# 4  
!ERROR: 'bat.persists' undefined in user.f5[2]
Optimizer garbageCollector failed
function user.f5():void;	# 0  (f5:void)
    B_bat := bbp.bind("B_bat");	# 1 CMDbbpbind (B_bat:bat[:any,:any])<-(_2:str)
    bat.persists(B_bat,false);	# 2  unknown (_3:any)<-(B_bat:bat[:any,:any])(_4:bit)
    bat.setGarbage(B_bat);	# 3 CMDbbpgarbage (_6:void)<-(B_bat:bat[:any,:any])
    transaction.commit();	# 4 TRNglobal_commit (_5:void)
end f5;	# 5  
!ERROR: 'bat.persists' undefined in user.f5[2]
Optimizer garbageCollector optimizer failed
function user.f5():void;	# 0  (f5:void)
    B_bat := bbp.bind("B_bat");	# 1 CMDbbpbind (B_bat:bat[:any,:any])<-(_2:str)
    bat.persists(B_bat,false);	# 2  unknown (_3:any)<-(B_bat:bat[:any,:any])(_4:bit)
    bat.setGarbage(B_bat);	# 3 CMDbbpgarbage (_6:void)<-(B_bat:bat[:any,:any])
    transaction.commit();	# 4 TRNglobal_commit (_5:void)
end f5;	# 5  
!ERROR: 'bat.persists' undefined in user.f6[2]
Optimizer expressionAccumulation failed
function user.f6():void;	# 0  (f6:void)
    A_bat := bbp.bind("A_bat");	# 1 CMDbbpbind (A_bat:bat[:any,:any])<-(_2:str)
    bat.persists(A_bat,false);	# 2  unknown (_3:any)<-(A_bat:bat[:any,:any])(_4:bit)
    transaction.commit();	# 3 TRNglobal_commit (_5:void)
end f6;	# 4  
!ERROR: 'bat.persists' undefined in user.f6[2]
Optimizer expressionAccumulation optimizer failed
function user.f6():void;	# 0  (f6:void)
    A_bat := bbp.bind("A_bat");	# 1 CMDbbpbind (A_bat:bat[:any,:any])<-(_2:str)
    bat.persists(A_bat,false);	# 2  unknown (_3:any)<-(A_bat:bat[:any,:any])(_4:bit)
    transaction.commit();	# 3 TRNglobal_commit (_5:void)
end f6;	# 4  
!ERROR: 'bat.persists' undefined in user.f6[2]
Optimizer garbageCollector failed
function user.f6():void;	# 0  (f6:void)
    A_bat := bbp.bind("A_bat");	# 1 CMDbbpbind (A_bat:bat[:any,:any])<-(_2:str)
    bat.persists(A_bat,false);	# 2  unknown (_3:any)<-(A_bat:bat[:any,:any])(_4:bit)
    bat.setGarbage(A_bat);	# 3 CMDbbpgarbage (_6:void)<-(A_bat:bat[:any,:any])
    transaction.commit();	# 4 TRNglobal_commit (_5:void)
end f6;	# 5  
!ERROR: 'bat.persists' undefined in user.f6[2]
Optimizer garbageCollector optimizer failed
function user.f6():void;	# 0  (f6:void)
    A_bat := bbp.bind("A_bat");	# 1 CMDbbpbind (A_bat:bat[:any,:any])<-(_2:str)
    bat.persists(A_bat,false);	# 2  unknown (_3:any)<-(A_bat:bat[:any,:any])(_4:bit)
    bat.setGarbage(A_bat);	# 3 CMDbbpgarbage (_6:void)<-(A_bat:bat[:any,:any])
    transaction.commit();	# 4 TRNglobal_commit (_5:void)
end f6;	# 5  
function user.main():int;	# 0  (main:int)
    time := alarm.usec();	# 1 ALARMusec (time:lng)
#f1(); 	# 2  (_7:str)
#f2(); 	# 3  (_12:str)
#redo (go,i1) := mal.nextElement(1:int,500:int); 	# 4  (_14:str)
    mdb.list("user","f3");	# 5 MDBlist3 (_20:void)<-(_3:str)(_16:str)
#f3(); 	# 6  (_22:str)
#	f4(); 	# 7  (_27:str)
#f5(); 	# 8  (_32:str)
#	f6(); 	# 9  (_38:str)
#f1();f2();f3(); 	# 10  (_40:str)
    time2 := alarm.usec();	# 11 ALARMusec (time2:lng)
    diff := calc.-(time2,time);	# 12 CALCbinarySUBlnglng (diff:lng)<-(time2:lng)(time:lng)
    secs := calc./(diff,1000000);	# 13 CALCbinarycheckDIVlngint (secs:lng)<-(diff:lng)(_44:int)
    decs := calc.%(diff,1000000);	# 14 CALCbinaryMODlngint (decs:int)<-(diff:lng)(_44:int)
    io.printf("#TIME %d.",secs);	# 15 IOprint_formatted_lng (_46:int)<-(_47:str)(secs:lng)
    io.printf("%06d sec\n",decs);	# 16 IOprint_formatted_int (_48:int)<-(_49:str)(decs:int)
#quit(); 	# 17  (_51:str)
end main;	# 18  
function user.f3():void;
    i1 := 0;
    t2:bat[:void,:int]  := bbp.bind("B_bat");
    t3 := array.grid(1:int,500,1:int,0);
    t6 := batcalc.init(t3,i1);
    t7 := batcalc.*(500,t6);
    t8 := batcalc.+(t3,t7);
    bat.setGarbage(t7);
    t9 := batcalc.oid(t8);
    bat.setGarbage(t8);
    t10 := algebra.join(t9,t2);
    bat.setGarbage(t9);
    t11 := array.grid(500,500,1:int,0);
    t12 := batcalc.oid(t11);
    bat.setGarbage(t11);
    t13 := algebra.join(t12,t10);
    bat.setGarbage(t10);
    t14:bat[:void,:int]  := bbp.bind("A_bat");
    t19 := batcalc.*(500,t3);
    t20 := batcalc.+(t6,t19);
    bat.setGarbage(t6);
    t21 := batcalc.oid(t20);
    bat.setGarbage(t20);
    t22 := algebra.join(t21,t14);
    bat.setGarbage(t21);
    t23 := array.grid(1:int,500,500,0);
    t24 := batcalc.oid(t23);
    bat.setGarbage(t23);
    t25 := algebra.join(t24,t22);
    bat.setGarbage(t22);
    t26 := batcalc.*(t13,t25);
    bat.setGarbage(t13);
    bat.setGarbage(t25);
    a_i1 := t26;
    bat.setGarbage(t26);
barrier (go,i1):= mal.newRange(1:int);
    t31 := batcalc.init(t3,i1);
    t32 := batcalc.*(500,t31);
    t33 := batcalc.+(t3,t32);
    bat.setGarbage(t32);
    t34 := batcalc.oid(t33);
    bat.setGarbage(t33);
    t35 := algebra.join(t34,t2);
    bat.setGarbage(t34);
    t38 := algebra.join(t12,t35);
    bat.setGarbage(t35);
    t45 := batcalc.+(t31,t19);
    bat.setGarbage(t31);
    t46 := batcalc.oid(t45);
    bat.setGarbage(t45);
    t47 := algebra.join(t46,t14);
    bat.setGarbage(t46);
    t50 := algebra.join(t24,t47);
    bat.setGarbage(t47);
    t51 := batcalc.*(t38,t50);
    bat.setGarbage(t38);
    bat.setGarbage(t50);
    a_i1 := batcalc.+(a_i1,a_i1,t51);
    bat.setGarbage(t51);
    redo (go,i1):= mal.nextElement(1:int,3:int);
exit (go,i1);
    t52 := a_i1;
    top := t52;
    bat.setName(top,"SIM_bat");
    bat.persists(top,true);
    transaction.commit();
end f3;
#TIME 0.000161 sec

# 23:53:01 >  
# 23:53:01 >  Done.
# 23:53:01 >  

