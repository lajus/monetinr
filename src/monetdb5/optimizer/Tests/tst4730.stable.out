stdout of test 'tst4730` in directory 'monetdb5/optimizer` itself:


# 23:52:59 >  
# 23:52:59 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4730.mal </dev/null
# 23:52:59 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_src_optimizer', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.bind(s:str,t:str,c:str,i:int):bat[:any_1,:any_2];
    return X_5 := bat.new(:any_1,:any_2);
end bind;
function user.bind_dbat(s:str,t:str,i:int):bat[:any_1,:any_2];
    return X_4 := bat.new(:any_1,:any_2);
end bind_dbat;
function user.column(b:bat[:oid,:any_1],s:str,t:str,i:int,j:int):void;
end column;
factory user.qry1(A0:sht,A1:sht,A2:sht,A3:date,A4:int):bit;
    V6:bat[:oid,:date]  := user.bind("sys","lineitem","l_shipdate",0);
    V11:bat[:oid,:oid]  := user.bind_dbat("sys","lineitem",0);
    V22:bat[:oid,:bit]  := user.bind("sys","lineitem","l_returnflag",0);
    V29:bat[:oid,:bit]  := user.bind("sys","lineitem","l_linestatus",0);
    V53:bat[:oid,:int]  := user.bind("sys","lineitem","l_quantity",0);
    V60:bat[:oid,:flt]  := user.bind("sys","lineitem","l_extendedprice",0);
    V75:bat[:oid,:flt]  := user.bind("sys","lineitem","l_discount",0);
    V105:bat[:oid,:flt]  := user.bind("sys","lineitem","l_tax",0);
barrier always := true;
    V12 := bat.reverse(V11);
    V13 := algebra.kdifference(V6,V12);
    V16 := mtime.date_sub_sec_interval(A3,A4);
    a := mtime.date(nil);
    V17 := algebra.uselect(V13,a,V16);
    V20 := algebra.markT(V17,0@0);
    V21 := bat.reverse(V20);
    V26 := algebra.kdifference(V22,V12);
    V27 := algebra.join(V21,V26);
    (h,V28) := group.new(V27);
    V33 := algebra.kdifference(V29,V12);
    V34 := algebra.join(V21,V33);
    (Ext,V35) := group.derive(h,V28,V34);
    V36 := algebra.tunique(Ext);
    V37 := bat.mirror(V36);
    V42 := algebra.join(V37,V27);
    V43 := algebra.sort(V42);
    V51 := algebra.join(V37,V34);
    V52 := group.refine(V43,V51);
    V57 := algebra.kdifference(V53,V12);
    V58 := algebra.join(V21,V57);
    V59 := aggr.sum(V58,V35,V37);
    V64 := algebra.kdifference(V60,V12);
    V65 := algebra.join(V21,V64);
    V66 := aggr.sum(V65,V35,V37);
    V72 := calc.lng(A0);
    V74 := calc.*(V72,100);
    V82 := algebra.kdifference(V75,V12);
    V83 := algebra.join(V21,V82);
    V84:bat[:oid,:flt]  := mal.multiplex("calc.-",V74,V83);
    V86 := batcalc.*(V65,V84);
    V88 := aggr.sum(V86,V35,V37);
    V94 := calc.lng(A1);
    V95 := calc.*(V94,100);
    V100:bat[:oid,:flt]  := mal.multiplex("calc.-",V95,V83);
    V101 := batcalc.*(V65,V100);
    V103 := calc.lng(A2);
    V104 := calc.*(V103,100);
    V109 := algebra.kdifference(V105,V12);
    V110 := algebra.join(V21,V109);
    V111:bat[:oid,:flt]  := mal.multiplex("calc.+",V104,V110);
    V113 := batcalc.*(V101,V111);
    V114 := aggr.sum(V113,V35,V37);
    V122 := aggr.avg(V58,V35,V37);
    V127 := aggr.avg(V65,V35,V37);
    V129 := mal.multiplex("calc.round",V127,100);
    V135 := aggr.avg(V83,V35,V37);
    V136 := mal.multiplex("calc.round",V135,100);
    V137 := aggr.count(V35,V35,V37);
#sql.column(V42,"l_returnflag","varchar",1,0); 
#sql.column(V51,"l_linestatus","varchar",1,0); 
#sql.column(V59,"sum_qty","bigint",0,0); 
#sql.column(V66,"sum_base_price","decimal",19,2); 
#sql.column(V88,"sum_disc_price","decimal",19,4); 
#sql.column(V114,"sum_charge","decimal",19,6); 
#sql.column(V122,"avg_qty","double",53,0); 
#sql.column(V129,"avg_price","double",53,0); 
#sql.column(V136,"avg_disc","double",53,0); 
#sql.column(V137,"count_order","int",0,0); 
#sql.output(V52,V42,V51,V59,V66,V88,V114,V122,V129,V136,V137); 
    yield qry1 := always;
    redo always;
exit always;
    return qry1 := always;
end qry1;
function user.main():void;
#TPCH query 1 
# the basis for further optimizer tests 
#don;t depend on SQL library 
    mdb.List("user","qry1");
end main;
factory user.qry1(A0:sht,A1:sht,A2:sht,A3:date,A4:int):bit;#  0 qry1:bit := user.qry1(A0:sht, A1:sht, A2:sht, A3:date, A4:int) {G}
    V6:bat[:oid,:date] {rows=1000:lng} := user.bind("sys","lineitem","l_shipdate",0);#  1 V6:bat[:oid,:date] := user.bind(_8:str, _9:str, _10:str, _11:int) {G}
    V11:bat[:oid,:oid] {rows=1000:lng} := user.bind_dbat("sys","lineitem",0);#  2 V11:bat[:oid,:oid] := user.bind_dbat(_8:str, _9:str, _11:int) {G}
    V22:bat[:oid,:bit] {rows=1000:lng} := user.bind("sys","lineitem","l_returnflag",0);#  3 V22:bat[:oid,:bit] := user.bind(_8:str, _9:str, _14:str, _11:int) {G}
    V29:bat[:oid,:bit] {rows=1000:lng} := user.bind("sys","lineitem","l_linestatus",0);#  4 V29:bat[:oid,:bit] := user.bind(_8:str, _9:str, _16:str, _11:int) {G}
    V53:bat[:oid,:int] {rows=1000:lng} := user.bind("sys","lineitem","l_quantity",0);#  5 V53:bat[:oid,:int] := user.bind(_8:str, _9:str, _18:str, _11:int) {G}
    V60:bat[:oid,:flt] {rows=1000:lng} := user.bind("sys","lineitem","l_extendedprice",0);#  6 V60:bat[:oid,:flt] := user.bind(_8:str, _9:str, _20:str, _11:int) {G}
    V75:bat[:oid,:flt] {rows=1000:lng} := user.bind("sys","lineitem","l_discount",0);#  7 V75:bat[:oid,:flt] := user.bind(_8:str, _9:str, _22:str, _11:int) {G}
    V105:bat[:oid,:flt] {rows=1000:lng} := user.bind("sys","lineitem","l_tax",0);#  8 V105:bat[:oid,:flt] := user.bind(_8:str, _9:str, _24:str, _11:int) {G}
barrier always := true;                 #  9 always:bit := _26:bit {J72}
    V12{rows=1000} := bat.reverse(V11{rows=1000:lng});# 10 V12:bat[:oid,:oid] := BKCreverse(V11:bat[:oid,:oid]) {G}
    V13{rows=1} := algebra.kdifference(V6{rows=1000:lng},V12{rows=1000});# 11 V13:bat[:oid,:date] := ALGkdiff(V6:bat[:oid,:date], V12:bat[:oid,:oid]) {G}
    V16 := mtime.date_sub_sec_interval(A3,A4);# 12 V16:date := MTIMEdate_sub_sec_interval_wrap(A3:date, A4:int) 
    a := mtime.date(nil);               # 13 a:date := MTIMEnil2date(_31:void) 
    V17 := algebra.uselect(V13{rows=1},a,V16);# 14 V17:bat[:oid,:void] := ALGuselect(V13:bat[:oid,:date], a:date, V16:date) {G}
    V20 := algebra.markT(V17,0@0);      # 15 V20:bat[:oid,:oid] := ALGtmark(V17:bat[:oid,:void], _34:oid) {G}
    V21 := bat.reverse(V20);            # 16 V21:bat[:oid,:oid] := BKCreverse(V20:bat[:oid,:oid]) {G}
    V26{rows=1} := algebra.kdifference(V22{rows=1000:lng},V12{rows=1000});# 17 V26:bat[:oid,:bit] := ALGkdiff(V22:bat[:oid,:bit], V12:bat[:oid,:oid]) {G}
    V27 := algebra.join(V21,V26{rows=1});# 18 V27:bat[:oid,:bit] := ALGjoin(V21:bat[:oid,:oid], V26:bat[:oid,:bit]) {G}
    (h,V28) := group.new(V27);          # 19 (h:bat[:oid,:wrd], V28:bat[:oid,:oid]) := GRPgroup(V27:bat[:oid,:bit]) {G}
    V33{rows=1} := algebra.kdifference(V29{rows=1000:lng},V12{rows=1000});# 20 V33:bat[:oid,:bit] := ALGkdiff(V29:bat[:oid,:bit], V12:bat[:oid,:oid]) {G}
    V34 := algebra.join(V21,V33{rows=1});# 21 V34:bat[:oid,:bit] := ALGjoin(V21:bat[:oid,:oid], V33:bat[:oid,:bit]) {G}
    (Ext,V35) := group.derive(h,V28,V34);# 22 (Ext:bat[:oid,:wrd], V35:bat[:oid,:oid]) := GRPderive(h:bat[:oid,:wrd], V28:bat[:oid,:oid], V34:bat[:oid,:bit]) {G}
    V36 := algebra.tunique(Ext);        # 23 V36:bat[:oid,:wrd] := ALGtunique(Ext:bat[:oid,:wrd]) {G}
    V37 := bat.mirror(V36);             # 24 V37:bat[:oid,:oid] := BKCmirror(V36:bat[:oid,:wrd]) {G}
    V42 := algebra.join(V37,V27);       # 25 V42:bat[:oid,:bit] := ALGjoin(V37:bat[:oid,:oid], V27:bat[:oid,:bit]) {G}
    V43 := algebra.sort(V42);           # 26 V43:bat[:oid,:bit] := ALGhsort(V42:bat[:oid,:bit]) {G}
    V51 := algebra.join(V37,V34);       # 27 V51:bat[:oid,:bit] := ALGjoin(V37:bat[:oid,:oid], V34:bat[:oid,:bit]) {G}
    V52 := group.refine(V43,V51);       # 28 V52:bat[:oid,:oid] := GRPrefine(V43:bat[:oid,:bit], V51:bat[:oid,:bit]) {G}
    V57{rows=1} := algebra.kdifference(V53{rows=1000:lng},V12{rows=1000});# 29 V57:bat[:oid,:int] := ALGkdiff(V53:bat[:oid,:int], V12:bat[:oid,:oid]) {G}
    V58 := algebra.join(V21,V57{rows=1});# 30 V58:bat[:oid,:int] := ALGjoin(V21:bat[:oid,:oid], V57:bat[:oid,:int]) {G}
    V59 := aggr.sum(V58,V35,V37);       # 31 V59:bat[:oid,:lng] := AGGRsum3_lng(V58:bat[:oid,:int], V35:bat[:oid,:oid], V37:bat[:oid,:oid]) {G}
    V64{rows=1} := algebra.kdifference(V60{rows=1000:lng},V12{rows=1000});# 32 V64:bat[:oid,:flt] := ALGkdiff(V60:bat[:oid,:flt], V12:bat[:oid,:oid]) {G}
    V65 := algebra.join(V21,V64{rows=1});# 33 V65:bat[:oid,:flt] := ALGjoin(V21:bat[:oid,:oid], V64:bat[:oid,:flt]) {G}
    V66 := aggr.sum(V65,V35,V37);       # 34 V66:bat[:oid,:dbl] := AGGRsum3_dbl(V65:bat[:oid,:flt], V35:bat[:oid,:oid], V37:bat[:oid,:oid]) {G}
    V72 := calc.lng(A0);                # 35 V72:lng := CMDvarCONVERT(A0:sht) 
    V74 := calc.*(V72,100);             # 36 V74:lng := CMDvarMULsignal(V72:lng, _58:int) 
    V82{rows=1} := algebra.kdifference(V75{rows=1000:lng},V12{rows=1000});# 37 V82:bat[:oid,:flt] := ALGkdiff(V75:bat[:oid,:flt], V12:bat[:oid,:oid]) {G}
    V83 := algebra.join(V21,V82{rows=1});# 38 V83:bat[:oid,:flt] := ALGjoin(V21:bat[:oid,:oid], V82:bat[:oid,:flt]) {G}
    V84:bat[:oid,:flt]  := mal.multiplex("calc.-",V74,V83);# 39 V84:bat[:oid,:flt] := OPTremapMultiplex(_62:str, V74:lng, V83:bat[:oid,:flt]) {G}
    V86 := batcalc.*(V65,V84);          # 40 V86:bat[:oid,:flt] := CMDbatMULsignal(V65:bat[:oid,:flt], V84:bat[:oid,:flt]) {G}
    V88 := aggr.sum(V86,V35,V37);       # 41 V88:bat[:oid,:dbl] := AGGRsum3_dbl(V86:bat[:oid,:flt], V35:bat[:oid,:oid], V37:bat[:oid,:oid]) {G}
    V94 := calc.lng(A1);                # 42 V94:lng := CMDvarCONVERT(A1:sht) 
    V95 := calc.*(V94,100);             # 43 V95:lng := CMDvarMULsignal(V94:lng, _58:int) 
    V100:bat[:oid,:flt]  := mal.multiplex("calc.-",V95,V83);# 44 V100:bat[:oid,:flt] := OPTremapMultiplex(_62:str, V95:lng, V83:bat[:oid,:flt]) {G}
    V101 := batcalc.*(V65,V100);        # 45 V101:bat[:oid,:flt] := CMDbatMULsignal(V65:bat[:oid,:flt], V100:bat[:oid,:flt]) {G}
    V103 := calc.lng(A2);               # 46 V103:lng := CMDvarCONVERT(A2:sht) 
    V104 := calc.*(V103,100);           # 47 V104:lng := CMDvarMULsignal(V103:lng, _58:int) 
    V109{rows=1} := algebra.kdifference(V105{rows=1000:lng},V12{rows=1000});# 48 V109:bat[:oid,:flt] := ALGkdiff(V105:bat[:oid,:flt], V12:bat[:oid,:oid]) {G}
    V110 := algebra.join(V21,V109{rows=1});# 49 V110:bat[:oid,:flt] := ALGjoin(V21:bat[:oid,:oid], V109:bat[:oid,:flt]) {G}
    V111:bat[:oid,:flt]  := mal.multiplex("calc.+",V104,V110);# 50 V111:bat[:oid,:flt] := OPTremapMultiplex(_74:str, V104:lng, V110:bat[:oid,:flt]) {G}
    V113 := batcalc.*(V101,V111);       # 51 V113:bat[:oid,:flt] := CMDbatMULsignal(V101:bat[:oid,:flt], V111:bat[:oid,:flt]) {G}
    V114 := aggr.sum(V113,V35,V37);     # 52 V114:bat[:oid,:dbl] := AGGRsum3_dbl(V113:bat[:oid,:flt], V35:bat[:oid,:oid], V37:bat[:oid,:oid]) {G}
    V122 := aggr.avg(V58,V35,V37);      # 53 V122:bat[:oid,:dbl] := AGGRavg13_dbl(V58:bat[:oid,:int], V35:bat[:oid,:oid], V37:bat[:oid,:oid]) {G}
    V127 := aggr.avg(V65,V35,V37);      # 54 V127:bat[:oid,:dbl] := AGGRavg13_dbl(V65:bat[:oid,:flt], V35:bat[:oid,:oid], V37:bat[:oid,:oid]) {G}
    V129 := mal.multiplex("calc.round",V127,100);# 55 V129:any := OPTremapMultiplex(_80:str, V127:bat[:oid,:dbl], _58:int) {G}
    V135 := aggr.avg(V83,V35,V37);      # 56 V135:bat[:oid,:dbl] := AGGRavg13_dbl(V83:bat[:oid,:flt], V35:bat[:oid,:oid], V37:bat[:oid,:oid]) {G}
    V136 := mal.multiplex("calc.round",V135,100);# 57 V136:any := OPTremapMultiplex(_80:str, V135:bat[:oid,:dbl], _58:int) {G}
    V137 := aggr.count(V35,V35,V37);    # 58 V137:bat[:oid,:wrd] := AGGRcount3nils(V35:bat[:oid,:oid], V35:bat[:oid,:oid], V37:bat[:oid,:oid]) {G}
#sql.column(V42,"l_returnflag","varchar",1,0); 
#sql.column(V51,"l_linestatus","varchar",1,0); 
#sql.column(V59,"sum_qty","bigint",0,0); 
#sql.column(V66,"sum_base_price","decimal",19,2); 
#sql.column(V88,"sum_disc_price","decimal",19,4); 
#sql.column(V114,"sum_charge","decimal",19,6); 
#sql.column(V122,"avg_qty","double",53,0); 
#sql.column(V129,"avg_price","double",53,0); 
#sql.column(V136,"avg_disc","double",53,0); 
#sql.column(V137,"count_order","int",0,0); 
#sql.output(V52,V42,V51,V59,V66,V88,V114,V122,V129,V136,V137); 
    yield qry1 := always;               # 70 qry1:bit := always:bit 
    redo always;                        # 71 always:bit {J10}
exit always;                            # 72 always:bit 
    return qry1 := always;              # 73 qry1:bit := always:bit 
end qry1;                               # 74  

# 23:52:59 >  
# 23:52:59 >  Done.
# 23:52:59 >  

