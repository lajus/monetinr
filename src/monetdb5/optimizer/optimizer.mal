# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2011 MonetDB B.V.
# All Rights Reserved.

module optimizer;
pattern optimizer.accumulators():str
address OPTwrapper;
pattern optimizer.accumulators(mod:str, fcn:str):str
address OPTwrapper
comment "Replace calculations with accumulator model";

#opt_aliases.mal

pattern optimizer.aliases():str
address OPTwrapper;
pattern optimizer.aliases(mod:str, fcn:str):str
address OPTwrapper
comment "Alias removal optimizer";

#opt_centipede.mal
module centipede;
pattern optimizer.centipede():str
address OPTwrapper;
pattern optimizer.centipede(mod:str, fcn:str):str
address OPTwrapper
comment "Modify the plan to exploit parallel processing on multiple cores";

command centipede.materialize(b:bat[:any_1,:any_2], low:any_2, high:any_2) :bat[:any_1,:any_2]
address OPTcentipedeMaterialize
comment "Implement the centipede partition operation. Throw an exception if the partition was empty,
because then the subquery should produce a NIL ";

pattern centipede.vector(b:bat[:oid,:any_1]) (:oid,:oid...)
address OPTvectorOid
comment "Derive a series of slices values based on sampling";

#opt_cluster

pattern optimizer.cluster():str
address OPTwrapper;
pattern optimizer.cluster(mod:str, fcn:str):str
address OPTwrapper
comment "Modify the plan to exploit parallel processing on multiple cores";

#opt_coercions.mal

pattern optimizer.coercions():str
address OPTwrapper;
pattern optimizer.coercions(mod:str, fcn:str):str
address OPTwrapper
comment "Handle simple type coercions";

#opt_commonTerms.mal

pattern optimizer.commonTerms():str
address OPTwrapper;
pattern optimizer.commonTerms(mod:any_1, fcn:any_2):str
address OPTwrapper
comment "Common sub-expression optimizer"

#opt_compression.mal

pattern optimizer.compression():str
address OPTwrapper;
pattern optimizer.compression(mod:str, fcn:str):str
address OPTwrapper
comment "Compression code injection";

#opt_constants
pattern optimizer.constants():str
address OPTwrapper;
pattern optimizer.constants(mod:str, fcn:str):str 
address OPTwrapper
comment "Duplicate constant removal optimizer";

#opt_costModel.mal

pattern optimizer.costModel():str
address OPTwrapper;
pattern optimizer.costModel(mod:str, fcn:str):str
address OPTwrapper
comment "Estimate the cost of a relational expression";

#opt_crackers.mal

pattern optimizer.crackers():str
address OPTwrapper;
pattern optimizer.crackers(mod:str, fcn:str):str
address OPTwrapper
comment "Replace algebra select with crackers select";

#opt_datacell.mal

pattern optimizer.datacell():str
address OPTwrapper;
pattern optimizer.datacell(mod:str, fcn:str):str
address OPTwrapper
comment "Datacell expression optimizer";

#opt_dataflow.mal

pattern optimizer.dataflow():str
address OPTwrapper;
pattern optimizer.dataflow(mod:str, fcn:str):str
address OPTwrapper
comment "Dataflow bracket code injection";

#opt_deadcode.mal

pattern optimizer.deadcode():str
address OPTwrapper;
pattern optimizer.deadcode(mod:str, fcn:str):str
address OPTwrapper
comment "Dead code optimizer";

#opt_derivepath.mal

pattern optimizer.derivePath():str
address OPTwrapper;
pattern optimizer.derivePath(mod:str, fcn:str):str
address OPTwrapper
comment "Join path constructor";

#opt_dictionary.mal

module dictionary;

command initialize()
address DICTinitialize
comment "Intialize the dictionary catalog if needed";

command bind(nme:str) (idx:bat[:oid,:any_1], val:bat[:any_1,:any_2])
address DICTbind
comment "Localise the dictionary";

command expand(val:bat[:any_1,:any_2], b:bat[:oid,:any_2]):bat[:any_1,:any_2]
address DICTexpand
comment "Extend the dictionary with the values in b. This may trigger a partial recompilation of the MAL program when the storage type :any_1
is not sufficient anymore.";

command encode(val:bat[:any_1,:any_2], b:bat[:oid,:any_2]):bat[:oid,:any_1]
address DICTencode
comment "Use the dictionary to encode a table b.";

pattern compress{unsafe}(s:str, b:bat[:any_1,:any_2])
address DICTcompress
comment "Try to replace a table by its dictionary equivalent.";

command decompress{unsafe}(nme:str)
address DICTdecompress
comment "Remove the dictionary entry";

command group(idx:bat[:oid,:any_1], val:bat[:any_1,:any_2]) :bat[:oid,:any_2]
address DICTgroupid
comment "Obtain a representative oid per value from the index";

pattern optimizer.dictionary():str
address OPTwrapper;
pattern optimizer.dictionary(mod:str, fcn:str):str
address OPTwrapper;

#opt_emptySet.mal

pattern optimizer.emptySet():str
address OPTwrapper;
pattern optimizer.emptySet(mod:str, fcn:str):str
address OPTwrapper
comment "Symbolic evaluation of empty BAT expressions";

#opt_evaluate.mal

pattern optimizer.evaluate():str
address OPTwrapper;
pattern optimizer.evaluate(mod:str, fcn:str):str
address OPTwrapper
comment "Evaluate constant expressions once.";

#opt_factorize.mal

pattern optimizer.factorize():str
address OPTwrapper;
pattern optimizer.factorize(mod:str, fcn:str):str
address OPTwrapper
comment "Turn function into a factory";

#opt_garbagecollector.mal

pattern optimizer.garbageCollector():str
address OPTwrapper;
pattern optimizer.garbageCollector(mod:str, fcn:str):str
address OPTwrapper
comment "Garbage collector optimizer";

#opt_groups.mal
pattern optimizer.groups():str
address OPTwrapper;
pattern optimizer.groups(mod:str, fcn:str):str
address OPTwrapper
comment "Join path constructor";

pattern group.multicolumns(l:bat[:oid,:any]...)(ref:bat[:oid,:oid],grp:bat[:oid,:any],ext:bat[:oid,:any])
address GRPmulticolumngroup
comment "Derive a group index over multiple columns.";

#opt_querylog
pattern optimizer.querylog():str
address OPTwrapper;
pattern optimizer.querylog(mod:str, fcn:str):str
address OPTwrapper
comment "Collect SQL query statistics";

module optimizer;
pattern prelude()
address optimizer_prelude
comment "Initialize the optimizer";

pattern optimize(mod:str, fcn:str)
address QOToptimize
comment "Optimize a specific operation";

pattern setDebug():void 
address QOTdebugOptimizers;
pattern clrDebug():void 
address QOTclrdebugOptimizers;

pattern showFlowGraph(M:str,F:str,s:str):void 
address QOTshowFlowGraph
comment "Dump the data flow of the function 
	M.F in a format recognizable by the 
	command 'dot' on the file s";

pattern showPlan(M:str,F:str,s:str):void 
address QOTshowPlan;
pattern showPlan()
address QOTshowPlan
comment "Illustrate the plan derived so far";

#opt_inline.mal

pattern optimizer.inline():str
address OPTwrapper;
pattern optimizer.inline(mod:str, fcn:str):str
address OPTwrapper
comment "Expand inline functions";

#opt_joinpath.mal
pattern optimizer.joinPath():str
address OPTwrapper;
pattern optimizer.joinPath(mod:str, fcn:str):str
address OPTwrapper
comment "Join path constructor";

pattern algebra.joinPath(l:bat[:any,:any]...):bat[:oid,:any]
address ALGjoinPath
comment "Routine to handle join paths.  The type analysis is rather tricky.";

pattern algebra.leftjoinPath(l:bat[:any,:any]...):bat[:oid,:any]
address ALGjoinPath
comment "Routine to handle join paths.  The type analysis is rather tricky.";

pattern algebra.leftfetchjoinPath(l:bat[:any,:any]...):bat[:any,:any]
address ALGjoinPath
comment "Routine to handle join paths.  The type analysis is rather tricky.";

pattern algebra.semijoinPath(l:bat[:any,:any]...):bat[:any,:any]
address ALGjoinPath
comment "Routine to handle join paths.  The type analysis is rather tricky.";

#opt_joinselect
pattern optimizer.joinselect():str
address OPTwrapper;
pattern optimizer.joinselect(mod:str, fcn:str):str
address OPTwrapper
comment "Replace select with join select";

#opt_leaker
pattern optimizer.leaker():str
address OPTwrapper;
pattern optimizer.leaker(mod:str, fcn:str):str
address OPTwrapper
comment "Bind export function to rInterface module";

#opt_macro.mal

pattern optimizer.macro(targetmod:str,targetfcn:str):void
address OPTmacro
comment "Inline the code of the target function.";
pattern optimizer.macro(mod:str,fcn:str,targetmod:str,targetfcn:str):void
address OPTmacro
comment "Inline a target function used in a specific function.";

pattern optimizer.orcam(targetmod:str,targetfcn:str):void
address OPTorcam
comment "Inverse macro processor for current function";
pattern optimizer.orcam(mod:str,fcn:str,targetmod:str,targetfcn:str):void
address OPTorcam
comment "Inverse macro, find pattern and replace with a function call.";

#opt_mapreduce.mal

pattern optimizer.mapreduce():str
address OPTwrapper;
pattern optimizer.mapreduce(mod:str, fcn:str):str
address OPTwrapper
comment "Modify the plan to exploit parallel processing on multiple systems using map-reduce";

#module mapreduce;
module mapreduce;
command getCloud(nme:str):bat[:oid,:str]
address MRgetCloud
comment "Localize the elements of a named cloud";

#opt_mergetable.mal

pattern optimizer.mergetable():str
address OPTwrapper;
pattern optimizer.mergetable(mod:str, fcn:str):str
address OPTwrapper
comment "Resolve the multi-table definitions";

#opt_mitosis.mal

pattern optimizer.mitosis():str
address OPTwrapper;
pattern optimizer.mitosis(mod:str, fcn:str):str
address OPTwrapper
comment "Modify the plan to exploit parallel processing on multiple cores";

#opt_multiplex.mal
pattern optimizer.multiplex():void
address OPTwrapper
comment "Compiler for multiplexed instructions.";

pattern optimizer.multiplex(mod:str,fcn:str):void
address OPTwrapper
comment "Compiler for multiplexed instructions.";

#opt_matpack
pattern optimizer.matpack():str
address OPTwrapper;
pattern optimizer.matpack(mod:str, fcn:str):str
address OPTwrapper
comment "Unroll the mat.pack operation";

#opt_octopus.mal
module octopus;
pattern optimizer.octopus():str
address OPTwrapper;
pattern optimizer.octopus(mod:str, fcn:str):str
address OPTwrapper
comment "Map-execute-reduce parallelism optimizer";

pattern legAdvice(mod:str, fcn:str):int
address OPTlegAdvice
comment "Derive the number of legs to be used for query function";

#opt_origin
pattern optimizer.origin():str
address OPTwrapper;
pattern optimizer.origin(mod:str, fcn:str):str
address OPTwrapper
comment "OID origin tracker";

#opt_partitions.mal

pattern optimizer.partitions():str
address OPTwrapper;
pattern optimizer.partitions(mod:str, fcn:str):str
address OPTwrapper
comment "Experiment with partitioned databases";

#opt_prejoin.mal
pattern optimizer.prejoin():str
address OPTwrapper;
pattern optimizer.prejoin(mod:str, fcn:str):str
address OPTwrapper
comment "Dead code optimizer";
command algebra.prejoin(a:bat[:oid,:oid],b:bat[:oid,:any_1])(c:bat[:oid,:oid],d:bat[:oid,:any_1])
address ALGprejoin
comment "Recluster the table to reduce random access behavior.";


#opt_pushranges.mal

pattern optimizer.pushranges():str
address OPTwrapper;
pattern optimizer.pushranges(mod:str, fcn:str):str
address OPTwrapper
comment "Push constant range selections through the program";

#opt_qep.mal

pattern optimizer.dumpQEP()
address OPTwrapper
comment "Produce an indented tree visualisation";

#opt_recycler.mal

pattern optimizer.recycle():str
address OPTwrapper;
pattern optimizer.recycle(mod:str, fcn:str):str
address OPTwrapper
comment "Recycler marking and code injection";

#opt_reduce.mal

pattern optimizer.reduce():str
address OPTwrapper;
pattern optimizer.reduce(mod:str, fcn:str):str
address OPTwrapper
comment "Reduce the stack space claims";

#opt_remap.mal

pattern optimizer.remap():str
address OPTwrapper;
pattern optimizer.remap(mod:str, fcn:str):str
address OPTwrapper
comment "Remapping function calls to a their multiplex variant";

module mal;
pattern mal.multiplex(a:any...):any
address OPTremapMultiplex;

#opt_remoteQueries.mal

pattern optimizer.remoteQueries():str
address OPTwrapper;
pattern optimizer.remoteQueries(mod:str, fcn:str):str
address OPTwrapper
comment "Resolve the multi-table definitions";

#opt_reorder.mal

pattern optimizer.reorder():str
address OPTwrapper;
pattern optimizer.reorder(mod:str, fcn:str):str
address OPTwrapper
comment "Reorder by dataflow dependencies";

#opt_selcrack.mal

pattern optimizer.selcrack():str
address OPTwrapper;
pattern optimizer.selcrack(mod:str, fcn:str):str
address OPTwrapper
comment "Selection cracking";

#opt_statistics.mal

command inspect.getStatistics(nme:str):bat[:any_1,:any_2]
address QOTgetStatistics
comment "Get optimizer property statistics 
such as #calls, #total actions, #total time";

#opt_strengthReduction.mal

pattern optimizer.strengthReduction():str
address OPTwrapper;
pattern optimizer.strengthReduction(mod:str, fcn:str):str
address OPTwrapper
comment "Move constant expressions out of the loop";

#opt_support.mal

command mdb.traceOptimizer(flg:str)
address OPTsetDebugStr
comment "Otherwise it is considered a request to trace the optimizers,
which requires a comma separated list or pipeline name.";

#opt_trace.mal

pattern optimizer.trace():str
address OPTwrapper;
pattern optimizer.trace(mod:str, fcn:str):str
address OPTwrapper
comment "Collect trace of a specific operation";

pattern mdb.collect(v:any_1):void
address OPTtraceCall
comment "Dump the previous instruction to a temporary file";

#opt_pushranges.mal

pattern optimizer.pushselect():str
address OPTwrapper;
pattern optimizer.pushselect(mod:str, fcn:str):str
address OPTwrapper
comment "Push selects down projections";

optimizer.prelude();
