# The first memo driven execution
# use a built-in cost function
# use backward scheduling


	A:= bat.new(:int,:int);
	bat.insert(A,1,1);
	B:= algebra.copy(A);
	bat.setWriteMode(B);
	bat.insert(B,2,2);
	C:= algebra.copy(B);
	bat.setWriteMode(C);
	bat.insert(C,3,3);
	D:= algebra.copy(C);
	bat.setWriteMode(D);
	bat.insert(D,3,3);

	scheduler.choice2();
	T1:= algebra.join(A,B);
	T2:= algebra.join(B,C);
	T3:= algebra.join(C,D);

	scheduler.choice2("getVolume",T1,T2,T3);

	T4:= algebra.join(T1,C);
	T5:= algebra.join(A,T2);
	T6:= algebra.join(T2,D);
	T7:= algebra.join(B,T3);
	T8:= algebra.join(C,D);

	scheduler.choice2("getVolume",T4,T5,T6,T7,T8);

	T9:= algebra.join(T4,D);
	T10:= algebra.join(T5,D);
	T11:= algebra.join(A,T6);
	T12:= algebra.join(A,T7);
	T13:= algebra.join(T1,T8);

	scheduler.choice2("getVolume",T9,T10,T11,T12,T13);
	answer:= scheduler.pick(T9, T10, T11, T12, T13);
	io.print(answer);
