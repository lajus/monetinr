stdout of test 'memo01` in directory 'monetdb5/scheduler` itself:


# 22:56:36 >  
# 22:56:36 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=35791 --set xrpc_port=47149 --set monet_prompt= --trace --dbname=mTests_src_scheduler  memo01.mal < /dev/null
# 22:56:36 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_scheduler
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:37931/
function user.main():void;
# The first memo driven execution 
# use local cost functions, which leads to a hill-climber 
# Use the backward scheduling. 
    A := bat.new(:oid,:oid);
    bat.append(A,1@0);
    B := algebra.copy(A);
    bat.setWriteMode(B);
    bat.append(B,2@0);
    C := algebra.copy(B);
    bat.setWriteMode(C);
    bat.append(C,3@0);
    D := algebra.copy(C);
    bat.setWriteMode(D);
    bat.append(D,3@0);
    Acost := aggr.count(A);
    Bcost := aggr.count(B);
    Ccost := aggr.count(C);
    Dcost := aggr.count(D);
    T1cost := calc.+(Acost,Bcost);
    T2cost := calc.+(Bcost,Ccost);
    T3cost := calc.+(Ccost,Dcost);
    io.printf("choicepoint 1\n");
    scheduler.choice();
    T1 := algebra.join(A,B);
    T1cost := aggr.count(T1);
    T2 := algebra.join(B,C);
    T2cost := aggr.count(T2);
    T3 := algebra.join(C,D);
    T3cost := aggr.count(T3);
    io.printf("choicepoint 2\n");
    scheduler.choice(T1cost,T1,T2cost,T2,T3cost,T3);
    T4cost := calc.+(T1cost,Ccost);
    T5cost := calc.+(Acost,T2cost);
    T6cost := calc.+(T2cost,Dcost);
    T7cost := calc.+(Bcost,T3cost);
    T8cost := calc.+(Ccost,Dcost);
    T4 := algebra.join(T1,C);
    T4cost := aggr.count(T4);
    T5 := algebra.join(A,T2);
    T5cost := aggr.count(T5);
    T6 := algebra.join(T2,D);
    T6cost := aggr.count(T6);
    T7 := algebra.join(B,T3);
    T7cost := aggr.count(T7);
    T8 := algebra.join(C,D);
    T8cost := aggr.count(T8);
    io.printf("choicepoint 3\n");
    scheduler.choice(T4cost,T4,T5cost,T5,T6cost,T6,T7cost,T7,T8cost,T8);
    T9cost := calc.+(T2cost,Dcost);
    T10cost := calc.+(T5cost,Dcost);
    T11cost := calc.+(Acost,T6cost);
    T12cost := calc.+(Acost,T7cost);
    T13cost := calc.+(T1cost,T8cost);
    T9 := algebra.join(T4,D);
    T10 := algebra.join(T5,D);
    T11 := algebra.join(A,T6);
    T12 := algebra.join(A,T7);
    T13 := algebra.join(T1,T8);
    io.printf("choicepoint 4\n");
    scheduler.choice(T9cost,T9,T10cost,T10,T11cost,T11,T12cost,T12,T13cost,T13);
    answer := scheduler.pick(T9,T10,T11,T12,T13);
    io.print(answer);
end main;
choicepoint 1
choicepoint 2
choicepoint 3
choicepoint 4
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0@0,	  3@0	  ]

# 22:56:36 >  
# 22:56:36 >  Done.
# 22:56:36 >  

