@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.monetdb.org/Legal/MonetDBLicense

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2013 MonetDB B.V.
All Rights Reserved.
@

@f gdk_rangejoin

@c
/*
 * @a N. J. Nes
 *
 * @* Range Join Operators
 * The sql statement b.x <= a.z <= b.y, could be implemented using too thetajoins.
 * But that results in very large intermediates.
 */
@h
#ifndef GDK_RANGEJOIN_H
#define GDK_RANGEJOIN_H

/*
 * @- BAT range and band join operators
 * The BATbandjoin produces the associations [A, D] such that S.C-c1 <=
 * R.b <= S.C + c2.  The special case c1 = 0 and c2 = infinite leads to a
 * thetajoin.
 */
gdk_export BAT *BATrangejoin(BAT *l, BAT *rl, BAT *rh, bit li, bit hi);
/*
 * Join all BUNs of the BATs that have tail values: {rl <= l <= rh}.
 */
gdk_export BAT *BATbandjoin(BAT *l, BAT *r, ptr mnus, ptr plus, bit li, bit hi);
/*
 * Versions of bandjoin fixed on the merge implementation (possibly with a cut-off limit);
 */
#endif /* GDK_RANGEJOIN_H */
@c

#include "monetdb_config.h"
#include "gdk.h"
#include "gdk_private.h"
#include "gdk_rangejoin.h"
#include <math.h>

BAT *BATrangejoin(BAT *l, BAT *rl, BAT *rh, bit li, bit hi)
{
	BAT *bn;

	ERRORcheck(l == NULL, "BATrangejoin: invalid left operand");
	ERRORcheck(rl == NULL, "BATrangejoin: invalid right low operand");
	ERRORcheck(rh == NULL, "BATrangejoin: invalid right high operand");
	ERRORcheck(TYPEerror(l->ttype, rl->ttype), "BATrangejoin: type conflict\n");
	ERRORcheck(TYPEerror(l->ttype, rh->ttype), "BATrangejoin: type conflict\n");
	/* TODO check that rl and rh are aligned */

	bn = BATnew(BAThtype(l), BAThtype(rl), MIN(BATcount(l), BATcount(rl)));
	if (bn == NULL) 
		return bn;
	switch (ATOMstorage(rl->ttype)) {
	case TYPE_bte:
		@:rangejoin(bte,)@
	case TYPE_sht:
		@:rangejoin(sht,)@
	case TYPE_int:
		@:rangejoin(int,)@
	case TYPE_wrd:
		@:rangejoin(wrd,)@
	case TYPE_flt:
		@:rangejoin(flt,)@
	case TYPE_dbl:
		@:rangejoin(dbl,)@
	case TYPE_lng:
		@:rangejoin(lng,)@
	default:
		@:rangejoin(any,any)@
	}
	/* set sorted flags by hand, because we used BUNfastins() */
	bn->hsorted = BAThordered(l);
	bn->hrevsorted = BAThrevordered(l);
	bn->tsorted = FALSE;
	bn->trevsorted = FALSE;

	ESTIDEBUG THRprintf(GDKout, "#BATrangejoin: actual resultsize: " BUNFMT "\n", BATcount(bn));

	return bn;
}

@= rangejoin
if (li && hi)
	@:rangejoin_@2(@1,>=,<=)
else if (li && !hi)
	@:rangejoin_@2(@1,>=,<)
else if (!li && hi)
	@:rangejoin_@2(@1,>,<=)
else
	@:rangejoin_@2(@1,>,<)
break;
@
@= rangejoin_
{
	BATiter li = bat_iterator(l);
	BATiter rli = bat_iterator(rl);
	BATiter rhi = bat_iterator(rh);
	BUN p, q;
	BUN v, w;
	BUN cap = bn->batCapacity, cnt = 0;

	BATloop(l, p, q) {
		@1 x1 = *(@1 *) BUNtloc(li, p);
		BATloop(rl, v, w) {
			if ((x1 @2 *(@1 *) BUNtloc(rli, v))  &&
			    (x1 @3 *(@1 *) BUNtloc(rhi, v))) { 
				if (BUNfastins(bn, BUNhead(li, p), BUNhead(rli, v)) == NULL) {
					BBPreclaim(bn);
					return NULL;
				}
			}
		}
		/* re-adjust the capacity if needed */
		cnt++;
		if ( BATcount(bn) > cap ){
			BUN sze = (BUN)ceil((double) BATcount(bn) /cnt);
			if ( BATextend(bn, BATcount(l) * sze ) == NULL ){
				BBPreclaim(bn);
				return NULL;
			}
			cap = bn->batCapacity - sze -1; /* trigger before BATextend in mainloop */
		}
	}
}
@= rangejoin_any
{
	BATiter li = bat_iterator(l);
	BATiter rli = bat_iterator(rl);
	BATiter rhi = bat_iterator(rh);
	BUN p, q;
	BUN v, w;
	BUN cap = bn->batCapacity, cnt = 0;
	int (*cmp)(const void *, const void *) = BATatoms[l->ttype].atomCmp;

	if (!ATOMlinear(l->ttype)) {
		GDKerror("range join not possible on non-linear types\n");
		return NULL;
	}
	BATloop(l, p, q) {
		ptr x1 = (ptr)BUNtail(li, p);
		BATloop(rl, v, w) {
			if (cmp(x1, (ptr)BUNtail(rli, v)) @2 0  &&
			    cmp(x1, (ptr)BUNtail(rhi, v)) @3 0) { 
				if (BUNfastins(bn, BUNhead(li, p), BUNhead(rli, v)) == NULL) {
					BBPreclaim(bn);
					return NULL;
				}
			}
		}
		/* re-adjust the capacity if needed */
		cnt++;
		if ( BATcount(bn) > cap ){
			BUN sze = (BUN)ceil((double) BATcount(bn) /cnt);
			if ( BATextend(bn, BATcount(l) * sze ) == NULL ){
				BBPreclaim(bn);
				return NULL;
			}
			cap = bn->batCapacity - sze -1; /* trigger before BATextend in mainloop */
		}
	}
}
@
@c
/*
 * @-
 * @+ Bandjoin
 * A non-equi join of two relations R and S is called a Band-join if
 * the join predicate requires the values of R to fall within a given range.
 * This kind of joins is encountered in real world domains, such as those
 * involved with time and distance.
 *
 * The boundary conditions for the bandjoin are constants or a NULL value.
 * The latter enables encoding of arbitrary theta joins using the more
 * general bandjoin.
 * Incidentally note that c1 = c2 = 0 leads to an equi-join.
 *
 * The straight forward implementation uses a nested loop.
 * The current implementation does not optimize processing, because
 * the impact of the choices is not yet clear.
 *
 * The hash indexing routines have been extended with a Band argument.
 */
static BAT *
BATbandjoin_nl(BAT *l, BAT *r, ptr c1, ptr c2, bit li, bit hi)
{
	BAT *bn;

	ERRORcheck(l == NULL, "BATbandjoin: invalid left operand");
	ERRORcheck(r == NULL, "BATbandjoin: invalid right operand");
	ERRORcheck(TYPEerror(l->ttype, r->htype), "BATbandjoin: type conflict\n");
	ALGODEBUG fprintf(stderr, "#BATbandjoin: nestedloop;\n");
	bn = BATnew(BAThtype(l), BATttype(r), MIN(BATcount(l), BATcount(r)));
	if (bn == NULL)
		return bn;
	switch (ATOMstorage(r->htype)) {
	case TYPE_bte:
		@:bandjoin_nl(bte)@
	case TYPE_sht:
		@:bandjoin_nl(sht)@
	case TYPE_int:
		@:bandjoin_nl(int)@
	case TYPE_wrd:
		@:bandjoin_nl(wrd)@
	case TYPE_flt:
		@:bandjoin_nl(flt)@
	case TYPE_dbl:
		@:bandjoin_nl(dbl)@
	case TYPE_lng:
		@:bandjoin_nl(lng)@
	default:
		(void) c1;
		(void) c2;
		(void) li;
		(void) hi;
		GDKerror("BATbandjoin: type not implemented\n");
		return NULL;
	}
	/* set sorted flags by hand, because we used BUNfastins() */
	bn->hsorted = BAThordered(l);
	bn->hrevsorted = BAThrevordered(l);
	bn->tsorted = FALSE;
	bn->trevsorted = FALSE;
	bn->H->nonil = l->H->nonil;
	bn->T->nonil = r->T->nonil;

	ESTIDEBUG THRprintf(GDKout, "#BATbandjoin: actual resultsize: " BUNFMT "\n", BATcount(bn));

	return bn;
}

/*
 * @-
 * The easiest case is to implement a nested loop for band operations.
 * Choice point is to determine the status of the NULL values in the final
 * result.
 */
@= bandjoin_nl_
{
	BATiter li = bat_iterator(l), ri = bat_iterator(r);
	@1 *x1, *x2, cc1 = *(@1*)c1, cc2 = *(@1*)c2;
	BUN p, q, v, w;

	BATloop(l, p, q) {
		x1 = (@1 *) BUNtloc(li, p);
		BATloop(r, v, w) {
			x2 = (@1 *) BUNhloc(ri, v);
			if ((*x1 @2 *x2 - cc1) &&
			    (*x1 @3 *x2 + cc2)) {
				if (BUNfastins(bn, BUNhead(li, p), BUNtail(ri, v)) == NULL) {
					BBPreclaim(bn);
					return NULL;
				}
			}
		}
	}
}

@= bandjoin_nl
if (li && hi)
	@:bandjoin_nl_(@1,>=,<=)
else if (li && !hi)
	@:bandjoin_nl_(@1,>=,<)
else if (!li && hi)
	@:bandjoin_nl_(@1,>,<=)
else
	@:bandjoin_nl_(@1,>,<)
break;
@
@= bandjoin_mj_loop
	/* sliding window like solution */
	while(lp < lc && rp < rc) {
		BUN i;

		/* slide r */
		while(rp<rc && !(lt[lp] @3 (rh[rp] + cc2)))
			rp++;
		if (rp>=rc)
			break;

		/* slide window */
		while(lp<lc && !(lt[lp] @2 (rh[rp] - cc1)))
			lp++;
		while(ll<lc && (lt[ll] @3 (rh[rp] + cc2)))
			ll++;
		if (o + ll-lp > BATcapacity(bn)) {
			BUN g = MAX(ll-lp, 1024*1024);
			BATsetcount(bn, o);
			if (limit) {
                              *limit = o && lc < rc ? (rp - rc) / MAX(1, rc) : (lp - lc) / MAX(1, lc);
			      break;
                        }
			if (BATextend(bn, BATcapacity(bn)+g) == NULL)
			      goto failed;
		}
		bnh = (oid*)Hloc(bn, bnf);
		bnt = (oid*)Tloc(bn, bnf);
		for (i=0; i<(ll-lp); i++, o++) {
			bnh[o] = @4;
			bnt[o] = @5;
		}
		rp++;
	}

/* lets assume result is oid,oid */
@= bandjoin_mj
{
	BUN lp = 0, rp = 0, bnf = BUNfirst(bn);
	oid *bnh = NULL, *bnt = NULL;
	bit lo = l->htype, ro = r->ttype;
	oid *lh = (oid*)Hloc(l, BUNfirst(l)), *rt = (oid*)Tloc(r, BUNfirst(r));
	@1 *lt = (@1*)Tloc(l, BUNfirst(l)), *rh = (@1*)Hloc(r, BUNfirst(r)); 
	@1 cc1 = *(@1*)c1, cc2 = *(@1*)c2;
	BUN ll = lp, o = 0;
	oid lhb = l->hseqbase, rtb = r->tseqbase;
	

	/* handle oid and void inputs */
	if (lo && ro) {
		@:bandjoin_mj_loop(@1,@2,@3,lh[lp+i],rt[rp])
	} else if (!lo && ro) {
		@:bandjoin_mj_loop(@1,@2,@3,lhb+lp+i,rt[rp])
	} else if (lo && !ro) {
		@:bandjoin_mj_loop(@1,@2,@3,lh[lp+i],rtb+rp)
	} else {
		@:bandjoin_mj_loop(@1,@2,@3,lhb+lp+i,rtb+rp)
	}
	BATsetcount(bn, o);
}

@= bandjoin_mj_
if (li && hi)
	@:bandjoin_mj(@1,>=,<=)
else if (li && !hi)
	@:bandjoin_mj(@1,>=,<)
else if (!li && hi)
	@:bandjoin_mj(@1,>,<=)
else
	@:bandjoin_mj(@1,>,<)
break;
@
@c

static BAT *
BATbandjoin_mj(BAT *l, BAT *r, ptr c1, ptr c2, bit li, bit hi, BUN *limit)
{
	BAT *bn = NULL;
	BUN lc = BATcount(l), rc = BATcount(r);

	ALGODEBUG fprintf(stderr, "#BATbandjoin: mergejoin;\n");
	bn = BATnew(ATOMtype(l->htype), ATOMtype(r->ttype), limit ? *limit : MIN(lc, rc));
	switch (l->ttype) {
	case TYPE_bte:
		@:bandjoin_mj_(bte)@
	case TYPE_sht:
		@:bandjoin_mj_(sht)@
	case TYPE_int:
		@:bandjoin_mj_(int)@
	case TYPE_wrd:
		@:bandjoin_mj_(wrd)@
	case TYPE_flt:
		@:bandjoin_mj_(flt)@
	case TYPE_dbl:
		@:bandjoin_mj_(dbl)@
	case TYPE_lng:
		@:bandjoin_mj_(lng)@
	default:
		(void) c1;
		(void) c2;
		(void) li;
		(void) hi;
		GDKerror("BATbandjoin: type not implemented\n");
		goto failed;
	}
	BATkey(bn, FALSE);
	BATkey(BATmirror(bn), FALSE);
	bn->hsorted = FALSE;
	bn->hrevsorted = FALSE;
	bn->tsorted = BATtordered(r);
	bn->trevsorted = BATtrevordered(r);
	bn->H->nonil = l->H->nonil;
	bn->T->nonil = r->T->nonil;
	return bn;
      failed:
	BBPreclaim(bn);
	return NULL;
}

static BAT *
BATbandmergejoin_limit(BAT *l, BAT *r, ptr c1, ptr c2, bit li, bit hi, BUN *limit)
{
	BAT *ol = l, *or = r, *bn = NULL;

	/* large cases use a merge join like band, therefore we first sort */
	if (!BATtordered(l))
		l = BATmirror(BATsort(BATmirror(l)));
	if (!BAThordered(r))
		r = BATsort(r);

	bn = BATbandjoin_mj(l, r, c1, c2, li, hi, limit);

	if (l != ol)
		BBPreclaim(l);
	if (r != or)
		BBPreclaim(r);
	return bn;
}

static BAT *
BATbandmergejoin(BAT *l, BAT *r, ptr c1, ptr c2, bit li, bit hi)
{
	return BATbandmergejoin_limit(l, r, c1, c2, li, hi, NULL);
}

BAT *
BATbandjoin(BAT *l, BAT *r, ptr c1, ptr c2, bit li, bit hi)
{
	if ((!BATtordered(l) && BATcount(l) < BATTINY) ||
	    (!BAThordered(r) && BATcount(r) < BATTINY) ||
	    ATOMtype(l->htype) != TYPE_oid ||
	    ATOMtype(r->ttype) != TYPE_oid)
		return BATbandjoin_nl(l, r, c1, c2, li, hi);

	return BATbandmergejoin(l, r, c1, c2, li, hi);
}

