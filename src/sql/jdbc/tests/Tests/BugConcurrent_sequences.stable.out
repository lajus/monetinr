stdout of test 'BugConcurrent_sequences` in directory 'sql/jdbc/tests` itself:


# 11:37:36 >  
# 11:37:36 >   mserver5 "--config=/export/scratch/stripe/fabian/monetdb/stable/program-i86pc/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/export/scratch/stripe/fabian/monetdb/stable/program-i86pc/lib/MonetDB5:/export/scratch/stripe/fabian/monetdb/stable/program-i86pc/lib/MonetDB5/lib:/export/scratch/stripe/fabian/monetdb/stable/program-i86pc/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch/stripe/fabian/monetdb/stable/mtest-pegasus.ins.cwi.nl/sql/dbfarm" --set "sql_logdir=/export/scratch/stripe/fabian/monetdb/stable/mtest-pegasus.ins.cwi.nl/sql/sqllog" --set "xquery_logdir=/export/scratch/stripe/fabian/monetdb/stable/mtest-pegasus.ins.cwi.nl/sql/xquerylog"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34432 --set xrpc_port=48093 --set monet_prompt= --trace  "--dbname=mTests_src_jdbc_tests" --set mal_listing=0 "--dbinit= include sql;" ; echo ; echo Over..
# 11:37:36 >  

# MonetDB server v5.10.3, based on kernel v1.28.3
# Serving database 'mTests_src_jdbc_tests', using 1 thread
# Compiled for x86_64-pc-solaris2.11/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2009 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://pegasus.ins.cwi.nl:34432/
# MonetDB/SQL module v2.28.4 loaded

Ready.
#function user.main():void;
#    clients.quit();
#end main;


# 11:37:37 >  
# 11:37:37 >  ./BugConcurrent_sequences.SQL.sh BugConcurrent_sequences 
# 11:37:37 >  


# 11:37:37 >  
# 11:37:37 >  java BugConcurrent_sequences "jdbc:monetdb://pegasus:34432/mTests_src_jdbc_tests?user=monetdb&password=monetdb"
# 11:37:37 >  

0. true	true
0. true	true
1. create table t1 using client 1... passed :)
2. insert into t1 using client 1 and 2... client 1 passed :)
transaction on client 2 :)
client 1 passed :)
transaction client 2 failed :)
passed :)
2.1. check table status with client 1...
1, client1
3, client1
4, client2
passed :)
2.2. check table status with client 2...
1, client1
3, client1
4, client2
passed :)
3.1. drop table t1 using client 1... passed :)
3.1. recreate t1 using client 1... passed :)
x. Reconnecting client 1 and 2... passed :)
4. insert into t1 using client 1 and 2...
passed :)
passed :)
4.1. check table status with client 1...
1, client1
2, client2
passed :)
4.2. check table status with client 2...
1, client1
2, client2
passed :)

# 11:37:38 >  
# 11:37:38 >  Done.
# 11:37:38 >  

