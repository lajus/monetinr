stdout of test 'scenario00` in directory 'sql/backends/monet5/datacell` itself:


# 16:43:47 >  
# 16:43:47 >   mserver5  --debug=10 --set gdk_nr_threads=0  --set "gdk_dbfarm=/net/rig.ins.cwi.nl/export/scratch0/manegold/Monet/HG/Aug2011/prefix/--enable-datacell_--disable-debug_--enable-optimize_--disable-assert/var/MonetDB" --set mapi_open=true --set mapi_port=38529 --set monet_prompt= --trace --forcemito --set mal_listing=2  "--dbname=mTests_backends_monet5_datacell" --set mal_listing=0 ; echo ; echo Over..
# 16:43:47 >  

# MonetDB 5 server v11.5.0
# This is an unreleased version
# Serving database 'mTests_backends_monet5_datacell', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.749 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rig.ins.cwi.nl:38529/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/DataCell module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 00_catalog.sql
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_history.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_geom.sql
# loading sql script: 50_datacell.sql
# loading sql script: 80_udf.sql
# loading sql script: 99_system.sql

# 12:44:16 >  
# 12:44:16 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=vienna" "--port=30375"
# 12:44:16 >  

#set optimizer='datacell_pipe';
#create table datacell.bsktin(
#    id integer,
#    tag integer,
#    payload integer
#);
#create table datacell.bsktout (like datacell.bsktin);
#select * from datacell.receptors(); select * from datacell.emitters(); select * from datacell.queries(); select * from datacell.baskets();
% .,	.,	.,	.,	.,	.,	.,	.,	.,	. # table_name
% nme,	host,	port,	protocol,	mode,	status,	lastseen,	cycles,	received,	pending # name
% clob,	clob,	int,	clob,	clob,	clob,	timestamp,	int,	int,	int # type
% 15,	9,	5,	3,	7,	6,	26,	1,	1,	1 # length
[ "datacell.bsktin",	"localhost",	50500,	"TCP",	"passive",	"paused",	NULL,	0,	0,	0	]
#select * from datacell.receptors(); select * from datacell.emitters(); select * from datacell.queries(); select * from datacell.baskets();
% .,	.,	.,	.,	.,	.,	.,	.,	.,	. # table_name
% nme,	host,	port,	protocol,	mode,	status,	lastsent,	cycles,	sent,	pending # name
% clob,	clob,	int,	clob,	clob,	clob,	timestamp,	int,	int,	int # type
% 16,	9,	5,	3,	6,	6,	26,	1,	1,	1 # length
[ "datacell.bsktout",	"localhost",	50600,	"UDP",	"active",	"paused",	NULL,	0,	0,	0	]
#select * from datacell.receptors(); select * from datacell.emitters(); select * from datacell.queries(); select * from datacell.baskets();
% .,	.,	.,	.,	.,	.,	.,	. # table_name
% nme,	status,	lastrun,	cycles,	events,	time,	error,	def # name
% clob,	clob,	timestamp,	int,	int,	bigint,	clob,	clob # type
% 13,	6,	26,	1,	1,	1,	0,	59 # length
[ "datacell.pass",	"paused",	NULL,	0,	0,	0,	"",	"insert into datacell.bsktout select * from datacell.bsktin;"	]
#select * from datacell.receptors(); select * from datacell.emitters(); select * from datacell.queries(); select * from datacell.baskets();
% .,	.,	.,	.,	.,	.,	.,	.,	. # table_name
% nme,	threshold,	winsize,	winstride,	timeslice,	timestride,	beat,	seen,	events # name
% clob,	int,	int,	int,	int,	int,	int,	timestamp,	int # type
% 16,	1,	1,	1,	1,	1,	1,	26,	1 # length
[ "datacell.bsktin",	0,	0,	0,	0,	0,	0,	NULL,	0	]
[ "datacell.bsktout",	0,	0,	0,	0,	0,	0,	NULL,	0	]
#call datacell.dump();
#baskets[ 1] datacell.bsktin columns 3 threshold 0 window=[0,0] time window=[0,0] beat 0 milliseconds events 0
#baskets[ 2] datacell.bsktout columns 3 threshold 0 window=[0,0] time window=[0,0] beat 0 milliseconds events 0
#receptor datacell.bsktin at localhost:50500 protocol=TCP mode=passive status=running delay=1000 
#emitter datacell.bsktout at localhost:50600 protocol=UDP mode=active status=running delay=1000
#scheduler status running
#[0]	datacell.pass running delay 0 cycles 0 events 0 time 0 ms
#<--	datacell.bsktin basket[1] 0 0
#drop table datacell.bsktin;
#drop table datacell.bsktout;

# 12:44:16 >  
# 12:44:16 >  "Done."
# 12:44:16 >  

