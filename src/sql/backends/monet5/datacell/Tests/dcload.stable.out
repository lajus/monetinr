stdout of test 'dcload` in directory 'sql/backends/monet5/datacell` itself:


# 12:45:12 >  
# 12:45:12 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/export/scratch1/mk/current//Linux/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=38236" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_backends_monet5_datacell" "--set" "mal_listing=0"
# 12:45:12 >  

# MonetDB 5 server v11.14.0
# This is an unreleased version
# Serving database 'mTests_backends_monet5_datacell', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.629 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:38236/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded
# MonetDB/DataCell loaded

Ready.

# 12:45:12 >  
# 12:45:12 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=vienna" "--port=38236"
# 12:45:12 >  

#CREATE TABLE "datacell"."sensors" (
#        "ip"        INET,
#        "emit_time" TIMESTAMP,
#        "recv_time" TIMESTAMP,
#        "location"  VARCHAR(20),
#        "type"      VARCHAR(50),
#        "value"     DOUBLE
#);
#create table datacell.warm(like datacell.sensors);
#create table datacell.hot(like datacell.sensors);
#CREATE TABLE "datacell"."alarm_warm" (
#        "ip"          INET,
#        "emit_time"   TIMESTAMP,
#        "location"    VARCHAR(20),
#        "temperature" DOUBLE
#);
#CREATE TABLE "datacell"."alarm_hot" (
#        "ip"          INET,
#        "emit_time"   TIMESTAMP,
#        "location"    VARCHAR(20),
#        "temperature" DOUBLE
#);
#CREATE PROCEDURE datacell.warm()
#BEGIN
#	INSERT INTO datacell.alarm_warm 
#	SELECT ip, emit_time, location, value 
#		FROM datacell.warm 
#		WHERE "type" LIKE 'temperature' AND value BETWEEN 21 AND 24;
#END;
#CREATE PROCEDURE datacell.hot()
#BEGIN
#	INSERT INTO datacell.alarm_hot 
#	SELECT ip, emit_time, location, value 
#	FROM datacell.hot 
#	WHERE type LIKE 'temperature' AND value > 24;
#END;
#CREATE PROCEDURE datacell.splitter()
#BEGIN
#	INSERT INTO datacell.warm SELECT * FROM datacell.sensors;
#	INSERT INTO datacell.hot SELECT * FROM datacell.sensors;
#END;
#SELECT * FROM datacell.receptors(); SELECT * FROM datacell.emitters(); SELECT * FROM datacell.queries(); SELECT * FROM datacell.baskets();
% .,	.,	.,	.,	.,	.,	.,	.,	.,	. # table_name
% nme,	host,	port,	protocol,	mode,	status,	lastseen,	cycles,	received,	pending # name
% clob,	clob,	int,	clob,	clob,	clob,	timestamp,	int,	int,	int # type
% 16,	9,	5,	3,	7,	7,	26,	1,	1,	1 # length
[ "datacell.sensors",	"localhost",	50500,	"TCP",	"passive",	"running",	NULL,	0,	0,	0	]
#SELECT * FROM datacell.receptors(); SELECT * FROM datacell.emitters(); SELECT * FROM datacell.queries(); SELECT * FROM datacell.baskets();
% .,	.,	.,	.,	.,	.,	.,	.,	.,	. # table_name
% nme,	host,	port,	protocol,	mode,	status,	lastsent,	cycles,	sent,	pending # name
% clob,	clob,	int,	clob,	clob,	clob,	timestamp,	int,	int,	int # type
% 19,	9,	5,	3,	6,	7,	26,	1,	1,	1 # length
[ "datacell.alarm_hot",	"localhost",	50602,	"UDP",	"active",	"running",	NULL,	0,	0,	0	]
[ "datacell.alarm_warm",	"localhost",	50601,	"UDP",	"active",	"running",	NULL,	0,	0,	0	]
#SELECT * FROM datacell.receptors(); SELECT * FROM datacell.emitters(); SELECT * FROM datacell.queries(); SELECT * FROM datacell.baskets();
% .,	.,	.,	.,	.,	.,	.,	. # table_name
% nme,	status,	lastrun,	cycles,	events,	time,	error,	def # name
% clob,	clob,	timestamp,	int,	int,	bigint,	clob,	clob # type
% 17,	7,	26,	1,	1,	1,	0,	24 # length
[ "datacell.warm",	"running",	NULL,	0,	0,	0,	"",	"see procedure definition"	]
[ "datacell.hot",	"running",	NULL,	0,	0,	0,	"",	"see procedure definition"	]
[ "datacell.splitter",	"running",	NULL,	0,	0,	0,	"",	"see procedure definition"	]
#SELECT * FROM datacell.receptors(); SELECT * FROM datacell.emitters(); SELECT * FROM datacell.queries(); SELECT * FROM datacell.baskets();
% .,	.,	.,	.,	.,	.,	.,	.,	. # table_name
% nme,	threshold,	winsize,	winstride,	timeslice,	timestride,	beat,	seen,	events # name
% clob,	int,	int,	int,	int,	int,	int,	timestamp,	int # type
% 19,	1,	1,	1,	1,	1,	1,	26,	1 # length
[ "datacell.sensors",	0,	0,	0,	0,	0,	0,	NULL,	0	]
[ "datacell.alarm_warm",	0,	0,	0,	0,	0,	0,	NULL,	0	]
[ "datacell.alarm_hot",	0,	0,	0,	0,	0,	0,	NULL,	0	]
[ "datacell.warm",	0,	0,	0,	0,	0,	0,	NULL,	0	]
[ "datacell.hot",	0,	0,	0,	0,	0,	0,	NULL,	0	]

# 12:45:12 >  
# 12:45:12 >  "Done."
# 12:45:12 >  

