import os
import sys
import re

dirlist = {
    'gdk': ['gdk', 'common/options', 'common/utils'],
    'mapi': ['clients/mapilib'],
    'monetdb5': ['monetdb5'],
    'stream': ['common/stream'],
    }
libs = sorted(dirlist.keys())
skipdirs = ['extras']
skipfiles = ['monet_getopt.h']
srcdir = r'@SOURCE@'
blddir = r'@BUILD@'

cmtre = re.compile(r'/\*.*?\*/|//[^\n]*', re.DOTALL)
expre = re.compile(r'^[ \t]*[a-zA-Z_0-9]*export\s+(?P<decl>[^;]*;)', re.MULTILINE)
spcre = re.compile(r'\s+')
nmere = re.compile(r'\b(?P<name>[a-zA-Z_][a-zA-Z_0-9]*)\s*[[(;]')
strre = re.compile(r'([^ *])\*')
comre = re.compile(r',\s*')

def extract(f):
    decls = []
    data = open(f).read()
    # remove C comments
    res = cmtre.search(data)
    while res is not None:
        data = data[:res.start(0)] + ' ' + data[res.end(0):]
        res = cmtre.search(data, res.start(0))
    # remove \ <newline> combo's
    data = data.replace('\\\n', '')
    res = expre.search(data)
    while res is not None:
        pos = res.end(0)
        decl = res.group('decl')
        decl = spcre.sub(' ', decl) \
            .replace(' ;', ';') \
            .replace(' (', '(') \
            .replace('( ', '(') \
            .replace(' )', ')') \
            .replace(') ', ')') \
            .replace('* ', '*') \
            .replace(' ,', ',') \
            .replace(')__attribute__', ') __attribute__')
        decl = strre.sub(r'\1 *', decl)
        decl = comre.sub(', ', decl)
        res = nmere.search(decl)
        if res is not None:
            decls.append((res.group('name'), decl))
        else:
            decls.append(('', decl))
        res = expre.search(data, pos)
    return decls

def findfiles(dirlist, skipfiles = [], skipdirs = []):
    decls = []
    done = {}
    for d in dirlist:
        for root, dirs, files in os.walk(d):
            for d in skipdirs:
                if d in dirs:
                    dirs.remove(d)
            for f in files:
                if f not in done and \
                        (f.endswith('.c') or f.endswith('.h')) and \
                        not f.startswith('.') and \
                        f not in skipfiles and \
                        os.path.isfile(os.path.join(root, f)):
                    decls.extend(extract(os.path.join(root, f)))
                    done[f] = True
    decls.sort()
    names, decls = list(zip(*decls))
    return decls

for lib in libs:
    dirs = dirlist[lib]
    dl = [os.path.join(srcdir, d) for d in dirs]
    if srcdir != blddir:
        dl.extend([os.path.join(blddir, d) for d in dirs])
    decls = findfiles(dl, skipfiles = skipfiles, skipdirs = skipdirs)
    sys.stdout.write('# %s\n' % lib)
    for d in decls:
        sys.stdout.write(d)
        sys.stdout.write('\n')
    sys.stdout.write('\n')
